; ModuleID = '-'
target datalayout = "E-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-n32"
target triple = "GHAL3D_2_1"

%opencl_metadata_type = type <{ i8*, i8*, [4 x i32], [4 x i32], i8*, i8* }>

@opencl_mandelbrot_vector_locals = appending global [1 x i8*] zeroinitializer, section "llvm.metadata" ; <[1 x i8*]*> [#uses=1]
@opencl_mandelbrot_vector_parameters = appending global [129 x i8] c"uchar4 __attribute__((address_space(1))) *, float const, float const, float const, float const, uint const, int const, int const\00", section "llvm.metadata" ; <[129 x i8]*> [#uses=1]
@opencl_metadata = appending global [1 x %opencl_metadata_type] [%opencl_metadata_type <{ i8* bitcast (void (<4 x i8> addrspace(1)*, float, float, float, float, i32, i32, i32)* @mandelbrot_vector to i8*), i8* null, [4 x i32] zeroinitializer, [4 x i32] zeroinitializer, i8* bitcast ([1 x i8*]* @opencl_mandelbrot_vector_locals to i8*), i8* getelementptr inbounds ([129 x i8]* @opencl_mandelbrot_vector_parameters, i32 0, i32 0) }>], section "llvm.metadata" ; <[1 x %opencl_metadata_type]*> [#uses=0]

define void @mandelbrot_vector(<4 x i8> addrspace(1)* %mandelbrotImage, float %posx, float %posy, float %stepSizeX, float %stepSizeY, i32 %maxIterations, i32 %width, i32 %bench) nounwind {
  %1 = alloca <4 x i8> addrspace(1)*, align 16    ; <<4 x i8> addrspace(1)**> [#uses=5]
  %2 = alloca float, align 4                      ; <float*> [#uses=5]
  %3 = alloca float, align 4                      ; <float*> [#uses=5]
  %4 = alloca float, align 4                      ; <float*> [#uses=5]
  %5 = alloca float, align 4                      ; <float*> [#uses=5]
  %6 = alloca i32, align 4                        ; <i32*> [#uses=10]
  %7 = alloca i32, align 4                        ; <i32*> [#uses=3]
  %8 = alloca i32, align 4                        ; <i32*> [#uses=5]
  %tid = alloca i32, align 4                      ; <i32*> [#uses=7]
  %i = alloca i32, align 4                        ; <i32*> [#uses=5]
  %j = alloca i32, align 4                        ; <i32*> [#uses=5]
  %veci = alloca <4 x i32>, align 16              ; <<4 x i32>*> [#uses=5]
  %vecj = alloca <4 x i32>, align 16              ; <<4 x i32>*> [#uses=5]
  %x0 = alloca <4 x float>, align 16              ; <<4 x float>*> [#uses=26]
  %y0 = alloca <4 x float>, align 16              ; <<4 x float>*> [#uses=26]
  %x = alloca <4 x float>, align 16               ; <<4 x float>*> [#uses=81]
  %y = alloca <4 x float>, align 16               ; <<4 x float>*> [#uses=113]
  %iter = alloca i32, align 4                     ; <i32*> [#uses=9]
  %tmp = alloca <4 x float>, align 16             ; <<4 x float>*> [#uses=34]
  %stay = alloca <4 x i32>, align 16              ; <<4 x i32>*> [#uses=54]
  %ccount = alloca <4 x i32>, align 16            ; <<4 x i32>*> [#uses=34]
  %savx = alloca <4 x float>, align 16            ; <<4 x float>*> [#uses=28]
  %savy = alloca <4 x float>, align 16            ; <<4 x float>*> [#uses=28]
  %fc = alloca <4 x float>, align 16              ; <<4 x float>*> [#uses=13]
  %c = alloca float, align 4                      ; <float*> [#uses=16]
  %color = alloca [4 x <4 x i8>], align 4         ; <[4 x <4 x i8>]*> [#uses=48]
  store <4 x i8> addrspace(1)* %mandelbrotImage, <4 x i8> addrspace(1)** %1
  store float %posx, float* %2
  store float %posy, float* %3
  store float %stepSizeX, float* %4
  store float %stepSizeY, float* %5
  store i32 %maxIterations, i32* %6
  store i32 %width, i32* %7
  store i32 %bench, i32* %8
  %9 = call i32 @get_global_id(i32 0)             ; <i32> [#uses=1]
  store i32 %9, i32* %tid
  %10 = load i32* %tid                            ; <i32> [#uses=1]
  %11 = load i32* %7                              ; <i32> [#uses=1]
  %12 = sdiv i32 %11, 4                           ; <i32> [#uses=1]
  %13 = srem i32 %10, %12                         ; <i32> [#uses=1]
  store i32 %13, i32* %i
  %14 = load i32* %tid                            ; <i32> [#uses=1]
  %15 = load i32* %7                              ; <i32> [#uses=1]
  %16 = sdiv i32 %15, 4                           ; <i32> [#uses=1]
  %17 = sdiv i32 %14, %16                         ; <i32> [#uses=1]
  store i32 %17, i32* %j
  %18 = load i32* %i                              ; <i32> [#uses=1]
  %19 = mul i32 4, %18                            ; <i32> [#uses=1]
  %20 = insertelement <4 x i32> undef, i32 %19, i32 0 ; <<4 x i32>> [#uses=1]
  %21 = load i32* %i                              ; <i32> [#uses=1]
  %22 = mul i32 4, %21                            ; <i32> [#uses=1]
  %23 = add nsw i32 %22, 1                        ; <i32> [#uses=1]
  %24 = insertelement <4 x i32> %20, i32 %23, i32 1 ; <<4 x i32>> [#uses=1]
  %25 = load i32* %i                              ; <i32> [#uses=1]
  %26 = mul i32 4, %25                            ; <i32> [#uses=1]
  %27 = add nsw i32 %26, 2                        ; <i32> [#uses=1]
  %28 = insertelement <4 x i32> %24, i32 %27, i32 2 ; <<4 x i32>> [#uses=1]
  %29 = load i32* %i                              ; <i32> [#uses=1]
  %30 = mul i32 4, %29                            ; <i32> [#uses=1]
  %31 = add nsw i32 %30, 3                        ; <i32> [#uses=1]
  %32 = insertelement <4 x i32> %28, i32 %31, i32 3 ; <<4 x i32>> [#uses=1]
  store <4 x i32> %32, <4 x i32>* %veci
  %33 = load i32* %j                              ; <i32> [#uses=1]
  %34 = insertelement <4 x i32> undef, i32 %33, i32 0 ; <<4 x i32>> [#uses=1]
  %35 = load i32* %j                              ; <i32> [#uses=1]
  %36 = insertelement <4 x i32> %34, i32 %35, i32 1 ; <<4 x i32>> [#uses=1]
  %37 = load i32* %j                              ; <i32> [#uses=1]
  %38 = insertelement <4 x i32> %36, i32 %37, i32 2 ; <<4 x i32>> [#uses=1]
  %39 = load i32* %j                              ; <i32> [#uses=1]
  %40 = insertelement <4 x i32> %38, i32 %39, i32 3 ; <<4 x i32>> [#uses=1]
  store <4 x i32> %40, <4 x i32>* %vecj
  %41 = load float* %2                            ; <float> [#uses=1]
  %42 = load float* %4                            ; <float> [#uses=1]
  %43 = load <4 x i32>* %veci                     ; <<4 x i32>> [#uses=1]
  %44 = extractelement <4 x i32> %43, i32 0       ; <i32> [#uses=1]
  %45 = sitofp i32 %44 to float                   ; <float> [#uses=1]
  %46 = fmul float %42, %45                       ; <float> [#uses=1]
  %47 = fadd float %41, %46                       ; <float> [#uses=1]
  %48 = load <4 x float>* %x0                     ; <<4 x float>> [#uses=1]
  %49 = insertelement <4 x float> %48, float %47, i32 0 ; <<4 x float>> [#uses=1]
  store <4 x float> %49, <4 x float>* %x0
  %50 = load float* %2                            ; <float> [#uses=1]
  %51 = load float* %4                            ; <float> [#uses=1]
  %52 = load <4 x i32>* %veci                     ; <<4 x i32>> [#uses=1]
  %53 = extractelement <4 x i32> %52, i32 1       ; <i32> [#uses=1]
  %54 = sitofp i32 %53 to float                   ; <float> [#uses=1]
  %55 = fmul float %51, %54                       ; <float> [#uses=1]
  %56 = fadd float %50, %55                       ; <float> [#uses=1]
  %57 = load <4 x float>* %x0                     ; <<4 x float>> [#uses=1]
  %58 = insertelement <4 x float> %57, float %56, i32 1 ; <<4 x float>> [#uses=1]
  store <4 x float> %58, <4 x float>* %x0
  %59 = load float* %2                            ; <float> [#uses=1]
  %60 = load float* %4                            ; <float> [#uses=1]
  %61 = load <4 x i32>* %veci                     ; <<4 x i32>> [#uses=1]
  %62 = extractelement <4 x i32> %61, i32 2       ; <i32> [#uses=1]
  %63 = sitofp i32 %62 to float                   ; <float> [#uses=1]
  %64 = fmul float %60, %63                       ; <float> [#uses=1]
  %65 = fadd float %59, %64                       ; <float> [#uses=1]
  %66 = load <4 x float>* %x0                     ; <<4 x float>> [#uses=1]
  %67 = insertelement <4 x float> %66, float %65, i32 2 ; <<4 x float>> [#uses=1]
  store <4 x float> %67, <4 x float>* %x0
  %68 = load float* %2                            ; <float> [#uses=1]
  %69 = load float* %4                            ; <float> [#uses=1]
  %70 = load <4 x i32>* %veci                     ; <<4 x i32>> [#uses=1]
  %71 = extractelement <4 x i32> %70, i32 3       ; <i32> [#uses=1]
  %72 = sitofp i32 %71 to float                   ; <float> [#uses=1]
  %73 = fmul float %69, %72                       ; <float> [#uses=1]
  %74 = fadd float %68, %73                       ; <float> [#uses=1]
  %75 = load <4 x float>* %x0                     ; <<4 x float>> [#uses=1]
  %76 = insertelement <4 x float> %75, float %74, i32 3 ; <<4 x float>> [#uses=1]
  store <4 x float> %76, <4 x float>* %x0
  %77 = load float* %3                            ; <float> [#uses=1]
  %78 = load float* %5                            ; <float> [#uses=1]
  %79 = load <4 x i32>* %vecj                     ; <<4 x i32>> [#uses=1]
  %80 = extractelement <4 x i32> %79, i32 0       ; <i32> [#uses=1]
  %81 = sitofp i32 %80 to float                   ; <float> [#uses=1]
  %82 = fmul float %78, %81                       ; <float> [#uses=1]
  %83 = fadd float %77, %82                       ; <float> [#uses=1]
  %84 = load <4 x float>* %y0                     ; <<4 x float>> [#uses=1]
  %85 = insertelement <4 x float> %84, float %83, i32 0 ; <<4 x float>> [#uses=1]
  store <4 x float> %85, <4 x float>* %y0
  %86 = load float* %3                            ; <float> [#uses=1]
  %87 = load float* %5                            ; <float> [#uses=1]
  %88 = load <4 x i32>* %vecj                     ; <<4 x i32>> [#uses=1]
  %89 = extractelement <4 x i32> %88, i32 1       ; <i32> [#uses=1]
  %90 = sitofp i32 %89 to float                   ; <float> [#uses=1]
  %91 = fmul float %87, %90                       ; <float> [#uses=1]
  %92 = fadd float %86, %91                       ; <float> [#uses=1]
  %93 = load <4 x float>* %y0                     ; <<4 x float>> [#uses=1]
  %94 = insertelement <4 x float> %93, float %92, i32 1 ; <<4 x float>> [#uses=1]
  store <4 x float> %94, <4 x float>* %y0
  %95 = load float* %3                            ; <float> [#uses=1]
  %96 = load float* %5                            ; <float> [#uses=1]
  %97 = load <4 x i32>* %vecj                     ; <<4 x i32>> [#uses=1]
  %98 = extractelement <4 x i32> %97, i32 2       ; <i32> [#uses=1]
  %99 = sitofp i32 %98 to float                   ; <float> [#uses=1]
  %100 = fmul float %96, %99                      ; <float> [#uses=1]
  %101 = fadd float %95, %100                     ; <float> [#uses=1]
  %102 = load <4 x float>* %y0                    ; <<4 x float>> [#uses=1]
  %103 = insertelement <4 x float> %102, float %101, i32 2 ; <<4 x float>> [#uses=1]
  store <4 x float> %103, <4 x float>* %y0
  %104 = load float* %3                           ; <float> [#uses=1]
  %105 = load float* %5                           ; <float> [#uses=1]
  %106 = load <4 x i32>* %vecj                    ; <<4 x i32>> [#uses=1]
  %107 = extractelement <4 x i32> %106, i32 3     ; <i32> [#uses=1]
  %108 = sitofp i32 %107 to float                 ; <float> [#uses=1]
  %109 = fmul float %105, %108                    ; <float> [#uses=1]
  %110 = fadd float %104, %109                    ; <float> [#uses=1]
  %111 = load <4 x float>* %y0                    ; <<4 x float>> [#uses=1]
  %112 = insertelement <4 x float> %111, float %110, i32 3 ; <<4 x float>> [#uses=1]
  store <4 x float> %112, <4 x float>* %y0
  %113 = load <4 x float>* %x0                    ; <<4 x float>> [#uses=1]
  store <4 x float> %113, <4 x float>* %x
  %114 = load <4 x float>* %y0                    ; <<4 x float>> [#uses=1]
  store <4 x float> %114, <4 x float>* %y
  store i32 0, i32* %iter
  store <4 x i32> zeroinitializer, <4 x i32>* %ccount
  %115 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %116 = extractelement <4 x float> %115, i32 0   ; <float> [#uses=1]
  %117 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %118 = extractelement <4 x float> %117, i32 0   ; <float> [#uses=1]
  %119 = fmul float %116, %118                    ; <float> [#uses=1]
  %120 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %121 = extractelement <4 x float> %120, i32 0   ; <float> [#uses=1]
  %122 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %123 = extractelement <4 x float> %122, i32 0   ; <float> [#uses=1]
  %124 = fmul float %121, %123                    ; <float> [#uses=1]
  %125 = fadd float %119, %124                    ; <float> [#uses=1]
  %126 = fcmp ole float %125, 4.000000e+000       ; <i1> [#uses=1]
  %127 = zext i1 %126 to i32                      ; <i32> [#uses=1]
  %128 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %129 = insertelement <4 x i32> %128, i32 %127, i32 0 ; <<4 x i32>> [#uses=1]
  store <4 x i32> %129, <4 x i32>* %stay
  %130 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %131 = extractelement <4 x float> %130, i32 1   ; <float> [#uses=1]
  %132 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %133 = extractelement <4 x float> %132, i32 1   ; <float> [#uses=1]
  %134 = fmul float %131, %133                    ; <float> [#uses=1]
  %135 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %136 = extractelement <4 x float> %135, i32 1   ; <float> [#uses=1]
  %137 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %138 = extractelement <4 x float> %137, i32 1   ; <float> [#uses=1]
  %139 = fmul float %136, %138                    ; <float> [#uses=1]
  %140 = fadd float %134, %139                    ; <float> [#uses=1]
  %141 = fcmp ole float %140, 4.000000e+000       ; <i1> [#uses=1]
  %142 = zext i1 %141 to i32                      ; <i32> [#uses=1]
  %143 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %144 = insertelement <4 x i32> %143, i32 %142, i32 1 ; <<4 x i32>> [#uses=1]
  store <4 x i32> %144, <4 x i32>* %stay
  %145 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %146 = extractelement <4 x float> %145, i32 2   ; <float> [#uses=1]
  %147 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %148 = extractelement <4 x float> %147, i32 2   ; <float> [#uses=1]
  %149 = fmul float %146, %148                    ; <float> [#uses=1]
  %150 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %151 = extractelement <4 x float> %150, i32 2   ; <float> [#uses=1]
  %152 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %153 = extractelement <4 x float> %152, i32 2   ; <float> [#uses=1]
  %154 = fmul float %151, %153                    ; <float> [#uses=1]
  %155 = fadd float %149, %154                    ; <float> [#uses=1]
  %156 = fcmp ole float %155, 4.000000e+000       ; <i1> [#uses=1]
  %157 = zext i1 %156 to i32                      ; <i32> [#uses=1]
  %158 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %159 = insertelement <4 x i32> %158, i32 %157, i32 2 ; <<4 x i32>> [#uses=1]
  store <4 x i32> %159, <4 x i32>* %stay
  %160 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %161 = extractelement <4 x float> %160, i32 3   ; <float> [#uses=1]
  %162 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %163 = extractelement <4 x float> %162, i32 3   ; <float> [#uses=1]
  %164 = fmul float %161, %163                    ; <float> [#uses=1]
  %165 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %166 = extractelement <4 x float> %165, i32 3   ; <float> [#uses=1]
  %167 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %168 = extractelement <4 x float> %167, i32 3   ; <float> [#uses=1]
  %169 = fmul float %166, %168                    ; <float> [#uses=1]
  %170 = fadd float %164, %169                    ; <float> [#uses=1]
  %171 = fcmp ole float %170, 4.000000e+000       ; <i1> [#uses=1]
  %172 = zext i1 %171 to i32                      ; <i32> [#uses=1]
  %173 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %174 = insertelement <4 x i32> %173, i32 %172, i32 3 ; <<4 x i32>> [#uses=1]
  store <4 x i32> %174, <4 x i32>* %stay
  %175 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  store <4 x float> %175, <4 x float>* %savx
  %176 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  store <4 x float> %176, <4 x float>* %savy
  store i32 0, i32* %iter
  br label %177

; <label>:177                                     ; preds = %583, %0
  %178 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %179 = extractelement <4 x i32> %178, i32 0     ; <i32> [#uses=1]
  %180 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %181 = extractelement <4 x i32> %180, i32 1     ; <i32> [#uses=1]
  %182 = or i32 %179, %181                        ; <i32> [#uses=1]
  %183 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %184 = extractelement <4 x i32> %183, i32 2     ; <i32> [#uses=1]
  %185 = or i32 %182, %184                        ; <i32> [#uses=1]
  %186 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %187 = extractelement <4 x i32> %186, i32 3     ; <i32> [#uses=1]
  %188 = or i32 %185, %187                        ; <i32> [#uses=1]
  %189 = icmp ne i32 %188, 0                      ; <i1> [#uses=1]
  br i1 %189, label %190, label %194

; <label>:190                                     ; preds = %177
  %191 = load i32* %iter                          ; <i32> [#uses=1]
  %192 = load i32* %6                             ; <i32> [#uses=1]
  %193 = icmp ult i32 %191, %192                  ; <i1> [#uses=1]
  br label %194

; <label>:194                                     ; preds = %190, %177
  %195 = phi i1 [ false, %177 ], [ %193, %190 ]   ; <i1> [#uses=1]
  br i1 %195, label %196, label %586

; <label>:196                                     ; preds = %194
  %197 = load <4 x float>* %savx                  ; <<4 x float>> [#uses=1]
  store <4 x float> %197, <4 x float>* %x
  %198 = load <4 x float>* %savy                  ; <<4 x float>> [#uses=1]
  store <4 x float> %198, <4 x float>* %y
  %199 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %200 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %201 = fmul <4 x float> %199, %200              ; <<4 x float>> [#uses=1]
  %202 = load <4 x float>* %x0                    ; <<4 x float>> [#uses=1]
  %203 = fadd <4 x float> %201, %202              ; <<4 x float>> [#uses=1]
  %204 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %205 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %206 = fmul <4 x float> %204, %205              ; <<4 x float>> [#uses=1]
  %207 = fsub <4 x float> %203, %206              ; <<4 x float>> [#uses=1]
  store <4 x float> %207, <4 x float>* %tmp
  %208 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %209 = fmul <4 x float> <float 2.000000e+000, float 2.000000e+000, float 2.000000e+000, float 2.000000e+000>, %208 ; <<4 x float>> [#uses=1]
  %210 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %211 = fmul <4 x float> %209, %210              ; <<4 x float>> [#uses=1]
  %212 = load <4 x float>* %y0                    ; <<4 x float>> [#uses=1]
  %213 = fadd <4 x float> %211, %212              ; <<4 x float>> [#uses=1]
  store <4 x float> %213, <4 x float>* %y
  %214 = load <4 x float>* %tmp                   ; <<4 x float>> [#uses=1]
  %215 = load <4 x float>* %tmp                   ; <<4 x float>> [#uses=1]
  %216 = fmul <4 x float> %214, %215              ; <<4 x float>> [#uses=1]
  %217 = load <4 x float>* %x0                    ; <<4 x float>> [#uses=1]
  %218 = fadd <4 x float> %216, %217              ; <<4 x float>> [#uses=1]
  %219 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %220 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %221 = fmul <4 x float> %219, %220              ; <<4 x float>> [#uses=1]
  %222 = fsub <4 x float> %218, %221              ; <<4 x float>> [#uses=1]
  store <4 x float> %222, <4 x float>* %x
  %223 = load <4 x float>* %tmp                   ; <<4 x float>> [#uses=1]
  %224 = fmul <4 x float> <float 2.000000e+000, float 2.000000e+000, float 2.000000e+000, float 2.000000e+000>, %223 ; <<4 x float>> [#uses=1]
  %225 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %226 = fmul <4 x float> %224, %225              ; <<4 x float>> [#uses=1]
  %227 = load <4 x float>* %y0                    ; <<4 x float>> [#uses=1]
  %228 = fadd <4 x float> %226, %227              ; <<4 x float>> [#uses=1]
  store <4 x float> %228, <4 x float>* %y
  %229 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %230 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %231 = fmul <4 x float> %229, %230              ; <<4 x float>> [#uses=1]
  %232 = load <4 x float>* %x0                    ; <<4 x float>> [#uses=1]
  %233 = fadd <4 x float> %231, %232              ; <<4 x float>> [#uses=1]
  %234 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %235 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %236 = fmul <4 x float> %234, %235              ; <<4 x float>> [#uses=1]
  %237 = fsub <4 x float> %233, %236              ; <<4 x float>> [#uses=1]
  store <4 x float> %237, <4 x float>* %tmp
  %238 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %239 = fmul <4 x float> <float 2.000000e+000, float 2.000000e+000, float 2.000000e+000, float 2.000000e+000>, %238 ; <<4 x float>> [#uses=1]
  %240 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %241 = fmul <4 x float> %239, %240              ; <<4 x float>> [#uses=1]
  %242 = load <4 x float>* %y0                    ; <<4 x float>> [#uses=1]
  %243 = fadd <4 x float> %241, %242              ; <<4 x float>> [#uses=1]
  store <4 x float> %243, <4 x float>* %y
  %244 = load <4 x float>* %tmp                   ; <<4 x float>> [#uses=1]
  %245 = load <4 x float>* %tmp                   ; <<4 x float>> [#uses=1]
  %246 = fmul <4 x float> %244, %245              ; <<4 x float>> [#uses=1]
  %247 = load <4 x float>* %x0                    ; <<4 x float>> [#uses=1]
  %248 = fadd <4 x float> %246, %247              ; <<4 x float>> [#uses=1]
  %249 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %250 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %251 = fmul <4 x float> %249, %250              ; <<4 x float>> [#uses=1]
  %252 = fsub <4 x float> %248, %251              ; <<4 x float>> [#uses=1]
  store <4 x float> %252, <4 x float>* %x
  %253 = load <4 x float>* %tmp                   ; <<4 x float>> [#uses=1]
  %254 = fmul <4 x float> <float 2.000000e+000, float 2.000000e+000, float 2.000000e+000, float 2.000000e+000>, %253 ; <<4 x float>> [#uses=1]
  %255 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %256 = fmul <4 x float> %254, %255              ; <<4 x float>> [#uses=1]
  %257 = load <4 x float>* %y0                    ; <<4 x float>> [#uses=1]
  %258 = fadd <4 x float> %256, %257              ; <<4 x float>> [#uses=1]
  store <4 x float> %258, <4 x float>* %y
  %259 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %260 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %261 = fmul <4 x float> %259, %260              ; <<4 x float>> [#uses=1]
  %262 = load <4 x float>* %x0                    ; <<4 x float>> [#uses=1]
  %263 = fadd <4 x float> %261, %262              ; <<4 x float>> [#uses=1]
  %264 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %265 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %266 = fmul <4 x float> %264, %265              ; <<4 x float>> [#uses=1]
  %267 = fsub <4 x float> %263, %266              ; <<4 x float>> [#uses=1]
  store <4 x float> %267, <4 x float>* %tmp
  %268 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %269 = fmul <4 x float> <float 2.000000e+000, float 2.000000e+000, float 2.000000e+000, float 2.000000e+000>, %268 ; <<4 x float>> [#uses=1]
  %270 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %271 = fmul <4 x float> %269, %270              ; <<4 x float>> [#uses=1]
  %272 = load <4 x float>* %y0                    ; <<4 x float>> [#uses=1]
  %273 = fadd <4 x float> %271, %272              ; <<4 x float>> [#uses=1]
  store <4 x float> %273, <4 x float>* %y
  %274 = load <4 x float>* %tmp                   ; <<4 x float>> [#uses=1]
  %275 = load <4 x float>* %tmp                   ; <<4 x float>> [#uses=1]
  %276 = fmul <4 x float> %274, %275              ; <<4 x float>> [#uses=1]
  %277 = load <4 x float>* %x0                    ; <<4 x float>> [#uses=1]
  %278 = fadd <4 x float> %276, %277              ; <<4 x float>> [#uses=1]
  %279 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %280 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %281 = fmul <4 x float> %279, %280              ; <<4 x float>> [#uses=1]
  %282 = fsub <4 x float> %278, %281              ; <<4 x float>> [#uses=1]
  store <4 x float> %282, <4 x float>* %x
  %283 = load <4 x float>* %tmp                   ; <<4 x float>> [#uses=1]
  %284 = fmul <4 x float> <float 2.000000e+000, float 2.000000e+000, float 2.000000e+000, float 2.000000e+000>, %283 ; <<4 x float>> [#uses=1]
  %285 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %286 = fmul <4 x float> %284, %285              ; <<4 x float>> [#uses=1]
  %287 = load <4 x float>* %y0                    ; <<4 x float>> [#uses=1]
  %288 = fadd <4 x float> %286, %287              ; <<4 x float>> [#uses=1]
  store <4 x float> %288, <4 x float>* %y
  %289 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %290 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %291 = fmul <4 x float> %289, %290              ; <<4 x float>> [#uses=1]
  %292 = load <4 x float>* %x0                    ; <<4 x float>> [#uses=1]
  %293 = fadd <4 x float> %291, %292              ; <<4 x float>> [#uses=1]
  %294 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %295 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %296 = fmul <4 x float> %294, %295              ; <<4 x float>> [#uses=1]
  %297 = fsub <4 x float> %293, %296              ; <<4 x float>> [#uses=1]
  store <4 x float> %297, <4 x float>* %tmp
  %298 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %299 = fmul <4 x float> <float 2.000000e+000, float 2.000000e+000, float 2.000000e+000, float 2.000000e+000>, %298 ; <<4 x float>> [#uses=1]
  %300 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %301 = fmul <4 x float> %299, %300              ; <<4 x float>> [#uses=1]
  %302 = load <4 x float>* %y0                    ; <<4 x float>> [#uses=1]
  %303 = fadd <4 x float> %301, %302              ; <<4 x float>> [#uses=1]
  store <4 x float> %303, <4 x float>* %y
  %304 = load <4 x float>* %tmp                   ; <<4 x float>> [#uses=1]
  %305 = load <4 x float>* %tmp                   ; <<4 x float>> [#uses=1]
  %306 = fmul <4 x float> %304, %305              ; <<4 x float>> [#uses=1]
  %307 = load <4 x float>* %x0                    ; <<4 x float>> [#uses=1]
  %308 = fadd <4 x float> %306, %307              ; <<4 x float>> [#uses=1]
  %309 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %310 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %311 = fmul <4 x float> %309, %310              ; <<4 x float>> [#uses=1]
  %312 = fsub <4 x float> %308, %311              ; <<4 x float>> [#uses=1]
  store <4 x float> %312, <4 x float>* %x
  %313 = load <4 x float>* %tmp                   ; <<4 x float>> [#uses=1]
  %314 = fmul <4 x float> <float 2.000000e+000, float 2.000000e+000, float 2.000000e+000, float 2.000000e+000>, %313 ; <<4 x float>> [#uses=1]
  %315 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %316 = fmul <4 x float> %314, %315              ; <<4 x float>> [#uses=1]
  %317 = load <4 x float>* %y0                    ; <<4 x float>> [#uses=1]
  %318 = fadd <4 x float> %316, %317              ; <<4 x float>> [#uses=1]
  store <4 x float> %318, <4 x float>* %y
  %319 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %320 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %321 = fmul <4 x float> %319, %320              ; <<4 x float>> [#uses=1]
  %322 = load <4 x float>* %x0                    ; <<4 x float>> [#uses=1]
  %323 = fadd <4 x float> %321, %322              ; <<4 x float>> [#uses=1]
  %324 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %325 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %326 = fmul <4 x float> %324, %325              ; <<4 x float>> [#uses=1]
  %327 = fsub <4 x float> %323, %326              ; <<4 x float>> [#uses=1]
  store <4 x float> %327, <4 x float>* %tmp
  %328 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %329 = fmul <4 x float> <float 2.000000e+000, float 2.000000e+000, float 2.000000e+000, float 2.000000e+000>, %328 ; <<4 x float>> [#uses=1]
  %330 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %331 = fmul <4 x float> %329, %330              ; <<4 x float>> [#uses=1]
  %332 = load <4 x float>* %y0                    ; <<4 x float>> [#uses=1]
  %333 = fadd <4 x float> %331, %332              ; <<4 x float>> [#uses=1]
  store <4 x float> %333, <4 x float>* %y
  %334 = load <4 x float>* %tmp                   ; <<4 x float>> [#uses=1]
  %335 = load <4 x float>* %tmp                   ; <<4 x float>> [#uses=1]
  %336 = fmul <4 x float> %334, %335              ; <<4 x float>> [#uses=1]
  %337 = load <4 x float>* %x0                    ; <<4 x float>> [#uses=1]
  %338 = fadd <4 x float> %336, %337              ; <<4 x float>> [#uses=1]
  %339 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %340 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %341 = fmul <4 x float> %339, %340              ; <<4 x float>> [#uses=1]
  %342 = fsub <4 x float> %338, %341              ; <<4 x float>> [#uses=1]
  store <4 x float> %342, <4 x float>* %x
  %343 = load <4 x float>* %tmp                   ; <<4 x float>> [#uses=1]
  %344 = fmul <4 x float> <float 2.000000e+000, float 2.000000e+000, float 2.000000e+000, float 2.000000e+000>, %343 ; <<4 x float>> [#uses=1]
  %345 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %346 = fmul <4 x float> %344, %345              ; <<4 x float>> [#uses=1]
  %347 = load <4 x float>* %y0                    ; <<4 x float>> [#uses=1]
  %348 = fadd <4 x float> %346, %347              ; <<4 x float>> [#uses=1]
  store <4 x float> %348, <4 x float>* %y
  %349 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %350 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %351 = fmul <4 x float> %349, %350              ; <<4 x float>> [#uses=1]
  %352 = load <4 x float>* %x0                    ; <<4 x float>> [#uses=1]
  %353 = fadd <4 x float> %351, %352              ; <<4 x float>> [#uses=1]
  %354 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %355 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %356 = fmul <4 x float> %354, %355              ; <<4 x float>> [#uses=1]
  %357 = fsub <4 x float> %353, %356              ; <<4 x float>> [#uses=1]
  store <4 x float> %357, <4 x float>* %tmp
  %358 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %359 = fmul <4 x float> <float 2.000000e+000, float 2.000000e+000, float 2.000000e+000, float 2.000000e+000>, %358 ; <<4 x float>> [#uses=1]
  %360 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %361 = fmul <4 x float> %359, %360              ; <<4 x float>> [#uses=1]
  %362 = load <4 x float>* %y0                    ; <<4 x float>> [#uses=1]
  %363 = fadd <4 x float> %361, %362              ; <<4 x float>> [#uses=1]
  store <4 x float> %363, <4 x float>* %y
  %364 = load <4 x float>* %tmp                   ; <<4 x float>> [#uses=1]
  %365 = load <4 x float>* %tmp                   ; <<4 x float>> [#uses=1]
  %366 = fmul <4 x float> %364, %365              ; <<4 x float>> [#uses=1]
  %367 = load <4 x float>* %x0                    ; <<4 x float>> [#uses=1]
  %368 = fadd <4 x float> %366, %367              ; <<4 x float>> [#uses=1]
  %369 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %370 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %371 = fmul <4 x float> %369, %370              ; <<4 x float>> [#uses=1]
  %372 = fsub <4 x float> %368, %371              ; <<4 x float>> [#uses=1]
  store <4 x float> %372, <4 x float>* %x
  %373 = load <4 x float>* %tmp                   ; <<4 x float>> [#uses=1]
  %374 = fmul <4 x float> <float 2.000000e+000, float 2.000000e+000, float 2.000000e+000, float 2.000000e+000>, %373 ; <<4 x float>> [#uses=1]
  %375 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %376 = fmul <4 x float> %374, %375              ; <<4 x float>> [#uses=1]
  %377 = load <4 x float>* %y0                    ; <<4 x float>> [#uses=1]
  %378 = fadd <4 x float> %376, %377              ; <<4 x float>> [#uses=1]
  store <4 x float> %378, <4 x float>* %y
  %379 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %380 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %381 = fmul <4 x float> %379, %380              ; <<4 x float>> [#uses=1]
  %382 = load <4 x float>* %x0                    ; <<4 x float>> [#uses=1]
  %383 = fadd <4 x float> %381, %382              ; <<4 x float>> [#uses=1]
  %384 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %385 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %386 = fmul <4 x float> %384, %385              ; <<4 x float>> [#uses=1]
  %387 = fsub <4 x float> %383, %386              ; <<4 x float>> [#uses=1]
  store <4 x float> %387, <4 x float>* %tmp
  %388 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %389 = fmul <4 x float> <float 2.000000e+000, float 2.000000e+000, float 2.000000e+000, float 2.000000e+000>, %388 ; <<4 x float>> [#uses=1]
  %390 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %391 = fmul <4 x float> %389, %390              ; <<4 x float>> [#uses=1]
  %392 = load <4 x float>* %y0                    ; <<4 x float>> [#uses=1]
  %393 = fadd <4 x float> %391, %392              ; <<4 x float>> [#uses=1]
  store <4 x float> %393, <4 x float>* %y
  %394 = load <4 x float>* %tmp                   ; <<4 x float>> [#uses=1]
  %395 = load <4 x float>* %tmp                   ; <<4 x float>> [#uses=1]
  %396 = fmul <4 x float> %394, %395              ; <<4 x float>> [#uses=1]
  %397 = load <4 x float>* %x0                    ; <<4 x float>> [#uses=1]
  %398 = fadd <4 x float> %396, %397              ; <<4 x float>> [#uses=1]
  %399 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %400 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %401 = fmul <4 x float> %399, %400              ; <<4 x float>> [#uses=1]
  %402 = fsub <4 x float> %398, %401              ; <<4 x float>> [#uses=1]
  store <4 x float> %402, <4 x float>* %x
  %403 = load <4 x float>* %tmp                   ; <<4 x float>> [#uses=1]
  %404 = fmul <4 x float> <float 2.000000e+000, float 2.000000e+000, float 2.000000e+000, float 2.000000e+000>, %403 ; <<4 x float>> [#uses=1]
  %405 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %406 = fmul <4 x float> %404, %405              ; <<4 x float>> [#uses=1]
  %407 = load <4 x float>* %y0                    ; <<4 x float>> [#uses=1]
  %408 = fadd <4 x float> %406, %407              ; <<4 x float>> [#uses=1]
  store <4 x float> %408, <4 x float>* %y
  %409 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %410 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %411 = fmul <4 x float> %409, %410              ; <<4 x float>> [#uses=1]
  %412 = load <4 x float>* %x0                    ; <<4 x float>> [#uses=1]
  %413 = fadd <4 x float> %411, %412              ; <<4 x float>> [#uses=1]
  %414 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %415 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %416 = fmul <4 x float> %414, %415              ; <<4 x float>> [#uses=1]
  %417 = fsub <4 x float> %413, %416              ; <<4 x float>> [#uses=1]
  store <4 x float> %417, <4 x float>* %tmp
  %418 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %419 = fmul <4 x float> <float 2.000000e+000, float 2.000000e+000, float 2.000000e+000, float 2.000000e+000>, %418 ; <<4 x float>> [#uses=1]
  %420 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %421 = fmul <4 x float> %419, %420              ; <<4 x float>> [#uses=1]
  %422 = load <4 x float>* %y0                    ; <<4 x float>> [#uses=1]
  %423 = fadd <4 x float> %421, %422              ; <<4 x float>> [#uses=1]
  store <4 x float> %423, <4 x float>* %y
  %424 = load <4 x float>* %tmp                   ; <<4 x float>> [#uses=1]
  %425 = load <4 x float>* %tmp                   ; <<4 x float>> [#uses=1]
  %426 = fmul <4 x float> %424, %425              ; <<4 x float>> [#uses=1]
  %427 = load <4 x float>* %x0                    ; <<4 x float>> [#uses=1]
  %428 = fadd <4 x float> %426, %427              ; <<4 x float>> [#uses=1]
  %429 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %430 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %431 = fmul <4 x float> %429, %430              ; <<4 x float>> [#uses=1]
  %432 = fsub <4 x float> %428, %431              ; <<4 x float>> [#uses=1]
  store <4 x float> %432, <4 x float>* %x
  %433 = load <4 x float>* %tmp                   ; <<4 x float>> [#uses=1]
  %434 = fmul <4 x float> <float 2.000000e+000, float 2.000000e+000, float 2.000000e+000, float 2.000000e+000>, %433 ; <<4 x float>> [#uses=1]
  %435 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %436 = fmul <4 x float> %434, %435              ; <<4 x float>> [#uses=1]
  %437 = load <4 x float>* %y0                    ; <<4 x float>> [#uses=1]
  %438 = fadd <4 x float> %436, %437              ; <<4 x float>> [#uses=1]
  store <4 x float> %438, <4 x float>* %y
  %439 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %440 = extractelement <4 x float> %439, i32 0   ; <float> [#uses=1]
  %441 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %442 = extractelement <4 x float> %441, i32 0   ; <float> [#uses=1]
  %443 = fmul float %440, %442                    ; <float> [#uses=1]
  %444 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %445 = extractelement <4 x float> %444, i32 0   ; <float> [#uses=1]
  %446 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %447 = extractelement <4 x float> %446, i32 0   ; <float> [#uses=1]
  %448 = fmul float %445, %447                    ; <float> [#uses=1]
  %449 = fadd float %443, %448                    ; <float> [#uses=1]
  %450 = fcmp ole float %449, 4.000000e+000       ; <i1> [#uses=1]
  %451 = zext i1 %450 to i32                      ; <i32> [#uses=1]
  %452 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %453 = insertelement <4 x i32> %452, i32 %451, i32 0 ; <<4 x i32>> [#uses=1]
  store <4 x i32> %453, <4 x i32>* %stay
  %454 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %455 = extractelement <4 x float> %454, i32 1   ; <float> [#uses=1]
  %456 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %457 = extractelement <4 x float> %456, i32 1   ; <float> [#uses=1]
  %458 = fmul float %455, %457                    ; <float> [#uses=1]
  %459 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %460 = extractelement <4 x float> %459, i32 1   ; <float> [#uses=1]
  %461 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %462 = extractelement <4 x float> %461, i32 1   ; <float> [#uses=1]
  %463 = fmul float %460, %462                    ; <float> [#uses=1]
  %464 = fadd float %458, %463                    ; <float> [#uses=1]
  %465 = fcmp ole float %464, 4.000000e+000       ; <i1> [#uses=1]
  %466 = zext i1 %465 to i32                      ; <i32> [#uses=1]
  %467 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %468 = insertelement <4 x i32> %467, i32 %466, i32 1 ; <<4 x i32>> [#uses=1]
  store <4 x i32> %468, <4 x i32>* %stay
  %469 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %470 = extractelement <4 x float> %469, i32 2   ; <float> [#uses=1]
  %471 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %472 = extractelement <4 x float> %471, i32 2   ; <float> [#uses=1]
  %473 = fmul float %470, %472                    ; <float> [#uses=1]
  %474 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %475 = extractelement <4 x float> %474, i32 2   ; <float> [#uses=1]
  %476 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %477 = extractelement <4 x float> %476, i32 2   ; <float> [#uses=1]
  %478 = fmul float %475, %477                    ; <float> [#uses=1]
  %479 = fadd float %473, %478                    ; <float> [#uses=1]
  %480 = fcmp ole float %479, 4.000000e+000       ; <i1> [#uses=1]
  %481 = zext i1 %480 to i32                      ; <i32> [#uses=1]
  %482 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %483 = insertelement <4 x i32> %482, i32 %481, i32 2 ; <<4 x i32>> [#uses=1]
  store <4 x i32> %483, <4 x i32>* %stay
  %484 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %485 = extractelement <4 x float> %484, i32 3   ; <float> [#uses=1]
  %486 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %487 = extractelement <4 x float> %486, i32 3   ; <float> [#uses=1]
  %488 = fmul float %485, %487                    ; <float> [#uses=1]
  %489 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %490 = extractelement <4 x float> %489, i32 3   ; <float> [#uses=1]
  %491 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %492 = extractelement <4 x float> %491, i32 3   ; <float> [#uses=1]
  %493 = fmul float %490, %492                    ; <float> [#uses=1]
  %494 = fadd float %488, %493                    ; <float> [#uses=1]
  %495 = fcmp ole float %494, 4.000000e+000       ; <i1> [#uses=1]
  %496 = zext i1 %495 to i32                      ; <i32> [#uses=1]
  %497 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %498 = insertelement <4 x i32> %497, i32 %496, i32 3 ; <<4 x i32>> [#uses=1]
  store <4 x i32> %498, <4 x i32>* %stay
  %499 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %500 = extractelement <4 x i32> %499, i32 0     ; <i32> [#uses=1]
  %501 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %502 = extractelement <4 x float> %501, i32 0   ; <float> [#uses=1]
  %503 = load <4 x float>* %savx                  ; <<4 x float>> [#uses=1]
  %504 = extractelement <4 x float> %503, i32 0   ; <float> [#uses=1]
  %505 = icmp ne i32 %500, 0                      ; <i1> [#uses=1]
  %506 = select i1 %505, float %502, float %504   ; <float> [#uses=1]
  %507 = load <4 x float>* %savx                  ; <<4 x float>> [#uses=1]
  %508 = insertelement <4 x float> %507, float %506, i32 0 ; <<4 x float>> [#uses=1]
  store <4 x float> %508, <4 x float>* %savx
  %509 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %510 = extractelement <4 x i32> %509, i32 1     ; <i32> [#uses=1]
  %511 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %512 = extractelement <4 x float> %511, i32 1   ; <float> [#uses=1]
  %513 = load <4 x float>* %savx                  ; <<4 x float>> [#uses=1]
  %514 = extractelement <4 x float> %513, i32 1   ; <float> [#uses=1]
  %515 = icmp ne i32 %510, 0                      ; <i1> [#uses=1]
  %516 = select i1 %515, float %512, float %514   ; <float> [#uses=1]
  %517 = load <4 x float>* %savx                  ; <<4 x float>> [#uses=1]
  %518 = insertelement <4 x float> %517, float %516, i32 1 ; <<4 x float>> [#uses=1]
  store <4 x float> %518, <4 x float>* %savx
  %519 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %520 = extractelement <4 x i32> %519, i32 2     ; <i32> [#uses=1]
  %521 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %522 = extractelement <4 x float> %521, i32 2   ; <float> [#uses=1]
  %523 = load <4 x float>* %savx                  ; <<4 x float>> [#uses=1]
  %524 = extractelement <4 x float> %523, i32 2   ; <float> [#uses=1]
  %525 = icmp ne i32 %520, 0                      ; <i1> [#uses=1]
  %526 = select i1 %525, float %522, float %524   ; <float> [#uses=1]
  %527 = load <4 x float>* %savx                  ; <<4 x float>> [#uses=1]
  %528 = insertelement <4 x float> %527, float %526, i32 2 ; <<4 x float>> [#uses=1]
  store <4 x float> %528, <4 x float>* %savx
  %529 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %530 = extractelement <4 x i32> %529, i32 3     ; <i32> [#uses=1]
  %531 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %532 = extractelement <4 x float> %531, i32 3   ; <float> [#uses=1]
  %533 = load <4 x float>* %savx                  ; <<4 x float>> [#uses=1]
  %534 = extractelement <4 x float> %533, i32 3   ; <float> [#uses=1]
  %535 = icmp ne i32 %530, 0                      ; <i1> [#uses=1]
  %536 = select i1 %535, float %532, float %534   ; <float> [#uses=1]
  %537 = load <4 x float>* %savx                  ; <<4 x float>> [#uses=1]
  %538 = insertelement <4 x float> %537, float %536, i32 3 ; <<4 x float>> [#uses=1]
  store <4 x float> %538, <4 x float>* %savx
  %539 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %540 = extractelement <4 x i32> %539, i32 0     ; <i32> [#uses=1]
  %541 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %542 = extractelement <4 x float> %541, i32 0   ; <float> [#uses=1]
  %543 = load <4 x float>* %savy                  ; <<4 x float>> [#uses=1]
  %544 = extractelement <4 x float> %543, i32 0   ; <float> [#uses=1]
  %545 = icmp ne i32 %540, 0                      ; <i1> [#uses=1]
  %546 = select i1 %545, float %542, float %544   ; <float> [#uses=1]
  %547 = load <4 x float>* %savy                  ; <<4 x float>> [#uses=1]
  %548 = insertelement <4 x float> %547, float %546, i32 0 ; <<4 x float>> [#uses=1]
  store <4 x float> %548, <4 x float>* %savy
  %549 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %550 = extractelement <4 x i32> %549, i32 1     ; <i32> [#uses=1]
  %551 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %552 = extractelement <4 x float> %551, i32 1   ; <float> [#uses=1]
  %553 = load <4 x float>* %savy                  ; <<4 x float>> [#uses=1]
  %554 = extractelement <4 x float> %553, i32 1   ; <float> [#uses=1]
  %555 = icmp ne i32 %550, 0                      ; <i1> [#uses=1]
  %556 = select i1 %555, float %552, float %554   ; <float> [#uses=1]
  %557 = load <4 x float>* %savy                  ; <<4 x float>> [#uses=1]
  %558 = insertelement <4 x float> %557, float %556, i32 1 ; <<4 x float>> [#uses=1]
  store <4 x float> %558, <4 x float>* %savy
  %559 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %560 = extractelement <4 x i32> %559, i32 2     ; <i32> [#uses=1]
  %561 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %562 = extractelement <4 x float> %561, i32 2   ; <float> [#uses=1]
  %563 = load <4 x float>* %savy                  ; <<4 x float>> [#uses=1]
  %564 = extractelement <4 x float> %563, i32 2   ; <float> [#uses=1]
  %565 = icmp ne i32 %560, 0                      ; <i1> [#uses=1]
  %566 = select i1 %565, float %562, float %564   ; <float> [#uses=1]
  %567 = load <4 x float>* %savy                  ; <<4 x float>> [#uses=1]
  %568 = insertelement <4 x float> %567, float %566, i32 2 ; <<4 x float>> [#uses=1]
  store <4 x float> %568, <4 x float>* %savy
  %569 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %570 = extractelement <4 x i32> %569, i32 3     ; <i32> [#uses=1]
  %571 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %572 = extractelement <4 x float> %571, i32 3   ; <float> [#uses=1]
  %573 = load <4 x float>* %savy                  ; <<4 x float>> [#uses=1]
  %574 = extractelement <4 x float> %573, i32 3   ; <float> [#uses=1]
  %575 = icmp ne i32 %570, 0                      ; <i1> [#uses=1]
  %576 = select i1 %575, float %572, float %574   ; <float> [#uses=1]
  %577 = load <4 x float>* %savy                  ; <<4 x float>> [#uses=1]
  %578 = insertelement <4 x float> %577, float %576, i32 3 ; <<4 x float>> [#uses=1]
  store <4 x float> %578, <4 x float>* %savy
  %579 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %580 = mul <4 x i32> %579, <i32 16, i32 16, i32 16, i32 16> ; <<4 x i32>> [#uses=1]
  %581 = load <4 x i32>* %ccount                  ; <<4 x i32>> [#uses=1]
  %582 = add nsw <4 x i32> %581, %580             ; <<4 x i32>> [#uses=1]
  store <4 x i32> %582, <4 x i32>* %ccount
  br label %583

; <label>:583                                     ; preds = %196
  %584 = load i32* %iter                          ; <i32> [#uses=1]
  %585 = add i32 %584, 16                         ; <i32> [#uses=1]
  store i32 %585, i32* %iter
  br label %177

; <label>:586                                     ; preds = %194
  %587 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %588 = extractelement <4 x i32> %587, i32 0     ; <i32> [#uses=1]
  %589 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %590 = extractelement <4 x i32> %589, i32 1     ; <i32> [#uses=1]
  %591 = and i32 %588, %590                       ; <i32> [#uses=1]
  %592 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %593 = extractelement <4 x i32> %592, i32 2     ; <i32> [#uses=1]
  %594 = and i32 %591, %593                       ; <i32> [#uses=1]
  %595 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %596 = extractelement <4 x i32> %595, i32 3     ; <i32> [#uses=1]
  %597 = and i32 %594, %596                       ; <i32> [#uses=1]
  %598 = icmp ne i32 %597, 0                      ; <i1> [#uses=1]
  br i1 %598, label %811, label %599

; <label>:599                                     ; preds = %586
  store i32 16, i32* %iter
  br label %600

; <label>:600                                     ; preds = %808, %599
  %601 = load <4 x float>* %savx                  ; <<4 x float>> [#uses=1]
  store <4 x float> %601, <4 x float>* %x
  %602 = load <4 x float>* %savy                  ; <<4 x float>> [#uses=1]
  store <4 x float> %602, <4 x float>* %y
  %603 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %604 = extractelement <4 x float> %603, i32 0   ; <float> [#uses=1]
  %605 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %606 = extractelement <4 x float> %605, i32 0   ; <float> [#uses=1]
  %607 = fmul float %604, %606                    ; <float> [#uses=1]
  %608 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %609 = extractelement <4 x float> %608, i32 0   ; <float> [#uses=1]
  %610 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %611 = extractelement <4 x float> %610, i32 0   ; <float> [#uses=1]
  %612 = fmul float %609, %611                    ; <float> [#uses=1]
  %613 = fadd float %607, %612                    ; <float> [#uses=1]
  %614 = fcmp ole float %613, 4.000000e+000       ; <i1> [#uses=1]
  br i1 %614, label %615, label %620

; <label>:615                                     ; preds = %600
  %616 = load <4 x i32>* %ccount                  ; <<4 x i32>> [#uses=1]
  %617 = extractelement <4 x i32> %616, i32 0     ; <i32> [#uses=1]
  %618 = load i32* %6                             ; <i32> [#uses=1]
  %619 = icmp ult i32 %617, %618                  ; <i1> [#uses=1]
  br label %620

; <label>:620                                     ; preds = %615, %600
  %621 = phi i1 [ false, %600 ], [ %619, %615 ]   ; <i1> [#uses=1]
  %622 = zext i1 %621 to i32                      ; <i32> [#uses=1]
  %623 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %624 = insertelement <4 x i32> %623, i32 %622, i32 0 ; <<4 x i32>> [#uses=1]
  store <4 x i32> %624, <4 x i32>* %stay
  %625 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %626 = extractelement <4 x float> %625, i32 1   ; <float> [#uses=1]
  %627 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %628 = extractelement <4 x float> %627, i32 1   ; <float> [#uses=1]
  %629 = fmul float %626, %628                    ; <float> [#uses=1]
  %630 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %631 = extractelement <4 x float> %630, i32 1   ; <float> [#uses=1]
  %632 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %633 = extractelement <4 x float> %632, i32 1   ; <float> [#uses=1]
  %634 = fmul float %631, %633                    ; <float> [#uses=1]
  %635 = fadd float %629, %634                    ; <float> [#uses=1]
  %636 = fcmp ole float %635, 4.000000e+000       ; <i1> [#uses=1]
  br i1 %636, label %637, label %642

; <label>:637                                     ; preds = %620
  %638 = load <4 x i32>* %ccount                  ; <<4 x i32>> [#uses=1]
  %639 = extractelement <4 x i32> %638, i32 1     ; <i32> [#uses=1]
  %640 = load i32* %6                             ; <i32> [#uses=1]
  %641 = icmp ult i32 %639, %640                  ; <i1> [#uses=1]
  br label %642

; <label>:642                                     ; preds = %637, %620
  %643 = phi i1 [ false, %620 ], [ %641, %637 ]   ; <i1> [#uses=1]
  %644 = zext i1 %643 to i32                      ; <i32> [#uses=1]
  %645 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %646 = insertelement <4 x i32> %645, i32 %644, i32 1 ; <<4 x i32>> [#uses=1]
  store <4 x i32> %646, <4 x i32>* %stay
  %647 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %648 = extractelement <4 x float> %647, i32 2   ; <float> [#uses=1]
  %649 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %650 = extractelement <4 x float> %649, i32 2   ; <float> [#uses=1]
  %651 = fmul float %648, %650                    ; <float> [#uses=1]
  %652 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %653 = extractelement <4 x float> %652, i32 2   ; <float> [#uses=1]
  %654 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %655 = extractelement <4 x float> %654, i32 2   ; <float> [#uses=1]
  %656 = fmul float %653, %655                    ; <float> [#uses=1]
  %657 = fadd float %651, %656                    ; <float> [#uses=1]
  %658 = fcmp ole float %657, 4.000000e+000       ; <i1> [#uses=1]
  br i1 %658, label %659, label %664

; <label>:659                                     ; preds = %642
  %660 = load <4 x i32>* %ccount                  ; <<4 x i32>> [#uses=1]
  %661 = extractelement <4 x i32> %660, i32 2     ; <i32> [#uses=1]
  %662 = load i32* %6                             ; <i32> [#uses=1]
  %663 = icmp ult i32 %661, %662                  ; <i1> [#uses=1]
  br label %664

; <label>:664                                     ; preds = %659, %642
  %665 = phi i1 [ false, %642 ], [ %663, %659 ]   ; <i1> [#uses=1]
  %666 = zext i1 %665 to i32                      ; <i32> [#uses=1]
  %667 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %668 = insertelement <4 x i32> %667, i32 %666, i32 2 ; <<4 x i32>> [#uses=1]
  store <4 x i32> %668, <4 x i32>* %stay
  %669 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %670 = extractelement <4 x float> %669, i32 3   ; <float> [#uses=1]
  %671 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %672 = extractelement <4 x float> %671, i32 3   ; <float> [#uses=1]
  %673 = fmul float %670, %672                    ; <float> [#uses=1]
  %674 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %675 = extractelement <4 x float> %674, i32 3   ; <float> [#uses=1]
  %676 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %677 = extractelement <4 x float> %676, i32 3   ; <float> [#uses=1]
  %678 = fmul float %675, %677                    ; <float> [#uses=1]
  %679 = fadd float %673, %678                    ; <float> [#uses=1]
  %680 = fcmp ole float %679, 4.000000e+000       ; <i1> [#uses=1]
  br i1 %680, label %681, label %686

; <label>:681                                     ; preds = %664
  %682 = load <4 x i32>* %ccount                  ; <<4 x i32>> [#uses=1]
  %683 = extractelement <4 x i32> %682, i32 3     ; <i32> [#uses=1]
  %684 = load i32* %6                             ; <i32> [#uses=1]
  %685 = icmp ult i32 %683, %684                  ; <i1> [#uses=1]
  br label %686

; <label>:686                                     ; preds = %681, %664
  %687 = phi i1 [ false, %664 ], [ %685, %681 ]   ; <i1> [#uses=1]
  %688 = zext i1 %687 to i32                      ; <i32> [#uses=1]
  %689 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %690 = insertelement <4 x i32> %689, i32 %688, i32 3 ; <<4 x i32>> [#uses=1]
  store <4 x i32> %690, <4 x i32>* %stay
  %691 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  store <4 x float> %691, <4 x float>* %tmp
  %692 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %693 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %694 = fmul <4 x float> %692, %693              ; <<4 x float>> [#uses=1]
  %695 = load <4 x float>* %x0                    ; <<4 x float>> [#uses=1]
  %696 = fadd <4 x float> %694, %695              ; <<4 x float>> [#uses=1]
  %697 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %698 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %699 = fmul <4 x float> %697, %698              ; <<4 x float>> [#uses=1]
  %700 = fsub <4 x float> %696, %699              ; <<4 x float>> [#uses=1]
  store <4 x float> %700, <4 x float>* %x
  %701 = load <4 x float>* %tmp                   ; <<4 x float>> [#uses=1]
  %702 = fmul <4 x float> <float 2.000000e+000, float 2.000000e+000, float 2.000000e+000, float 2.000000e+000>, %701 ; <<4 x float>> [#uses=1]
  %703 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %704 = fmul <4 x float> %702, %703              ; <<4 x float>> [#uses=1]
  %705 = load <4 x float>* %y0                    ; <<4 x float>> [#uses=1]
  %706 = fadd <4 x float> %704, %705              ; <<4 x float>> [#uses=1]
  store <4 x float> %706, <4 x float>* %y
  %707 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %708 = load <4 x i32>* %ccount                  ; <<4 x i32>> [#uses=1]
  %709 = add nsw <4 x i32> %708, %707             ; <<4 x i32>> [#uses=1]
  store <4 x i32> %709, <4 x i32>* %ccount
  %710 = load i32* %iter                          ; <i32> [#uses=1]
  %711 = add i32 %710, -1                         ; <i32> [#uses=1]
  store i32 %711, i32* %iter
  %712 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %713 = extractelement <4 x i32> %712, i32 0     ; <i32> [#uses=1]
  %714 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %715 = extractelement <4 x float> %714, i32 0   ; <float> [#uses=1]
  %716 = load <4 x float>* %savx                  ; <<4 x float>> [#uses=1]
  %717 = extractelement <4 x float> %716, i32 0   ; <float> [#uses=1]
  %718 = icmp ne i32 %713, 0                      ; <i1> [#uses=1]
  %719 = select i1 %718, float %715, float %717   ; <float> [#uses=1]
  %720 = load <4 x float>* %savx                  ; <<4 x float>> [#uses=1]
  %721 = insertelement <4 x float> %720, float %719, i32 0 ; <<4 x float>> [#uses=1]
  store <4 x float> %721, <4 x float>* %savx
  %722 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %723 = extractelement <4 x i32> %722, i32 1     ; <i32> [#uses=1]
  %724 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %725 = extractelement <4 x float> %724, i32 1   ; <float> [#uses=1]
  %726 = load <4 x float>* %savx                  ; <<4 x float>> [#uses=1]
  %727 = extractelement <4 x float> %726, i32 1   ; <float> [#uses=1]
  %728 = icmp ne i32 %723, 0                      ; <i1> [#uses=1]
  %729 = select i1 %728, float %725, float %727   ; <float> [#uses=1]
  %730 = load <4 x float>* %savx                  ; <<4 x float>> [#uses=1]
  %731 = insertelement <4 x float> %730, float %729, i32 1 ; <<4 x float>> [#uses=1]
  store <4 x float> %731, <4 x float>* %savx
  %732 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %733 = extractelement <4 x i32> %732, i32 2     ; <i32> [#uses=1]
  %734 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %735 = extractelement <4 x float> %734, i32 2   ; <float> [#uses=1]
  %736 = load <4 x float>* %savx                  ; <<4 x float>> [#uses=1]
  %737 = extractelement <4 x float> %736, i32 2   ; <float> [#uses=1]
  %738 = icmp ne i32 %733, 0                      ; <i1> [#uses=1]
  %739 = select i1 %738, float %735, float %737   ; <float> [#uses=1]
  %740 = load <4 x float>* %savx                  ; <<4 x float>> [#uses=1]
  %741 = insertelement <4 x float> %740, float %739, i32 2 ; <<4 x float>> [#uses=1]
  store <4 x float> %741, <4 x float>* %savx
  %742 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %743 = extractelement <4 x i32> %742, i32 3     ; <i32> [#uses=1]
  %744 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %745 = extractelement <4 x float> %744, i32 3   ; <float> [#uses=1]
  %746 = load <4 x float>* %savx                  ; <<4 x float>> [#uses=1]
  %747 = extractelement <4 x float> %746, i32 3   ; <float> [#uses=1]
  %748 = icmp ne i32 %743, 0                      ; <i1> [#uses=1]
  %749 = select i1 %748, float %745, float %747   ; <float> [#uses=1]
  %750 = load <4 x float>* %savx                  ; <<4 x float>> [#uses=1]
  %751 = insertelement <4 x float> %750, float %749, i32 3 ; <<4 x float>> [#uses=1]
  store <4 x float> %751, <4 x float>* %savx
  %752 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %753 = extractelement <4 x i32> %752, i32 0     ; <i32> [#uses=1]
  %754 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %755 = extractelement <4 x float> %754, i32 0   ; <float> [#uses=1]
  %756 = load <4 x float>* %savy                  ; <<4 x float>> [#uses=1]
  %757 = extractelement <4 x float> %756, i32 0   ; <float> [#uses=1]
  %758 = icmp ne i32 %753, 0                      ; <i1> [#uses=1]
  %759 = select i1 %758, float %755, float %757   ; <float> [#uses=1]
  %760 = load <4 x float>* %savy                  ; <<4 x float>> [#uses=1]
  %761 = insertelement <4 x float> %760, float %759, i32 0 ; <<4 x float>> [#uses=1]
  store <4 x float> %761, <4 x float>* %savy
  %762 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %763 = extractelement <4 x i32> %762, i32 1     ; <i32> [#uses=1]
  %764 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %765 = extractelement <4 x float> %764, i32 1   ; <float> [#uses=1]
  %766 = load <4 x float>* %savy                  ; <<4 x float>> [#uses=1]
  %767 = extractelement <4 x float> %766, i32 1   ; <float> [#uses=1]
  %768 = icmp ne i32 %763, 0                      ; <i1> [#uses=1]
  %769 = select i1 %768, float %765, float %767   ; <float> [#uses=1]
  %770 = load <4 x float>* %savy                  ; <<4 x float>> [#uses=1]
  %771 = insertelement <4 x float> %770, float %769, i32 1 ; <<4 x float>> [#uses=1]
  store <4 x float> %771, <4 x float>* %savy
  %772 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %773 = extractelement <4 x i32> %772, i32 2     ; <i32> [#uses=1]
  %774 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %775 = extractelement <4 x float> %774, i32 2   ; <float> [#uses=1]
  %776 = load <4 x float>* %savy                  ; <<4 x float>> [#uses=1]
  %777 = extractelement <4 x float> %776, i32 2   ; <float> [#uses=1]
  %778 = icmp ne i32 %773, 0                      ; <i1> [#uses=1]
  %779 = select i1 %778, float %775, float %777   ; <float> [#uses=1]
  %780 = load <4 x float>* %savy                  ; <<4 x float>> [#uses=1]
  %781 = insertelement <4 x float> %780, float %779, i32 2 ; <<4 x float>> [#uses=1]
  store <4 x float> %781, <4 x float>* %savy
  %782 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %783 = extractelement <4 x i32> %782, i32 3     ; <i32> [#uses=1]
  %784 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %785 = extractelement <4 x float> %784, i32 3   ; <float> [#uses=1]
  %786 = load <4 x float>* %savy                  ; <<4 x float>> [#uses=1]
  %787 = extractelement <4 x float> %786, i32 3   ; <float> [#uses=1]
  %788 = icmp ne i32 %783, 0                      ; <i1> [#uses=1]
  %789 = select i1 %788, float %785, float %787   ; <float> [#uses=1]
  %790 = load <4 x float>* %savy                  ; <<4 x float>> [#uses=1]
  %791 = insertelement <4 x float> %790, float %789, i32 3 ; <<4 x float>> [#uses=1]
  store <4 x float> %791, <4 x float>* %savy
  br label %792

; <label>:792                                     ; preds = %686
  %793 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %794 = extractelement <4 x i32> %793, i32 0     ; <i32> [#uses=1]
  %795 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %796 = extractelement <4 x i32> %795, i32 1     ; <i32> [#uses=1]
  %797 = or i32 %794, %796                        ; <i32> [#uses=1]
  %798 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %799 = extractelement <4 x i32> %798, i32 2     ; <i32> [#uses=1]
  %800 = or i32 %797, %799                        ; <i32> [#uses=1]
  %801 = load <4 x i32>* %stay                    ; <<4 x i32>> [#uses=1]
  %802 = extractelement <4 x i32> %801, i32 3     ; <i32> [#uses=1]
  %803 = or i32 %800, %802                        ; <i32> [#uses=1]
  %804 = icmp ne i32 %803, 0                      ; <i1> [#uses=1]
  br i1 %804, label %805, label %808

; <label>:805                                     ; preds = %792
  %806 = load i32* %iter                          ; <i32> [#uses=1]
  %807 = icmp ne i32 %806, 0                      ; <i1> [#uses=1]
  br label %808

; <label>:808                                     ; preds = %805, %792
  %809 = phi i1 [ false, %792 ], [ %807, %805 ]   ; <i1> [#uses=1]
  br i1 %809, label %600, label %810

; <label>:810                                     ; preds = %808
  br label %811

; <label>:811                                     ; preds = %810, %586
  %812 = load <4 x float>* %savx                  ; <<4 x float>> [#uses=1]
  store <4 x float> %812, <4 x float>* %x
  %813 = load <4 x float>* %savy                  ; <<4 x float>> [#uses=1]
  store <4 x float> %813, <4 x float>* %y
  %814 = load <4 x i32>* %ccount                  ; <<4 x i32>> [#uses=1]
  %815 = call <4 x float> @_Z14convert_float4U8__vector4i(<4 x i32> %814) ; <<4 x float>> [#uses=1]
  store <4 x float> %815, <4 x float>* %fc
  %816 = load <4 x i32>* %ccount                  ; <<4 x i32>> [#uses=1]
  %817 = extractelement <4 x i32> %816, i32 0     ; <i32> [#uses=1]
  %818 = sitofp i32 %817 to float                 ; <float> [#uses=1]
  %819 = fadd float %818, 1.000000e+000           ; <float> [#uses=1]
  %820 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %821 = extractelement <4 x float> %820, i32 0   ; <float> [#uses=1]
  %822 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %823 = extractelement <4 x float> %822, i32 0   ; <float> [#uses=1]
  %824 = fmul float %821, %823                    ; <float> [#uses=1]
  %825 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %826 = extractelement <4 x float> %825, i32 0   ; <float> [#uses=1]
  %827 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %828 = extractelement <4 x float> %827, i32 0   ; <float> [#uses=1]
  %829 = fmul float %826, %828                    ; <float> [#uses=1]
  %830 = fadd float %824, %829                    ; <float> [#uses=1]
  %831 = call float @_Z11native_log2f(float %830) ; <float> [#uses=1]
  %832 = call float @_Z11native_log2f(float %831) ; <float> [#uses=1]
  %833 = fsub float %819, %832                    ; <float> [#uses=1]
  %834 = load <4 x float>* %fc                    ; <<4 x float>> [#uses=1]
  %835 = insertelement <4 x float> %834, float %833, i32 0 ; <<4 x float>> [#uses=1]
  store <4 x float> %835, <4 x float>* %fc
  %836 = load <4 x i32>* %ccount                  ; <<4 x i32>> [#uses=1]
  %837 = extractelement <4 x i32> %836, i32 1     ; <i32> [#uses=1]
  %838 = sitofp i32 %837 to float                 ; <float> [#uses=1]
  %839 = fadd float %838, 1.000000e+000           ; <float> [#uses=1]
  %840 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %841 = extractelement <4 x float> %840, i32 1   ; <float> [#uses=1]
  %842 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %843 = extractelement <4 x float> %842, i32 1   ; <float> [#uses=1]
  %844 = fmul float %841, %843                    ; <float> [#uses=1]
  %845 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %846 = extractelement <4 x float> %845, i32 1   ; <float> [#uses=1]
  %847 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %848 = extractelement <4 x float> %847, i32 1   ; <float> [#uses=1]
  %849 = fmul float %846, %848                    ; <float> [#uses=1]
  %850 = fadd float %844, %849                    ; <float> [#uses=1]
  %851 = call float @_Z11native_log2f(float %850) ; <float> [#uses=1]
  %852 = call float @_Z11native_log2f(float %851) ; <float> [#uses=1]
  %853 = fsub float %839, %852                    ; <float> [#uses=1]
  %854 = load <4 x float>* %fc                    ; <<4 x float>> [#uses=1]
  %855 = insertelement <4 x float> %854, float %853, i32 1 ; <<4 x float>> [#uses=1]
  store <4 x float> %855, <4 x float>* %fc
  %856 = load <4 x i32>* %ccount                  ; <<4 x i32>> [#uses=1]
  %857 = extractelement <4 x i32> %856, i32 2     ; <i32> [#uses=1]
  %858 = sitofp i32 %857 to float                 ; <float> [#uses=1]
  %859 = fadd float %858, 1.000000e+000           ; <float> [#uses=1]
  %860 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %861 = extractelement <4 x float> %860, i32 2   ; <float> [#uses=1]
  %862 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %863 = extractelement <4 x float> %862, i32 2   ; <float> [#uses=1]
  %864 = fmul float %861, %863                    ; <float> [#uses=1]
  %865 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %866 = extractelement <4 x float> %865, i32 2   ; <float> [#uses=1]
  %867 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %868 = extractelement <4 x float> %867, i32 2   ; <float> [#uses=1]
  %869 = fmul float %866, %868                    ; <float> [#uses=1]
  %870 = fadd float %864, %869                    ; <float> [#uses=1]
  %871 = call float @_Z11native_log2f(float %870) ; <float> [#uses=1]
  %872 = call float @_Z11native_log2f(float %871) ; <float> [#uses=1]
  %873 = fsub float %859, %872                    ; <float> [#uses=1]
  %874 = load <4 x float>* %fc                    ; <<4 x float>> [#uses=1]
  %875 = insertelement <4 x float> %874, float %873, i32 2 ; <<4 x float>> [#uses=1]
  store <4 x float> %875, <4 x float>* %fc
  %876 = load <4 x i32>* %ccount                  ; <<4 x i32>> [#uses=1]
  %877 = extractelement <4 x i32> %876, i32 3     ; <i32> [#uses=1]
  %878 = sitofp i32 %877 to float                 ; <float> [#uses=1]
  %879 = fadd float %878, 1.000000e+000           ; <float> [#uses=1]
  %880 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %881 = extractelement <4 x float> %880, i32 3   ; <float> [#uses=1]
  %882 = load <4 x float>* %x                     ; <<4 x float>> [#uses=1]
  %883 = extractelement <4 x float> %882, i32 3   ; <float> [#uses=1]
  %884 = fmul float %881, %883                    ; <float> [#uses=1]
  %885 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %886 = extractelement <4 x float> %885, i32 3   ; <float> [#uses=1]
  %887 = load <4 x float>* %y                     ; <<4 x float>> [#uses=1]
  %888 = extractelement <4 x float> %887, i32 3   ; <float> [#uses=1]
  %889 = fmul float %886, %888                    ; <float> [#uses=1]
  %890 = fadd float %884, %889                    ; <float> [#uses=1]
  %891 = call float @_Z11native_log2f(float %890) ; <float> [#uses=1]
  %892 = call float @_Z11native_log2f(float %891) ; <float> [#uses=1]
  %893 = fsub float %879, %892                    ; <float> [#uses=1]
  %894 = load <4 x float>* %fc                    ; <<4 x float>> [#uses=1]
  %895 = insertelement <4 x float> %894, float %893, i32 3 ; <<4 x float>> [#uses=1]
  store <4 x float> %895, <4 x float>* %fc
  %896 = load <4 x float>* %fc                    ; <<4 x float>> [#uses=1]
  %897 = extractelement <4 x float> %896, i32 0   ; <float> [#uses=1]
  %898 = fmul float %897, 2.000000e+000           ; <float> [#uses=1]
  %899 = fmul float %898, 0x400921FF20000000      ; <float> [#uses=1]
  %900 = fdiv float %899, 2.560000e+002           ; <float> [#uses=1]
  store float %900, float* %c
  %901 = load float* %c                           ; <float> [#uses=1]
  %902 = call float @_Z10native_cosf(float %901)  ; <float> [#uses=1]
  %903 = fadd float 1.000000e+000, %902           ; <float> [#uses=1]
  %904 = fmul float %903, 5.000000e-001           ; <float> [#uses=1]
  %905 = fmul float %904, 2.550000e+002           ; <float> [#uses=1]
  %906 = fptoui float %905 to i8                  ; <i8> [#uses=1]
  %907 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %908 = getelementptr inbounds <4 x i8>* %907, i32 0 ; <<4 x i8>*> [#uses=2]
  %909 = load <4 x i8>* %908                      ; <<4 x i8>> [#uses=1]
  %910 = insertelement <4 x i8> %909, i8 %906, i32 0 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %910, <4 x i8>* %908
  %911 = load float* %c                           ; <float> [#uses=1]
  %912 = fmul float 2.000000e+000, %911           ; <float> [#uses=1]
  %913 = fadd float %912, 0x4000C154C0000000      ; <float> [#uses=1]
  %914 = call float @_Z10native_cosf(float %913)  ; <float> [#uses=1]
  %915 = fadd float 1.000000e+000, %914           ; <float> [#uses=1]
  %916 = fmul float %915, 5.000000e-001           ; <float> [#uses=1]
  %917 = fmul float %916, 2.550000e+002           ; <float> [#uses=1]
  %918 = fptoui float %917 to i8                  ; <i8> [#uses=1]
  %919 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %920 = getelementptr inbounds <4 x i8>* %919, i32 0 ; <<4 x i8>*> [#uses=2]
  %921 = load <4 x i8>* %920                      ; <<4 x i8>> [#uses=1]
  %922 = insertelement <4 x i8> %921, i8 %918, i32 1 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %922, <4 x i8>* %920
  %923 = load float* %c                           ; <float> [#uses=1]
  %924 = fsub float %923, 0x4000C154C0000000      ; <float> [#uses=1]
  %925 = call float @_Z10native_cosf(float %924)  ; <float> [#uses=1]
  %926 = fadd float 1.000000e+000, %925           ; <float> [#uses=1]
  %927 = fmul float %926, 5.000000e-001           ; <float> [#uses=1]
  %928 = fmul float %927, 2.550000e+002           ; <float> [#uses=1]
  %929 = fptoui float %928 to i8                  ; <i8> [#uses=1]
  %930 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %931 = getelementptr inbounds <4 x i8>* %930, i32 0 ; <<4 x i8>*> [#uses=2]
  %932 = load <4 x i8>* %931                      ; <<4 x i8>> [#uses=1]
  %933 = insertelement <4 x i8> %932, i8 %929, i32 2 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %933, <4 x i8>* %931
  %934 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %935 = getelementptr inbounds <4 x i8>* %934, i32 0 ; <<4 x i8>*> [#uses=2]
  %936 = load <4 x i8>* %935                      ; <<4 x i8>> [#uses=1]
  %937 = insertelement <4 x i8> %936, i8 -1, i32 3 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %937, <4 x i8>* %935
  %938 = load <4 x i32>* %ccount                  ; <<4 x i32>> [#uses=1]
  %939 = extractelement <4 x i32> %938, i32 0     ; <i32> [#uses=1]
  %940 = load i32* %6                             ; <i32> [#uses=1]
  %941 = icmp eq i32 %939, %940                   ; <i1> [#uses=1]
  br i1 %941, label %942, label %955

; <label>:942                                     ; preds = %811
  %943 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %944 = getelementptr inbounds <4 x i8>* %943, i32 0 ; <<4 x i8>*> [#uses=2]
  %945 = load <4 x i8>* %944                      ; <<4 x i8>> [#uses=1]
  %946 = insertelement <4 x i8> %945, i8 0, i32 0 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %946, <4 x i8>* %944
  %947 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %948 = getelementptr inbounds <4 x i8>* %947, i32 0 ; <<4 x i8>*> [#uses=2]
  %949 = load <4 x i8>* %948                      ; <<4 x i8>> [#uses=1]
  %950 = insertelement <4 x i8> %949, i8 0, i32 1 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %950, <4 x i8>* %948
  %951 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %952 = getelementptr inbounds <4 x i8>* %951, i32 0 ; <<4 x i8>*> [#uses=2]
  %953 = load <4 x i8>* %952                      ; <<4 x i8>> [#uses=1]
  %954 = insertelement <4 x i8> %953, i8 0, i32 2 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %954, <4 x i8>* %952
  br label %955

; <label>:955                                     ; preds = %942, %811
  %956 = load i32* %8                             ; <i32> [#uses=1]
  %957 = icmp ne i32 %956, 0                      ; <i1> [#uses=1]
  br i1 %957, label %958, label %994

; <label>:958                                     ; preds = %955
  %959 = load <4 x i32>* %ccount                  ; <<4 x i32>> [#uses=1]
  %960 = extractelement <4 x i32> %959, i32 0     ; <i32> [#uses=1]
  %961 = and i32 %960, 255                        ; <i32> [#uses=1]
  %962 = trunc i32 %961 to i8                     ; <i8> [#uses=1]
  %963 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %964 = getelementptr inbounds <4 x i8>* %963, i32 0 ; <<4 x i8>*> [#uses=2]
  %965 = load <4 x i8>* %964                      ; <<4 x i8>> [#uses=1]
  %966 = insertelement <4 x i8> %965, i8 %962, i32 0 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %966, <4 x i8>* %964
  %967 = load <4 x i32>* %ccount                  ; <<4 x i32>> [#uses=1]
  %968 = extractelement <4 x i32> %967, i32 0     ; <i32> [#uses=1]
  %969 = and i32 %968, 65280                      ; <i32> [#uses=1]
  %970 = ashr i32 %969, 8                         ; <i32> [#uses=1]
  %971 = trunc i32 %970 to i8                     ; <i8> [#uses=1]
  %972 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %973 = getelementptr inbounds <4 x i8>* %972, i32 0 ; <<4 x i8>*> [#uses=2]
  %974 = load <4 x i8>* %973                      ; <<4 x i8>> [#uses=1]
  %975 = insertelement <4 x i8> %974, i8 %971, i32 1 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %975, <4 x i8>* %973
  %976 = load <4 x i32>* %ccount                  ; <<4 x i32>> [#uses=1]
  %977 = extractelement <4 x i32> %976, i32 0     ; <i32> [#uses=1]
  %978 = and i32 %977, 16711680                   ; <i32> [#uses=1]
  %979 = ashr i32 %978, 16                        ; <i32> [#uses=1]
  %980 = trunc i32 %979 to i8                     ; <i8> [#uses=1]
  %981 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %982 = getelementptr inbounds <4 x i8>* %981, i32 0 ; <<4 x i8>*> [#uses=2]
  %983 = load <4 x i8>* %982                      ; <<4 x i8>> [#uses=1]
  %984 = insertelement <4 x i8> %983, i8 %980, i32 2 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %984, <4 x i8>* %982
  %985 = load <4 x i32>* %ccount                  ; <<4 x i32>> [#uses=1]
  %986 = extractelement <4 x i32> %985, i32 0     ; <i32> [#uses=1]
  %987 = and i32 %986, -16777216                  ; <i32> [#uses=1]
  %988 = lshr i32 %987, 24                        ; <i32> [#uses=1]
  %989 = trunc i32 %988 to i8                     ; <i8> [#uses=1]
  %990 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %991 = getelementptr inbounds <4 x i8>* %990, i32 0 ; <<4 x i8>*> [#uses=2]
  %992 = load <4 x i8>* %991                      ; <<4 x i8>> [#uses=1]
  %993 = insertelement <4 x i8> %992, i8 %989, i32 3 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %993, <4 x i8>* %991
  br label %994

; <label>:994                                     ; preds = %958, %955
  %995 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %996 = getelementptr inbounds <4 x i8>* %995, i32 0 ; <<4 x i8>*> [#uses=1]
  %997 = load <4 x i8>* %996                      ; <<4 x i8>> [#uses=1]
  %998 = load i32* %tid                           ; <i32> [#uses=1]
  %999 = mul i32 4, %998                          ; <i32> [#uses=1]
  %1000 = load <4 x i8> addrspace(1)** %1         ; <<4 x i8> addrspace(1)*> [#uses=1]
  %1001 = getelementptr inbounds <4 x i8> addrspace(1)* %1000, i32 %999 ; <<4 x i8> addrspace(1)*> [#uses=1]
  store <4 x i8> %997, <4 x i8> addrspace(1)* %1001
  %1002 = load <4 x float>* %fc                   ; <<4 x float>> [#uses=1]
  %1003 = extractelement <4 x float> %1002, i32 1 ; <float> [#uses=1]
  %1004 = fmul float %1003, 2.000000e+000         ; <float> [#uses=1]
  %1005 = fmul float %1004, 0x400921FF20000000    ; <float> [#uses=1]
  %1006 = fdiv float %1005, 2.560000e+002         ; <float> [#uses=1]
  store float %1006, float* %c
  %1007 = load float* %c                          ; <float> [#uses=1]
  %1008 = call float @_Z10native_cosf(float %1007) ; <float> [#uses=1]
  %1009 = fadd float 1.000000e+000, %1008         ; <float> [#uses=1]
  %1010 = fmul float %1009, 5.000000e-001         ; <float> [#uses=1]
  %1011 = fmul float %1010, 2.550000e+002         ; <float> [#uses=1]
  %1012 = fptoui float %1011 to i8                ; <i8> [#uses=1]
  %1013 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1014 = getelementptr inbounds <4 x i8>* %1013, i32 1 ; <<4 x i8>*> [#uses=2]
  %1015 = load <4 x i8>* %1014                    ; <<4 x i8>> [#uses=1]
  %1016 = insertelement <4 x i8> %1015, i8 %1012, i32 0 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1016, <4 x i8>* %1014
  %1017 = load float* %c                          ; <float> [#uses=1]
  %1018 = fmul float 2.000000e+000, %1017         ; <float> [#uses=1]
  %1019 = fadd float %1018, 0x4000C154C0000000    ; <float> [#uses=1]
  %1020 = call float @_Z10native_cosf(float %1019) ; <float> [#uses=1]
  %1021 = fadd float 1.000000e+000, %1020         ; <float> [#uses=1]
  %1022 = fmul float %1021, 5.000000e-001         ; <float> [#uses=1]
  %1023 = fmul float %1022, 2.550000e+002         ; <float> [#uses=1]
  %1024 = fptoui float %1023 to i8                ; <i8> [#uses=1]
  %1025 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1026 = getelementptr inbounds <4 x i8>* %1025, i32 1 ; <<4 x i8>*> [#uses=2]
  %1027 = load <4 x i8>* %1026                    ; <<4 x i8>> [#uses=1]
  %1028 = insertelement <4 x i8> %1027, i8 %1024, i32 1 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1028, <4 x i8>* %1026
  %1029 = load float* %c                          ; <float> [#uses=1]
  %1030 = fsub float %1029, 0x4000C154C0000000    ; <float> [#uses=1]
  %1031 = call float @_Z10native_cosf(float %1030) ; <float> [#uses=1]
  %1032 = fadd float 1.000000e+000, %1031         ; <float> [#uses=1]
  %1033 = fmul float %1032, 5.000000e-001         ; <float> [#uses=1]
  %1034 = fmul float %1033, 2.550000e+002         ; <float> [#uses=1]
  %1035 = fptoui float %1034 to i8                ; <i8> [#uses=1]
  %1036 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1037 = getelementptr inbounds <4 x i8>* %1036, i32 1 ; <<4 x i8>*> [#uses=2]
  %1038 = load <4 x i8>* %1037                    ; <<4 x i8>> [#uses=1]
  %1039 = insertelement <4 x i8> %1038, i8 %1035, i32 2 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1039, <4 x i8>* %1037
  %1040 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1041 = getelementptr inbounds <4 x i8>* %1040, i32 1 ; <<4 x i8>*> [#uses=2]
  %1042 = load <4 x i8>* %1041                    ; <<4 x i8>> [#uses=1]
  %1043 = insertelement <4 x i8> %1042, i8 -1, i32 3 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1043, <4 x i8>* %1041
  %1044 = load <4 x i32>* %ccount                 ; <<4 x i32>> [#uses=1]
  %1045 = extractelement <4 x i32> %1044, i32 1   ; <i32> [#uses=1]
  %1046 = load i32* %6                            ; <i32> [#uses=1]
  %1047 = icmp eq i32 %1045, %1046                ; <i1> [#uses=1]
  br i1 %1047, label %1048, label %1061

; <label>:1048                                    ; preds = %994
  %1049 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1050 = getelementptr inbounds <4 x i8>* %1049, i32 1 ; <<4 x i8>*> [#uses=2]
  %1051 = load <4 x i8>* %1050                    ; <<4 x i8>> [#uses=1]
  %1052 = insertelement <4 x i8> %1051, i8 0, i32 0 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1052, <4 x i8>* %1050
  %1053 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1054 = getelementptr inbounds <4 x i8>* %1053, i32 1 ; <<4 x i8>*> [#uses=2]
  %1055 = load <4 x i8>* %1054                    ; <<4 x i8>> [#uses=1]
  %1056 = insertelement <4 x i8> %1055, i8 0, i32 1 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1056, <4 x i8>* %1054
  %1057 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1058 = getelementptr inbounds <4 x i8>* %1057, i32 1 ; <<4 x i8>*> [#uses=2]
  %1059 = load <4 x i8>* %1058                    ; <<4 x i8>> [#uses=1]
  %1060 = insertelement <4 x i8> %1059, i8 0, i32 2 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1060, <4 x i8>* %1058
  br label %1061

; <label>:1061                                    ; preds = %1048, %994
  %1062 = load i32* %8                            ; <i32> [#uses=1]
  %1063 = icmp ne i32 %1062, 0                    ; <i1> [#uses=1]
  br i1 %1063, label %1064, label %1100

; <label>:1064                                    ; preds = %1061
  %1065 = load <4 x i32>* %ccount                 ; <<4 x i32>> [#uses=1]
  %1066 = extractelement <4 x i32> %1065, i32 1   ; <i32> [#uses=1]
  %1067 = and i32 %1066, 255                      ; <i32> [#uses=1]
  %1068 = trunc i32 %1067 to i8                   ; <i8> [#uses=1]
  %1069 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1070 = getelementptr inbounds <4 x i8>* %1069, i32 1 ; <<4 x i8>*> [#uses=2]
  %1071 = load <4 x i8>* %1070                    ; <<4 x i8>> [#uses=1]
  %1072 = insertelement <4 x i8> %1071, i8 %1068, i32 0 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1072, <4 x i8>* %1070
  %1073 = load <4 x i32>* %ccount                 ; <<4 x i32>> [#uses=1]
  %1074 = extractelement <4 x i32> %1073, i32 1   ; <i32> [#uses=1]
  %1075 = and i32 %1074, 65280                    ; <i32> [#uses=1]
  %1076 = ashr i32 %1075, 8                       ; <i32> [#uses=1]
  %1077 = trunc i32 %1076 to i8                   ; <i8> [#uses=1]
  %1078 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1079 = getelementptr inbounds <4 x i8>* %1078, i32 1 ; <<4 x i8>*> [#uses=2]
  %1080 = load <4 x i8>* %1079                    ; <<4 x i8>> [#uses=1]
  %1081 = insertelement <4 x i8> %1080, i8 %1077, i32 1 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1081, <4 x i8>* %1079
  %1082 = load <4 x i32>* %ccount                 ; <<4 x i32>> [#uses=1]
  %1083 = extractelement <4 x i32> %1082, i32 1   ; <i32> [#uses=1]
  %1084 = and i32 %1083, 16711680                 ; <i32> [#uses=1]
  %1085 = ashr i32 %1084, 16                      ; <i32> [#uses=1]
  %1086 = trunc i32 %1085 to i8                   ; <i8> [#uses=1]
  %1087 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1088 = getelementptr inbounds <4 x i8>* %1087, i32 1 ; <<4 x i8>*> [#uses=2]
  %1089 = load <4 x i8>* %1088                    ; <<4 x i8>> [#uses=1]
  %1090 = insertelement <4 x i8> %1089, i8 %1086, i32 2 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1090, <4 x i8>* %1088
  %1091 = load <4 x i32>* %ccount                 ; <<4 x i32>> [#uses=1]
  %1092 = extractelement <4 x i32> %1091, i32 1   ; <i32> [#uses=1]
  %1093 = and i32 %1092, -16777216                ; <i32> [#uses=1]
  %1094 = lshr i32 %1093, 24                      ; <i32> [#uses=1]
  %1095 = trunc i32 %1094 to i8                   ; <i8> [#uses=1]
  %1096 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1097 = getelementptr inbounds <4 x i8>* %1096, i32 1 ; <<4 x i8>*> [#uses=2]
  %1098 = load <4 x i8>* %1097                    ; <<4 x i8>> [#uses=1]
  %1099 = insertelement <4 x i8> %1098, i8 %1095, i32 3 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1099, <4 x i8>* %1097
  br label %1100

; <label>:1100                                    ; preds = %1064, %1061
  %1101 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1102 = getelementptr inbounds <4 x i8>* %1101, i32 1 ; <<4 x i8>*> [#uses=1]
  %1103 = load <4 x i8>* %1102                    ; <<4 x i8>> [#uses=1]
  %1104 = load i32* %tid                          ; <i32> [#uses=1]
  %1105 = mul i32 4, %1104                        ; <i32> [#uses=1]
  %1106 = add nsw i32 %1105, 1                    ; <i32> [#uses=1]
  %1107 = load <4 x i8> addrspace(1)** %1         ; <<4 x i8> addrspace(1)*> [#uses=1]
  %1108 = getelementptr inbounds <4 x i8> addrspace(1)* %1107, i32 %1106 ; <<4 x i8> addrspace(1)*> [#uses=1]
  store <4 x i8> %1103, <4 x i8> addrspace(1)* %1108
  %1109 = load <4 x float>* %fc                   ; <<4 x float>> [#uses=1]
  %1110 = extractelement <4 x float> %1109, i32 2 ; <float> [#uses=1]
  %1111 = fmul float %1110, 2.000000e+000         ; <float> [#uses=1]
  %1112 = fmul float %1111, 0x400921FF20000000    ; <float> [#uses=1]
  %1113 = fdiv float %1112, 2.560000e+002         ; <float> [#uses=1]
  store float %1113, float* %c
  %1114 = load float* %c                          ; <float> [#uses=1]
  %1115 = call float @_Z10native_cosf(float %1114) ; <float> [#uses=1]
  %1116 = fadd float 1.000000e+000, %1115         ; <float> [#uses=1]
  %1117 = fmul float %1116, 5.000000e-001         ; <float> [#uses=1]
  %1118 = fmul float %1117, 2.550000e+002         ; <float> [#uses=1]
  %1119 = fptoui float %1118 to i8                ; <i8> [#uses=1]
  %1120 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1121 = getelementptr inbounds <4 x i8>* %1120, i32 2 ; <<4 x i8>*> [#uses=2]
  %1122 = load <4 x i8>* %1121                    ; <<4 x i8>> [#uses=1]
  %1123 = insertelement <4 x i8> %1122, i8 %1119, i32 0 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1123, <4 x i8>* %1121
  %1124 = load float* %c                          ; <float> [#uses=1]
  %1125 = fmul float 2.000000e+000, %1124         ; <float> [#uses=1]
  %1126 = fadd float %1125, 0x4000C154C0000000    ; <float> [#uses=1]
  %1127 = call float @_Z10native_cosf(float %1126) ; <float> [#uses=1]
  %1128 = fadd float 1.000000e+000, %1127         ; <float> [#uses=1]
  %1129 = fmul float %1128, 5.000000e-001         ; <float> [#uses=1]
  %1130 = fmul float %1129, 2.550000e+002         ; <float> [#uses=1]
  %1131 = fptoui float %1130 to i8                ; <i8> [#uses=1]
  %1132 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1133 = getelementptr inbounds <4 x i8>* %1132, i32 2 ; <<4 x i8>*> [#uses=2]
  %1134 = load <4 x i8>* %1133                    ; <<4 x i8>> [#uses=1]
  %1135 = insertelement <4 x i8> %1134, i8 %1131, i32 1 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1135, <4 x i8>* %1133
  %1136 = load float* %c                          ; <float> [#uses=1]
  %1137 = fsub float %1136, 0x4000C154C0000000    ; <float> [#uses=1]
  %1138 = call float @_Z10native_cosf(float %1137) ; <float> [#uses=1]
  %1139 = fadd float 1.000000e+000, %1138         ; <float> [#uses=1]
  %1140 = fmul float %1139, 5.000000e-001         ; <float> [#uses=1]
  %1141 = fmul float %1140, 2.550000e+002         ; <float> [#uses=1]
  %1142 = fptoui float %1141 to i8                ; <i8> [#uses=1]
  %1143 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1144 = getelementptr inbounds <4 x i8>* %1143, i32 2 ; <<4 x i8>*> [#uses=2]
  %1145 = load <4 x i8>* %1144                    ; <<4 x i8>> [#uses=1]
  %1146 = insertelement <4 x i8> %1145, i8 %1142, i32 2 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1146, <4 x i8>* %1144
  %1147 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1148 = getelementptr inbounds <4 x i8>* %1147, i32 2 ; <<4 x i8>*> [#uses=2]
  %1149 = load <4 x i8>* %1148                    ; <<4 x i8>> [#uses=1]
  %1150 = insertelement <4 x i8> %1149, i8 -1, i32 3 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1150, <4 x i8>* %1148
  %1151 = load <4 x i32>* %ccount                 ; <<4 x i32>> [#uses=1]
  %1152 = extractelement <4 x i32> %1151, i32 2   ; <i32> [#uses=1]
  %1153 = load i32* %6                            ; <i32> [#uses=1]
  %1154 = icmp eq i32 %1152, %1153                ; <i1> [#uses=1]
  br i1 %1154, label %1155, label %1168

; <label>:1155                                    ; preds = %1100
  %1156 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1157 = getelementptr inbounds <4 x i8>* %1156, i32 2 ; <<4 x i8>*> [#uses=2]
  %1158 = load <4 x i8>* %1157                    ; <<4 x i8>> [#uses=1]
  %1159 = insertelement <4 x i8> %1158, i8 0, i32 0 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1159, <4 x i8>* %1157
  %1160 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1161 = getelementptr inbounds <4 x i8>* %1160, i32 2 ; <<4 x i8>*> [#uses=2]
  %1162 = load <4 x i8>* %1161                    ; <<4 x i8>> [#uses=1]
  %1163 = insertelement <4 x i8> %1162, i8 0, i32 1 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1163, <4 x i8>* %1161
  %1164 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1165 = getelementptr inbounds <4 x i8>* %1164, i32 2 ; <<4 x i8>*> [#uses=2]
  %1166 = load <4 x i8>* %1165                    ; <<4 x i8>> [#uses=1]
  %1167 = insertelement <4 x i8> %1166, i8 0, i32 2 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1167, <4 x i8>* %1165
  br label %1168

; <label>:1168                                    ; preds = %1155, %1100
  %1169 = load i32* %8                            ; <i32> [#uses=1]
  %1170 = icmp ne i32 %1169, 0                    ; <i1> [#uses=1]
  br i1 %1170, label %1171, label %1207

; <label>:1171                                    ; preds = %1168
  %1172 = load <4 x i32>* %ccount                 ; <<4 x i32>> [#uses=1]
  %1173 = extractelement <4 x i32> %1172, i32 2   ; <i32> [#uses=1]
  %1174 = and i32 %1173, 255                      ; <i32> [#uses=1]
  %1175 = trunc i32 %1174 to i8                   ; <i8> [#uses=1]
  %1176 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1177 = getelementptr inbounds <4 x i8>* %1176, i32 2 ; <<4 x i8>*> [#uses=2]
  %1178 = load <4 x i8>* %1177                    ; <<4 x i8>> [#uses=1]
  %1179 = insertelement <4 x i8> %1178, i8 %1175, i32 0 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1179, <4 x i8>* %1177
  %1180 = load <4 x i32>* %ccount                 ; <<4 x i32>> [#uses=1]
  %1181 = extractelement <4 x i32> %1180, i32 2   ; <i32> [#uses=1]
  %1182 = and i32 %1181, 65280                    ; <i32> [#uses=1]
  %1183 = ashr i32 %1182, 8                       ; <i32> [#uses=1]
  %1184 = trunc i32 %1183 to i8                   ; <i8> [#uses=1]
  %1185 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1186 = getelementptr inbounds <4 x i8>* %1185, i32 2 ; <<4 x i8>*> [#uses=2]
  %1187 = load <4 x i8>* %1186                    ; <<4 x i8>> [#uses=1]
  %1188 = insertelement <4 x i8> %1187, i8 %1184, i32 1 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1188, <4 x i8>* %1186
  %1189 = load <4 x i32>* %ccount                 ; <<4 x i32>> [#uses=1]
  %1190 = extractelement <4 x i32> %1189, i32 2   ; <i32> [#uses=1]
  %1191 = and i32 %1190, 16711680                 ; <i32> [#uses=1]
  %1192 = ashr i32 %1191, 16                      ; <i32> [#uses=1]
  %1193 = trunc i32 %1192 to i8                   ; <i8> [#uses=1]
  %1194 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1195 = getelementptr inbounds <4 x i8>* %1194, i32 2 ; <<4 x i8>*> [#uses=2]
  %1196 = load <4 x i8>* %1195                    ; <<4 x i8>> [#uses=1]
  %1197 = insertelement <4 x i8> %1196, i8 %1193, i32 2 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1197, <4 x i8>* %1195
  %1198 = load <4 x i32>* %ccount                 ; <<4 x i32>> [#uses=1]
  %1199 = extractelement <4 x i32> %1198, i32 2   ; <i32> [#uses=1]
  %1200 = and i32 %1199, -16777216                ; <i32> [#uses=1]
  %1201 = lshr i32 %1200, 24                      ; <i32> [#uses=1]
  %1202 = trunc i32 %1201 to i8                   ; <i8> [#uses=1]
  %1203 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1204 = getelementptr inbounds <4 x i8>* %1203, i32 2 ; <<4 x i8>*> [#uses=2]
  %1205 = load <4 x i8>* %1204                    ; <<4 x i8>> [#uses=1]
  %1206 = insertelement <4 x i8> %1205, i8 %1202, i32 3 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1206, <4 x i8>* %1204
  br label %1207

; <label>:1207                                    ; preds = %1171, %1168
  %1208 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1209 = getelementptr inbounds <4 x i8>* %1208, i32 2 ; <<4 x i8>*> [#uses=1]
  %1210 = load <4 x i8>* %1209                    ; <<4 x i8>> [#uses=1]
  %1211 = load i32* %tid                          ; <i32> [#uses=1]
  %1212 = mul i32 4, %1211                        ; <i32> [#uses=1]
  %1213 = add nsw i32 %1212, 2                    ; <i32> [#uses=1]
  %1214 = load <4 x i8> addrspace(1)** %1         ; <<4 x i8> addrspace(1)*> [#uses=1]
  %1215 = getelementptr inbounds <4 x i8> addrspace(1)* %1214, i32 %1213 ; <<4 x i8> addrspace(1)*> [#uses=1]
  store <4 x i8> %1210, <4 x i8> addrspace(1)* %1215
  %1216 = load <4 x float>* %fc                   ; <<4 x float>> [#uses=1]
  %1217 = extractelement <4 x float> %1216, i32 3 ; <float> [#uses=1]
  %1218 = fmul float %1217, 2.000000e+000         ; <float> [#uses=1]
  %1219 = fmul float %1218, 0x400921FF20000000    ; <float> [#uses=1]
  %1220 = fdiv float %1219, 2.560000e+002         ; <float> [#uses=1]
  store float %1220, float* %c
  %1221 = load float* %c                          ; <float> [#uses=1]
  %1222 = call float @_Z10native_cosf(float %1221) ; <float> [#uses=1]
  %1223 = fadd float 1.000000e+000, %1222         ; <float> [#uses=1]
  %1224 = fmul float %1223, 5.000000e-001         ; <float> [#uses=1]
  %1225 = fmul float %1224, 2.550000e+002         ; <float> [#uses=1]
  %1226 = fptoui float %1225 to i8                ; <i8> [#uses=1]
  %1227 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1228 = getelementptr inbounds <4 x i8>* %1227, i32 3 ; <<4 x i8>*> [#uses=2]
  %1229 = load <4 x i8>* %1228                    ; <<4 x i8>> [#uses=1]
  %1230 = insertelement <4 x i8> %1229, i8 %1226, i32 0 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1230, <4 x i8>* %1228
  %1231 = load float* %c                          ; <float> [#uses=1]
  %1232 = fmul float 2.000000e+000, %1231         ; <float> [#uses=1]
  %1233 = fadd float %1232, 0x4000C154C0000000    ; <float> [#uses=1]
  %1234 = call float @_Z10native_cosf(float %1233) ; <float> [#uses=1]
  %1235 = fadd float 1.000000e+000, %1234         ; <float> [#uses=1]
  %1236 = fmul float %1235, 5.000000e-001         ; <float> [#uses=1]
  %1237 = fmul float %1236, 2.550000e+002         ; <float> [#uses=1]
  %1238 = fptoui float %1237 to i8                ; <i8> [#uses=1]
  %1239 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1240 = getelementptr inbounds <4 x i8>* %1239, i32 3 ; <<4 x i8>*> [#uses=2]
  %1241 = load <4 x i8>* %1240                    ; <<4 x i8>> [#uses=1]
  %1242 = insertelement <4 x i8> %1241, i8 %1238, i32 1 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1242, <4 x i8>* %1240
  %1243 = load float* %c                          ; <float> [#uses=1]
  %1244 = fsub float %1243, 0x4000C154C0000000    ; <float> [#uses=1]
  %1245 = call float @_Z10native_cosf(float %1244) ; <float> [#uses=1]
  %1246 = fadd float 1.000000e+000, %1245         ; <float> [#uses=1]
  %1247 = fmul float %1246, 5.000000e-001         ; <float> [#uses=1]
  %1248 = fmul float %1247, 2.550000e+002         ; <float> [#uses=1]
  %1249 = fptoui float %1248 to i8                ; <i8> [#uses=1]
  %1250 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1251 = getelementptr inbounds <4 x i8>* %1250, i32 3 ; <<4 x i8>*> [#uses=2]
  %1252 = load <4 x i8>* %1251                    ; <<4 x i8>> [#uses=1]
  %1253 = insertelement <4 x i8> %1252, i8 %1249, i32 2 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1253, <4 x i8>* %1251
  %1254 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1255 = getelementptr inbounds <4 x i8>* %1254, i32 3 ; <<4 x i8>*> [#uses=2]
  %1256 = load <4 x i8>* %1255                    ; <<4 x i8>> [#uses=1]
  %1257 = insertelement <4 x i8> %1256, i8 -1, i32 3 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1257, <4 x i8>* %1255
  %1258 = load <4 x i32>* %ccount                 ; <<4 x i32>> [#uses=1]
  %1259 = extractelement <4 x i32> %1258, i32 3   ; <i32> [#uses=1]
  %1260 = load i32* %6                            ; <i32> [#uses=1]
  %1261 = icmp eq i32 %1259, %1260                ; <i1> [#uses=1]
  br i1 %1261, label %1262, label %1275

; <label>:1262                                    ; preds = %1207
  %1263 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1264 = getelementptr inbounds <4 x i8>* %1263, i32 3 ; <<4 x i8>*> [#uses=2]
  %1265 = load <4 x i8>* %1264                    ; <<4 x i8>> [#uses=1]
  %1266 = insertelement <4 x i8> %1265, i8 0, i32 0 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1266, <4 x i8>* %1264
  %1267 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1268 = getelementptr inbounds <4 x i8>* %1267, i32 3 ; <<4 x i8>*> [#uses=2]
  %1269 = load <4 x i8>* %1268                    ; <<4 x i8>> [#uses=1]
  %1270 = insertelement <4 x i8> %1269, i8 0, i32 1 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1270, <4 x i8>* %1268
  %1271 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1272 = getelementptr inbounds <4 x i8>* %1271, i32 3 ; <<4 x i8>*> [#uses=2]
  %1273 = load <4 x i8>* %1272                    ; <<4 x i8>> [#uses=1]
  %1274 = insertelement <4 x i8> %1273, i8 0, i32 2 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1274, <4 x i8>* %1272
  br label %1275

; <label>:1275                                    ; preds = %1262, %1207
  %1276 = load i32* %8                            ; <i32> [#uses=1]
  %1277 = icmp ne i32 %1276, 0                    ; <i1> [#uses=1]
  br i1 %1277, label %1278, label %1314

; <label>:1278                                    ; preds = %1275
  %1279 = load <4 x i32>* %ccount                 ; <<4 x i32>> [#uses=1]
  %1280 = extractelement <4 x i32> %1279, i32 3   ; <i32> [#uses=1]
  %1281 = and i32 %1280, 255                      ; <i32> [#uses=1]
  %1282 = trunc i32 %1281 to i8                   ; <i8> [#uses=1]
  %1283 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1284 = getelementptr inbounds <4 x i8>* %1283, i32 3 ; <<4 x i8>*> [#uses=2]
  %1285 = load <4 x i8>* %1284                    ; <<4 x i8>> [#uses=1]
  %1286 = insertelement <4 x i8> %1285, i8 %1282, i32 0 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1286, <4 x i8>* %1284
  %1287 = load <4 x i32>* %ccount                 ; <<4 x i32>> [#uses=1]
  %1288 = extractelement <4 x i32> %1287, i32 3   ; <i32> [#uses=1]
  %1289 = and i32 %1288, 65280                    ; <i32> [#uses=1]
  %1290 = ashr i32 %1289, 8                       ; <i32> [#uses=1]
  %1291 = trunc i32 %1290 to i8                   ; <i8> [#uses=1]
  %1292 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1293 = getelementptr inbounds <4 x i8>* %1292, i32 3 ; <<4 x i8>*> [#uses=2]
  %1294 = load <4 x i8>* %1293                    ; <<4 x i8>> [#uses=1]
  %1295 = insertelement <4 x i8> %1294, i8 %1291, i32 1 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1295, <4 x i8>* %1293
  %1296 = load <4 x i32>* %ccount                 ; <<4 x i32>> [#uses=1]
  %1297 = extractelement <4 x i32> %1296, i32 3   ; <i32> [#uses=1]
  %1298 = and i32 %1297, 16711680                 ; <i32> [#uses=1]
  %1299 = ashr i32 %1298, 16                      ; <i32> [#uses=1]
  %1300 = trunc i32 %1299 to i8                   ; <i8> [#uses=1]
  %1301 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1302 = getelementptr inbounds <4 x i8>* %1301, i32 3 ; <<4 x i8>*> [#uses=2]
  %1303 = load <4 x i8>* %1302                    ; <<4 x i8>> [#uses=1]
  %1304 = insertelement <4 x i8> %1303, i8 %1300, i32 2 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1304, <4 x i8>* %1302
  %1305 = load <4 x i32>* %ccount                 ; <<4 x i32>> [#uses=1]
  %1306 = extractelement <4 x i32> %1305, i32 3   ; <i32> [#uses=1]
  %1307 = and i32 %1306, -16777216                ; <i32> [#uses=1]
  %1308 = lshr i32 %1307, 24                      ; <i32> [#uses=1]
  %1309 = trunc i32 %1308 to i8                   ; <i8> [#uses=1]
  %1310 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1311 = getelementptr inbounds <4 x i8>* %1310, i32 3 ; <<4 x i8>*> [#uses=2]
  %1312 = load <4 x i8>* %1311                    ; <<4 x i8>> [#uses=1]
  %1313 = insertelement <4 x i8> %1312, i8 %1309, i32 3 ; <<4 x i8>> [#uses=1]
  store <4 x i8> %1313, <4 x i8>* %1311
  br label %1314

; <label>:1314                                    ; preds = %1278, %1275
  %1315 = getelementptr inbounds [4 x <4 x i8>]* %color, i32 0, i32 0 ; <<4 x i8>*> [#uses=1]
  %1316 = getelementptr inbounds <4 x i8>* %1315, i32 3 ; <<4 x i8>*> [#uses=1]
  %1317 = load <4 x i8>* %1316                    ; <<4 x i8>> [#uses=1]
  %1318 = load i32* %tid                          ; <i32> [#uses=1]
  %1319 = mul i32 4, %1318                        ; <i32> [#uses=1]
  %1320 = add nsw i32 %1319, 3                    ; <i32> [#uses=1]
  %1321 = load <4 x i8> addrspace(1)** %1         ; <<4 x i8> addrspace(1)*> [#uses=1]
  %1322 = getelementptr inbounds <4 x i8> addrspace(1)* %1321, i32 %1320 ; <<4 x i8> addrspace(1)*> [#uses=1]
  store <4 x i8> %1317, <4 x i8> addrspace(1)* %1322
  ret void
}

declare i32 @get_global_id(i32)

declare <4 x float> @_Z14convert_float4U8__vector4i(<4 x i32>)

declare float @_Z11native_log2f(float)

declare float @_Z10native_cosf(float)