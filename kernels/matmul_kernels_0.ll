; ModuleID = '-'
target datalayout = "E-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-n32"
target triple = "GHAL3D_2_1"

%opencl_metadata_type = type <{ i8*, i8*, [4 x i32], [4 x i32], i8*, i8* }>

@opencl_mmmKernel_locals = appending global [1 x i8*] zeroinitializer, section "llvm.metadata" ; <[1 x i8*]*> [#uses=1]
@opencl_mmmKernel_parameters = appending global [143 x i8] c"float4 __attribute__((address_space(1))) *, float4 __attribute__((address_space(1))) *, float4 __attribute__((address_space(1))) *, uint, uint\00", section "llvm.metadata" ; <[143 x i8]*> [#uses=1]
@opencl_mmmKernel_local_locals = appending global [1 x i8*] zeroinitializer, section "llvm.metadata" ; <[1 x i8*]*> [#uses=1]
@opencl_mmmKernel_local_parameters = appending global [180 x i8] c"float4 __attribute__((address_space(1))) *, float4 __attribute__((address_space(1))) *, float4 __attribute__((address_space(1))) *, int, float4 __attribute__((address_space(3))) *\00", section "llvm.metadata" ; <[180 x i8]*> [#uses=1]
@opencl_mmmKernel_local2_locals = appending global [1 x i8*] zeroinitializer, section "llvm.metadata" ; <[1 x i8*]*> [#uses=1]
@opencl_mmmKernel_local2_parameters = appending global [224 x i8] c"float4 __attribute__((address_space(1))) *, float4 __attribute__((address_space(1))) *, float4 __attribute__((address_space(1))) *, int, float4 __attribute__((address_space(3))) *, float4 __attribute__((address_space(3))) *\00", section "llvm.metadata" ; <[224 x i8]*> [#uses=1]
@opencl_metadata = appending global [3 x %opencl_metadata_type] [%opencl_metadata_type <{ i8* bitcast (void (<4 x float> addrspace(1)*, <4 x float> addrspace(1)*, <4 x float> addrspace(1)*, i32, i32)* @mmmKernel to i8*), i8* null, [4 x i32] zeroinitializer, [4 x i32] zeroinitializer, i8* bitcast ([1 x i8*]* @opencl_mmmKernel_locals to i8*), i8* getelementptr inbounds ([143 x i8]* @opencl_mmmKernel_parameters, i32 0, i32 0) }>, %opencl_metadata_type <{ i8* bitcast (void (<4 x float> addrspace(1)*, <4 x float> addrspace(1)*, <4 x float> addrspace(1)*, i32, <4 x float> addrspace(3)*)* @mmmKernel_local to i8*), i8* null, [4 x i32] zeroinitializer, [4 x i32] zeroinitializer, i8* bitcast ([1 x i8*]* @opencl_mmmKernel_local_locals to i8*), i8* getelementptr inbounds ([180 x i8]* @opencl_mmmKernel_local_parameters, i32 0, i32 0) }>, %opencl_metadata_type <{ i8* bitcast (void (<4 x float> addrspace(1)*, <4 x float> addrspace(1)*, <4 x float> addrspace(1)*, i32, <4 x float> addrspace(3)*, <4 x float> addrspace(3)*)* @mmmKernel_local2 to i8*), i8* null, [4 x i32] zeroinitializer, [4 x i32] zeroinitializer, i8* bitcast ([1 x i8*]* @opencl_mmmKernel_local2_locals to i8*), i8* getelementptr inbounds ([224 x i8]* @opencl_mmmKernel_local2_parameters, i32 0, i32 0) }>], section "llvm.metadata" ; <[3 x %opencl_metadata_type]*> [#uses=0]

define void @mmmKernel(<4 x float> addrspace(1)* %matrixA, <4 x float> addrspace(1)* %matrixB, <4 x float> addrspace(1)* %matrixC, i32 %widthA, i32 %widthB) nounwind {
  %1 = alloca <4 x float> addrspace(1)*, align 16 ; <<4 x float> addrspace(1)**> [#uses=5]
  %2 = alloca <4 x float> addrspace(1)*, align 16 ; <<4 x float> addrspace(1)**> [#uses=5]
  %3 = alloca <4 x float> addrspace(1)*, align 16 ; <<4 x float> addrspace(1)**> [#uses=5]
  %4 = alloca i32, align 4                        ; <i32*> [#uses=6]
  %5 = alloca i32, align 4                        ; <i32*> [#uses=11]
  %pos = alloca <2 x i32>, align 8                ; <<2 x i32>*> [#uses=17]
  %6 = alloca <2 x i32>, align 8                  ; <<2 x i32>*> [#uses=2]
  %sum0 = alloca <4 x float>, align 16            ; <<4 x float>*> [#uses=14]
  %7 = alloca <4 x float>, align 16               ; <<4 x float>*> [#uses=2]
  %sum1 = alloca <4 x float>, align 16            ; <<4 x float>*> [#uses=14]
  %8 = alloca <4 x float>, align 16               ; <<4 x float>*> [#uses=2]
  %sum2 = alloca <4 x float>, align 16            ; <<4 x float>*> [#uses=14]
  %9 = alloca <4 x float>, align 16               ; <<4 x float>*> [#uses=2]
  %sum3 = alloca <4 x float>, align 16            ; <<4 x float>*> [#uses=14]
  %10 = alloca <4 x float>, align 16              ; <<4 x float>*> [#uses=2]
  %i = alloca i32, align 4                        ; <i32*> [#uses=12]
  %tempA0 = alloca <4 x float>, align 16          ; <<4 x float>*> [#uses=17]
  %tempA1 = alloca <4 x float>, align 16          ; <<4 x float>*> [#uses=17]
  %tempA2 = alloca <4 x float>, align 16          ; <<4 x float>*> [#uses=17]
  %tempA3 = alloca <4 x float>, align 16          ; <<4 x float>*> [#uses=17]
  %tempB0 = alloca <4 x float>, align 16          ; <<4 x float>*> [#uses=17]
  %tempB1 = alloca <4 x float>, align 16          ; <<4 x float>*> [#uses=17]
  %tempB2 = alloca <4 x float>, align 16          ; <<4 x float>*> [#uses=17]
  %tempB3 = alloca <4 x float>, align 16          ; <<4 x float>*> [#uses=17]
  store <4 x float> addrspace(1)* %matrixA, <4 x float> addrspace(1)** %1
  store <4 x float> addrspace(1)* %matrixB, <4 x float> addrspace(1)** %2
  store <4 x float> addrspace(1)* %matrixC, <4 x float> addrspace(1)** %3
  store i32 %widthA, i32* %4
  store i32 %widthB, i32* %5
  %11 = call i32 @get_global_id(i32 0)            ; <i32> [#uses=1]
  %12 = insertelement <2 x i32> undef, i32 %11, i32 0 ; <<2 x i32>> [#uses=1]
  %13 = call i32 @get_global_id(i32 1)            ; <i32> [#uses=1]
  %14 = insertelement <2 x i32> %12, i32 %13, i32 1 ; <<2 x i32>> [#uses=1]
  store <2 x i32> %14, <2 x i32>* %6
  %15 = load <2 x i32>* %6                        ; <<2 x i32>> [#uses=1]
  store <2 x i32> %15, <2 x i32>* %pos
  store <4 x float> zeroinitializer, <4 x float>* %7
  %16 = load <4 x float>* %7                      ; <<4 x float>> [#uses=1]
  store <4 x float> %16, <4 x float>* %sum0
  store <4 x float> zeroinitializer, <4 x float>* %8
  %17 = load <4 x float>* %8                      ; <<4 x float>> [#uses=1]
  store <4 x float> %17, <4 x float>* %sum1
  store <4 x float> zeroinitializer, <4 x float>* %9
  %18 = load <4 x float>* %9                      ; <<4 x float>> [#uses=1]
  store <4 x float> %18, <4 x float>* %sum2
  store <4 x float> zeroinitializer, <4 x float>* %10
  %19 = load <4 x float>* %10                     ; <<4 x float>> [#uses=1]
  store <4 x float> %19, <4 x float>* %sum3
  %20 = load i32* %5                              ; <i32> [#uses=1]
  %21 = udiv i32 %20, 4                           ; <i32> [#uses=1]
  store i32 %21, i32* %5
  store i32 0, i32* %i
  br label %22

; <label>:22                                      ; preds = %565, %0
  %23 = load i32* %i                              ; <i32> [#uses=1]
  %24 = load i32* %4                              ; <i32> [#uses=1]
  %25 = icmp ult i32 %23, %24                     ; <i1> [#uses=1]
  br i1 %25, label %26, label %568

; <label>:26                                      ; preds = %22
  %27 = load i32* %i                              ; <i32> [#uses=1]
  %28 = sdiv i32 %27, 4                           ; <i32> [#uses=1]
  %29 = load <2 x i32>* %pos                      ; <<2 x i32>> [#uses=1]
  %30 = extractelement <2 x i32> %29, i32 1       ; <i32> [#uses=1]
  %31 = shl i32 %30, 2                            ; <i32> [#uses=1]
  %32 = load i32* %4                              ; <i32> [#uses=1]
  %33 = udiv i32 %32, 4                           ; <i32> [#uses=1]
  %34 = mul i32 %31, %33                          ; <i32> [#uses=1]
  %35 = add i32 %28, %34                          ; <i32> [#uses=1]
  %36 = load <4 x float> addrspace(1)** %1        ; <<4 x float> addrspace(1)*> [#uses=1]
  %37 = getelementptr inbounds <4 x float> addrspace(1)* %36, i32 %35 ; <<4 x float> addrspace(1)*> [#uses=1]
  %38 = load <4 x float> addrspace(1)* %37        ; <<4 x float>> [#uses=1]
  store <4 x float> %38, <4 x float>* %tempA0
  %39 = load i32* %i                              ; <i32> [#uses=1]
  %40 = sdiv i32 %39, 4                           ; <i32> [#uses=1]
  %41 = load <2 x i32>* %pos                      ; <<2 x i32>> [#uses=1]
  %42 = extractelement <2 x i32> %41, i32 1       ; <i32> [#uses=1]
  %43 = shl i32 %42, 2                            ; <i32> [#uses=1]
  %44 = add nsw i32 %43, 1                        ; <i32> [#uses=1]
  %45 = load i32* %4                              ; <i32> [#uses=1]
  %46 = udiv i32 %45, 4                           ; <i32> [#uses=1]
  %47 = mul i32 %44, %46                          ; <i32> [#uses=1]
  %48 = add i32 %40, %47                          ; <i32> [#uses=1]
  %49 = load <4 x float> addrspace(1)** %1        ; <<4 x float> addrspace(1)*> [#uses=1]
  %50 = getelementptr inbounds <4 x float> addrspace(1)* %49, i32 %48 ; <<4 x float> addrspace(1)*> [#uses=1]
  %51 = load <4 x float> addrspace(1)* %50        ; <<4 x float>> [#uses=1]
  store <4 x float> %51, <4 x float>* %tempA1
  %52 = load i32* %i                              ; <i32> [#uses=1]
  %53 = sdiv i32 %52, 4                           ; <i32> [#uses=1]
  %54 = load <2 x i32>* %pos                      ; <<2 x i32>> [#uses=1]
  %55 = extractelement <2 x i32> %54, i32 1       ; <i32> [#uses=1]
  %56 = shl i32 %55, 2                            ; <i32> [#uses=1]
  %57 = add nsw i32 %56, 2                        ; <i32> [#uses=1]
  %58 = load i32* %4                              ; <i32> [#uses=1]
  %59 = udiv i32 %58, 4                           ; <i32> [#uses=1]
  %60 = mul i32 %57, %59                          ; <i32> [#uses=1]
  %61 = add i32 %53, %60                          ; <i32> [#uses=1]
  %62 = load <4 x float> addrspace(1)** %1        ; <<4 x float> addrspace(1)*> [#uses=1]
  %63 = getelementptr inbounds <4 x float> addrspace(1)* %62, i32 %61 ; <<4 x float> addrspace(1)*> [#uses=1]
  %64 = load <4 x float> addrspace(1)* %63        ; <<4 x float>> [#uses=1]
  store <4 x float> %64, <4 x float>* %tempA2
  %65 = load i32* %i                              ; <i32> [#uses=1]
  %66 = sdiv i32 %65, 4                           ; <i32> [#uses=1]
  %67 = load <2 x i32>* %pos                      ; <<2 x i32>> [#uses=1]
  %68 = extractelement <2 x i32> %67, i32 1       ; <i32> [#uses=1]
  %69 = shl i32 %68, 2                            ; <i32> [#uses=1]
  %70 = add nsw i32 %69, 3                        ; <i32> [#uses=1]
  %71 = load i32* %4                              ; <i32> [#uses=1]
  %72 = udiv i32 %71, 4                           ; <i32> [#uses=1]
  %73 = mul i32 %70, %72                          ; <i32> [#uses=1]
  %74 = add i32 %66, %73                          ; <i32> [#uses=1]
  %75 = load <4 x float> addrspace(1)** %1        ; <<4 x float> addrspace(1)*> [#uses=1]
  %76 = getelementptr inbounds <4 x float> addrspace(1)* %75, i32 %74 ; <<4 x float> addrspace(1)*> [#uses=1]
  %77 = load <4 x float> addrspace(1)* %76        ; <<4 x float>> [#uses=1]
  store <4 x float> %77, <4 x float>* %tempA3
  %78 = load <2 x i32>* %pos                      ; <<2 x i32>> [#uses=1]
  %79 = extractelement <2 x i32> %78, i32 0       ; <i32> [#uses=1]
  %80 = load i32* %i                              ; <i32> [#uses=1]
  %81 = load i32* %5                              ; <i32> [#uses=1]
  %82 = mul i32 %80, %81                          ; <i32> [#uses=1]
  %83 = add i32 %79, %82                          ; <i32> [#uses=1]
  %84 = load <4 x float> addrspace(1)** %2        ; <<4 x float> addrspace(1)*> [#uses=1]
  %85 = getelementptr inbounds <4 x float> addrspace(1)* %84, i32 %83 ; <<4 x float> addrspace(1)*> [#uses=1]
  %86 = load <4 x float> addrspace(1)* %85        ; <<4 x float>> [#uses=1]
  store <4 x float> %86, <4 x float>* %tempB0
  %87 = load <2 x i32>* %pos                      ; <<2 x i32>> [#uses=1]
  %88 = extractelement <2 x i32> %87, i32 0       ; <i32> [#uses=1]
  %89 = load i32* %i                              ; <i32> [#uses=1]
  %90 = add nsw i32 %89, 1                        ; <i32> [#uses=1]
  %91 = load i32* %5                              ; <i32> [#uses=1]
  %92 = mul i32 %90, %91                          ; <i32> [#uses=1]
  %93 = add i32 %88, %92                          ; <i32> [#uses=1]
  %94 = load <4 x float> addrspace(1)** %2        ; <<4 x float> addrspace(1)*> [#uses=1]
  %95 = getelementptr inbounds <4 x float> addrspace(1)* %94, i32 %93 ; <<4 x float> addrspace(1)*> [#uses=1]
  %96 = load <4 x float> addrspace(1)* %95        ; <<4 x float>> [#uses=1]
  store <4 x float> %96, <4 x float>* %tempB1
  %97 = load <2 x i32>* %pos                      ; <<2 x i32>> [#uses=1]
  %98 = extractelement <2 x i32> %97, i32 0       ; <i32> [#uses=1]
  %99 = load i32* %i                              ; <i32> [#uses=1]
  %100 = add nsw i32 %99, 2                       ; <i32> [#uses=1]
  %101 = load i32* %5                             ; <i32> [#uses=1]
  %102 = mul i32 %100, %101                       ; <i32> [#uses=1]
  %103 = add i32 %98, %102                        ; <i32> [#uses=1]
  %104 = load <4 x float> addrspace(1)** %2       ; <<4 x float> addrspace(1)*> [#uses=1]
  %105 = getelementptr inbounds <4 x float> addrspace(1)* %104, i32 %103 ; <<4 x float> addrspace(1)*> [#uses=1]
  %106 = load <4 x float> addrspace(1)* %105      ; <<4 x float>> [#uses=1]
  store <4 x float> %106, <4 x float>* %tempB2
  %107 = load <2 x i32>* %pos                     ; <<2 x i32>> [#uses=1]
  %108 = extractelement <2 x i32> %107, i32 0     ; <i32> [#uses=1]
  %109 = load i32* %i                             ; <i32> [#uses=1]
  %110 = add nsw i32 %109, 3                      ; <i32> [#uses=1]
  %111 = load i32* %5                             ; <i32> [#uses=1]
  %112 = mul i32 %110, %111                       ; <i32> [#uses=1]
  %113 = add i32 %108, %112                       ; <i32> [#uses=1]
  %114 = load <4 x float> addrspace(1)** %2       ; <<4 x float> addrspace(1)*> [#uses=1]
  %115 = getelementptr inbounds <4 x float> addrspace(1)* %114, i32 %113 ; <<4 x float> addrspace(1)*> [#uses=1]
  %116 = load <4 x float> addrspace(1)* %115      ; <<4 x float>> [#uses=1]
  store <4 x float> %116, <4 x float>* %tempB3
  %117 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %118 = extractelement <4 x float> %117, i32 0   ; <float> [#uses=1]
  %119 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %120 = extractelement <4 x float> %119, i32 0   ; <float> [#uses=1]
  %121 = fmul float %118, %120                    ; <float> [#uses=1]
  %122 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %123 = extractelement <4 x float> %122, i32 1   ; <float> [#uses=1]
  %124 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %125 = extractelement <4 x float> %124, i32 0   ; <float> [#uses=1]
  %126 = fmul float %123, %125                    ; <float> [#uses=1]
  %127 = fadd float %121, %126                    ; <float> [#uses=1]
  %128 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %129 = extractelement <4 x float> %128, i32 2   ; <float> [#uses=1]
  %130 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %131 = extractelement <4 x float> %130, i32 0   ; <float> [#uses=1]
  %132 = fmul float %129, %131                    ; <float> [#uses=1]
  %133 = fadd float %127, %132                    ; <float> [#uses=1]
  %134 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %135 = extractelement <4 x float> %134, i32 3   ; <float> [#uses=1]
  %136 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %137 = extractelement <4 x float> %136, i32 0   ; <float> [#uses=1]
  %138 = fmul float %135, %137                    ; <float> [#uses=1]
  %139 = fadd float %133, %138                    ; <float> [#uses=1]
  %140 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %141 = extractelement <4 x float> %140, i32 0   ; <float> [#uses=1]
  %142 = fadd float %141, %139                    ; <float> [#uses=1]
  %143 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %144 = insertelement <4 x float> %143, float %142, i32 0 ; <<4 x float>> [#uses=1]
  store <4 x float> %144, <4 x float>* %sum0
  %145 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %146 = extractelement <4 x float> %145, i32 0   ; <float> [#uses=1]
  %147 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %148 = extractelement <4 x float> %147, i32 1   ; <float> [#uses=1]
  %149 = fmul float %146, %148                    ; <float> [#uses=1]
  %150 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %151 = extractelement <4 x float> %150, i32 1   ; <float> [#uses=1]
  %152 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %153 = extractelement <4 x float> %152, i32 1   ; <float> [#uses=1]
  %154 = fmul float %151, %153                    ; <float> [#uses=1]
  %155 = fadd float %149, %154                    ; <float> [#uses=1]
  %156 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %157 = extractelement <4 x float> %156, i32 2   ; <float> [#uses=1]
  %158 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %159 = extractelement <4 x float> %158, i32 1   ; <float> [#uses=1]
  %160 = fmul float %157, %159                    ; <float> [#uses=1]
  %161 = fadd float %155, %160                    ; <float> [#uses=1]
  %162 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %163 = extractelement <4 x float> %162, i32 3   ; <float> [#uses=1]
  %164 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %165 = extractelement <4 x float> %164, i32 1   ; <float> [#uses=1]
  %166 = fmul float %163, %165                    ; <float> [#uses=1]
  %167 = fadd float %161, %166                    ; <float> [#uses=1]
  %168 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %169 = extractelement <4 x float> %168, i32 1   ; <float> [#uses=1]
  %170 = fadd float %169, %167                    ; <float> [#uses=1]
  %171 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %172 = insertelement <4 x float> %171, float %170, i32 1 ; <<4 x float>> [#uses=1]
  store <4 x float> %172, <4 x float>* %sum0
  %173 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %174 = extractelement <4 x float> %173, i32 0   ; <float> [#uses=1]
  %175 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %176 = extractelement <4 x float> %175, i32 2   ; <float> [#uses=1]
  %177 = fmul float %174, %176                    ; <float> [#uses=1]
  %178 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %179 = extractelement <4 x float> %178, i32 1   ; <float> [#uses=1]
  %180 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %181 = extractelement <4 x float> %180, i32 2   ; <float> [#uses=1]
  %182 = fmul float %179, %181                    ; <float> [#uses=1]
  %183 = fadd float %177, %182                    ; <float> [#uses=1]
  %184 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %185 = extractelement <4 x float> %184, i32 2   ; <float> [#uses=1]
  %186 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %187 = extractelement <4 x float> %186, i32 2   ; <float> [#uses=1]
  %188 = fmul float %185, %187                    ; <float> [#uses=1]
  %189 = fadd float %183, %188                    ; <float> [#uses=1]
  %190 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %191 = extractelement <4 x float> %190, i32 3   ; <float> [#uses=1]
  %192 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %193 = extractelement <4 x float> %192, i32 2   ; <float> [#uses=1]
  %194 = fmul float %191, %193                    ; <float> [#uses=1]
  %195 = fadd float %189, %194                    ; <float> [#uses=1]
  %196 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %197 = extractelement <4 x float> %196, i32 2   ; <float> [#uses=1]
  %198 = fadd float %197, %195                    ; <float> [#uses=1]
  %199 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %200 = insertelement <4 x float> %199, float %198, i32 2 ; <<4 x float>> [#uses=1]
  store <4 x float> %200, <4 x float>* %sum0
  %201 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %202 = extractelement <4 x float> %201, i32 0   ; <float> [#uses=1]
  %203 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %204 = extractelement <4 x float> %203, i32 3   ; <float> [#uses=1]
  %205 = fmul float %202, %204                    ; <float> [#uses=1]
  %206 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %207 = extractelement <4 x float> %206, i32 1   ; <float> [#uses=1]
  %208 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %209 = extractelement <4 x float> %208, i32 3   ; <float> [#uses=1]
  %210 = fmul float %207, %209                    ; <float> [#uses=1]
  %211 = fadd float %205, %210                    ; <float> [#uses=1]
  %212 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %213 = extractelement <4 x float> %212, i32 2   ; <float> [#uses=1]
  %214 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %215 = extractelement <4 x float> %214, i32 3   ; <float> [#uses=1]
  %216 = fmul float %213, %215                    ; <float> [#uses=1]
  %217 = fadd float %211, %216                    ; <float> [#uses=1]
  %218 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %219 = extractelement <4 x float> %218, i32 3   ; <float> [#uses=1]
  %220 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %221 = extractelement <4 x float> %220, i32 3   ; <float> [#uses=1]
  %222 = fmul float %219, %221                    ; <float> [#uses=1]
  %223 = fadd float %217, %222                    ; <float> [#uses=1]
  %224 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %225 = extractelement <4 x float> %224, i32 3   ; <float> [#uses=1]
  %226 = fadd float %225, %223                    ; <float> [#uses=1]
  %227 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %228 = insertelement <4 x float> %227, float %226, i32 3 ; <<4 x float>> [#uses=1]
  store <4 x float> %228, <4 x float>* %sum0
  %229 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %230 = extractelement <4 x float> %229, i32 0   ; <float> [#uses=1]
  %231 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %232 = extractelement <4 x float> %231, i32 0   ; <float> [#uses=1]
  %233 = fmul float %230, %232                    ; <float> [#uses=1]
  %234 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %235 = extractelement <4 x float> %234, i32 1   ; <float> [#uses=1]
  %236 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %237 = extractelement <4 x float> %236, i32 0   ; <float> [#uses=1]
  %238 = fmul float %235, %237                    ; <float> [#uses=1]
  %239 = fadd float %233, %238                    ; <float> [#uses=1]
  %240 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %241 = extractelement <4 x float> %240, i32 2   ; <float> [#uses=1]
  %242 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %243 = extractelement <4 x float> %242, i32 0   ; <float> [#uses=1]
  %244 = fmul float %241, %243                    ; <float> [#uses=1]
  %245 = fadd float %239, %244                    ; <float> [#uses=1]
  %246 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %247 = extractelement <4 x float> %246, i32 3   ; <float> [#uses=1]
  %248 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %249 = extractelement <4 x float> %248, i32 0   ; <float> [#uses=1]
  %250 = fmul float %247, %249                    ; <float> [#uses=1]
  %251 = fadd float %245, %250                    ; <float> [#uses=1]
  %252 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %253 = extractelement <4 x float> %252, i32 0   ; <float> [#uses=1]
  %254 = fadd float %253, %251                    ; <float> [#uses=1]
  %255 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %256 = insertelement <4 x float> %255, float %254, i32 0 ; <<4 x float>> [#uses=1]
  store <4 x float> %256, <4 x float>* %sum1
  %257 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %258 = extractelement <4 x float> %257, i32 0   ; <float> [#uses=1]
  %259 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %260 = extractelement <4 x float> %259, i32 1   ; <float> [#uses=1]
  %261 = fmul float %258, %260                    ; <float> [#uses=1]
  %262 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %263 = extractelement <4 x float> %262, i32 1   ; <float> [#uses=1]
  %264 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %265 = extractelement <4 x float> %264, i32 1   ; <float> [#uses=1]
  %266 = fmul float %263, %265                    ; <float> [#uses=1]
  %267 = fadd float %261, %266                    ; <float> [#uses=1]
  %268 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %269 = extractelement <4 x float> %268, i32 2   ; <float> [#uses=1]
  %270 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %271 = extractelement <4 x float> %270, i32 1   ; <float> [#uses=1]
  %272 = fmul float %269, %271                    ; <float> [#uses=1]
  %273 = fadd float %267, %272                    ; <float> [#uses=1]
  %274 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %275 = extractelement <4 x float> %274, i32 3   ; <float> [#uses=1]
  %276 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %277 = extractelement <4 x float> %276, i32 1   ; <float> [#uses=1]
  %278 = fmul float %275, %277                    ; <float> [#uses=1]
  %279 = fadd float %273, %278                    ; <float> [#uses=1]
  %280 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %281 = extractelement <4 x float> %280, i32 1   ; <float> [#uses=1]
  %282 = fadd float %281, %279                    ; <float> [#uses=1]
  %283 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %284 = insertelement <4 x float> %283, float %282, i32 1 ; <<4 x float>> [#uses=1]
  store <4 x float> %284, <4 x float>* %sum1
  %285 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %286 = extractelement <4 x float> %285, i32 0   ; <float> [#uses=1]
  %287 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %288 = extractelement <4 x float> %287, i32 2   ; <float> [#uses=1]
  %289 = fmul float %286, %288                    ; <float> [#uses=1]
  %290 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %291 = extractelement <4 x float> %290, i32 1   ; <float> [#uses=1]
  %292 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %293 = extractelement <4 x float> %292, i32 2   ; <float> [#uses=1]
  %294 = fmul float %291, %293                    ; <float> [#uses=1]
  %295 = fadd float %289, %294                    ; <float> [#uses=1]
  %296 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %297 = extractelement <4 x float> %296, i32 2   ; <float> [#uses=1]
  %298 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %299 = extractelement <4 x float> %298, i32 2   ; <float> [#uses=1]
  %300 = fmul float %297, %299                    ; <float> [#uses=1]
  %301 = fadd float %295, %300                    ; <float> [#uses=1]
  %302 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %303 = extractelement <4 x float> %302, i32 3   ; <float> [#uses=1]
  %304 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %305 = extractelement <4 x float> %304, i32 2   ; <float> [#uses=1]
  %306 = fmul float %303, %305                    ; <float> [#uses=1]
  %307 = fadd float %301, %306                    ; <float> [#uses=1]
  %308 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %309 = extractelement <4 x float> %308, i32 2   ; <float> [#uses=1]
  %310 = fadd float %309, %307                    ; <float> [#uses=1]
  %311 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %312 = insertelement <4 x float> %311, float %310, i32 2 ; <<4 x float>> [#uses=1]
  store <4 x float> %312, <4 x float>* %sum1
  %313 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %314 = extractelement <4 x float> %313, i32 0   ; <float> [#uses=1]
  %315 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %316 = extractelement <4 x float> %315, i32 3   ; <float> [#uses=1]
  %317 = fmul float %314, %316                    ; <float> [#uses=1]
  %318 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %319 = extractelement <4 x float> %318, i32 1   ; <float> [#uses=1]
  %320 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %321 = extractelement <4 x float> %320, i32 3   ; <float> [#uses=1]
  %322 = fmul float %319, %321                    ; <float> [#uses=1]
  %323 = fadd float %317, %322                    ; <float> [#uses=1]
  %324 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %325 = extractelement <4 x float> %324, i32 2   ; <float> [#uses=1]
  %326 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %327 = extractelement <4 x float> %326, i32 3   ; <float> [#uses=1]
  %328 = fmul float %325, %327                    ; <float> [#uses=1]
  %329 = fadd float %323, %328                    ; <float> [#uses=1]
  %330 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %331 = extractelement <4 x float> %330, i32 3   ; <float> [#uses=1]
  %332 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %333 = extractelement <4 x float> %332, i32 3   ; <float> [#uses=1]
  %334 = fmul float %331, %333                    ; <float> [#uses=1]
  %335 = fadd float %329, %334                    ; <float> [#uses=1]
  %336 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %337 = extractelement <4 x float> %336, i32 3   ; <float> [#uses=1]
  %338 = fadd float %337, %335                    ; <float> [#uses=1]
  %339 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %340 = insertelement <4 x float> %339, float %338, i32 3 ; <<4 x float>> [#uses=1]
  store <4 x float> %340, <4 x float>* %sum1
  %341 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %342 = extractelement <4 x float> %341, i32 0   ; <float> [#uses=1]
  %343 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %344 = extractelement <4 x float> %343, i32 0   ; <float> [#uses=1]
  %345 = fmul float %342, %344                    ; <float> [#uses=1]
  %346 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %347 = extractelement <4 x float> %346, i32 1   ; <float> [#uses=1]
  %348 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %349 = extractelement <4 x float> %348, i32 0   ; <float> [#uses=1]
  %350 = fmul float %347, %349                    ; <float> [#uses=1]
  %351 = fadd float %345, %350                    ; <float> [#uses=1]
  %352 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %353 = extractelement <4 x float> %352, i32 2   ; <float> [#uses=1]
  %354 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %355 = extractelement <4 x float> %354, i32 0   ; <float> [#uses=1]
  %356 = fmul float %353, %355                    ; <float> [#uses=1]
  %357 = fadd float %351, %356                    ; <float> [#uses=1]
  %358 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %359 = extractelement <4 x float> %358, i32 3   ; <float> [#uses=1]
  %360 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %361 = extractelement <4 x float> %360, i32 0   ; <float> [#uses=1]
  %362 = fmul float %359, %361                    ; <float> [#uses=1]
  %363 = fadd float %357, %362                    ; <float> [#uses=1]
  %364 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %365 = extractelement <4 x float> %364, i32 0   ; <float> [#uses=1]
  %366 = fadd float %365, %363                    ; <float> [#uses=1]
  %367 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %368 = insertelement <4 x float> %367, float %366, i32 0 ; <<4 x float>> [#uses=1]
  store <4 x float> %368, <4 x float>* %sum2
  %369 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %370 = extractelement <4 x float> %369, i32 0   ; <float> [#uses=1]
  %371 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %372 = extractelement <4 x float> %371, i32 1   ; <float> [#uses=1]
  %373 = fmul float %370, %372                    ; <float> [#uses=1]
  %374 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %375 = extractelement <4 x float> %374, i32 1   ; <float> [#uses=1]
  %376 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %377 = extractelement <4 x float> %376, i32 1   ; <float> [#uses=1]
  %378 = fmul float %375, %377                    ; <float> [#uses=1]
  %379 = fadd float %373, %378                    ; <float> [#uses=1]
  %380 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %381 = extractelement <4 x float> %380, i32 2   ; <float> [#uses=1]
  %382 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %383 = extractelement <4 x float> %382, i32 1   ; <float> [#uses=1]
  %384 = fmul float %381, %383                    ; <float> [#uses=1]
  %385 = fadd float %379, %384                    ; <float> [#uses=1]
  %386 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %387 = extractelement <4 x float> %386, i32 3   ; <float> [#uses=1]
  %388 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %389 = extractelement <4 x float> %388, i32 1   ; <float> [#uses=1]
  %390 = fmul float %387, %389                    ; <float> [#uses=1]
  %391 = fadd float %385, %390                    ; <float> [#uses=1]
  %392 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %393 = extractelement <4 x float> %392, i32 1   ; <float> [#uses=1]
  %394 = fadd float %393, %391                    ; <float> [#uses=1]
  %395 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %396 = insertelement <4 x float> %395, float %394, i32 1 ; <<4 x float>> [#uses=1]
  store <4 x float> %396, <4 x float>* %sum2
  %397 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %398 = extractelement <4 x float> %397, i32 0   ; <float> [#uses=1]
  %399 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %400 = extractelement <4 x float> %399, i32 2   ; <float> [#uses=1]
  %401 = fmul float %398, %400                    ; <float> [#uses=1]
  %402 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %403 = extractelement <4 x float> %402, i32 1   ; <float> [#uses=1]
  %404 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %405 = extractelement <4 x float> %404, i32 2   ; <float> [#uses=1]
  %406 = fmul float %403, %405                    ; <float> [#uses=1]
  %407 = fadd float %401, %406                    ; <float> [#uses=1]
  %408 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %409 = extractelement <4 x float> %408, i32 2   ; <float> [#uses=1]
  %410 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %411 = extractelement <4 x float> %410, i32 2   ; <float> [#uses=1]
  %412 = fmul float %409, %411                    ; <float> [#uses=1]
  %413 = fadd float %407, %412                    ; <float> [#uses=1]
  %414 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %415 = extractelement <4 x float> %414, i32 3   ; <float> [#uses=1]
  %416 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %417 = extractelement <4 x float> %416, i32 2   ; <float> [#uses=1]
  %418 = fmul float %415, %417                    ; <float> [#uses=1]
  %419 = fadd float %413, %418                    ; <float> [#uses=1]
  %420 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %421 = extractelement <4 x float> %420, i32 2   ; <float> [#uses=1]
  %422 = fadd float %421, %419                    ; <float> [#uses=1]
  %423 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %424 = insertelement <4 x float> %423, float %422, i32 2 ; <<4 x float>> [#uses=1]
  store <4 x float> %424, <4 x float>* %sum2
  %425 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %426 = extractelement <4 x float> %425, i32 0   ; <float> [#uses=1]
  %427 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %428 = extractelement <4 x float> %427, i32 3   ; <float> [#uses=1]
  %429 = fmul float %426, %428                    ; <float> [#uses=1]
  %430 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %431 = extractelement <4 x float> %430, i32 1   ; <float> [#uses=1]
  %432 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %433 = extractelement <4 x float> %432, i32 3   ; <float> [#uses=1]
  %434 = fmul float %431, %433                    ; <float> [#uses=1]
  %435 = fadd float %429, %434                    ; <float> [#uses=1]
  %436 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %437 = extractelement <4 x float> %436, i32 2   ; <float> [#uses=1]
  %438 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %439 = extractelement <4 x float> %438, i32 3   ; <float> [#uses=1]
  %440 = fmul float %437, %439                    ; <float> [#uses=1]
  %441 = fadd float %435, %440                    ; <float> [#uses=1]
  %442 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %443 = extractelement <4 x float> %442, i32 3   ; <float> [#uses=1]
  %444 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %445 = extractelement <4 x float> %444, i32 3   ; <float> [#uses=1]
  %446 = fmul float %443, %445                    ; <float> [#uses=1]
  %447 = fadd float %441, %446                    ; <float> [#uses=1]
  %448 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %449 = extractelement <4 x float> %448, i32 3   ; <float> [#uses=1]
  %450 = fadd float %449, %447                    ; <float> [#uses=1]
  %451 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %452 = insertelement <4 x float> %451, float %450, i32 3 ; <<4 x float>> [#uses=1]
  store <4 x float> %452, <4 x float>* %sum2
  %453 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %454 = extractelement <4 x float> %453, i32 0   ; <float> [#uses=1]
  %455 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %456 = extractelement <4 x float> %455, i32 0   ; <float> [#uses=1]
  %457 = fmul float %454, %456                    ; <float> [#uses=1]
  %458 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %459 = extractelement <4 x float> %458, i32 1   ; <float> [#uses=1]
  %460 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %461 = extractelement <4 x float> %460, i32 0   ; <float> [#uses=1]
  %462 = fmul float %459, %461                    ; <float> [#uses=1]
  %463 = fadd float %457, %462                    ; <float> [#uses=1]
  %464 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %465 = extractelement <4 x float> %464, i32 2   ; <float> [#uses=1]
  %466 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %467 = extractelement <4 x float> %466, i32 0   ; <float> [#uses=1]
  %468 = fmul float %465, %467                    ; <float> [#uses=1]
  %469 = fadd float %463, %468                    ; <float> [#uses=1]
  %470 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %471 = extractelement <4 x float> %470, i32 3   ; <float> [#uses=1]
  %472 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %473 = extractelement <4 x float> %472, i32 0   ; <float> [#uses=1]
  %474 = fmul float %471, %473                    ; <float> [#uses=1]
  %475 = fadd float %469, %474                    ; <float> [#uses=1]
  %476 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %477 = extractelement <4 x float> %476, i32 0   ; <float> [#uses=1]
  %478 = fadd float %477, %475                    ; <float> [#uses=1]
  %479 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %480 = insertelement <4 x float> %479, float %478, i32 0 ; <<4 x float>> [#uses=1]
  store <4 x float> %480, <4 x float>* %sum3
  %481 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %482 = extractelement <4 x float> %481, i32 0   ; <float> [#uses=1]
  %483 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %484 = extractelement <4 x float> %483, i32 1   ; <float> [#uses=1]
  %485 = fmul float %482, %484                    ; <float> [#uses=1]
  %486 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %487 = extractelement <4 x float> %486, i32 1   ; <float> [#uses=1]
  %488 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %489 = extractelement <4 x float> %488, i32 1   ; <float> [#uses=1]
  %490 = fmul float %487, %489                    ; <float> [#uses=1]
  %491 = fadd float %485, %490                    ; <float> [#uses=1]
  %492 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %493 = extractelement <4 x float> %492, i32 2   ; <float> [#uses=1]
  %494 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %495 = extractelement <4 x float> %494, i32 1   ; <float> [#uses=1]
  %496 = fmul float %493, %495                    ; <float> [#uses=1]
  %497 = fadd float %491, %496                    ; <float> [#uses=1]
  %498 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %499 = extractelement <4 x float> %498, i32 3   ; <float> [#uses=1]
  %500 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %501 = extractelement <4 x float> %500, i32 1   ; <float> [#uses=1]
  %502 = fmul float %499, %501                    ; <float> [#uses=1]
  %503 = fadd float %497, %502                    ; <float> [#uses=1]
  %504 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %505 = extractelement <4 x float> %504, i32 1   ; <float> [#uses=1]
  %506 = fadd float %505, %503                    ; <float> [#uses=1]
  %507 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %508 = insertelement <4 x float> %507, float %506, i32 1 ; <<4 x float>> [#uses=1]
  store <4 x float> %508, <4 x float>* %sum3
  %509 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %510 = extractelement <4 x float> %509, i32 0   ; <float> [#uses=1]
  %511 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %512 = extractelement <4 x float> %511, i32 2   ; <float> [#uses=1]
  %513 = fmul float %510, %512                    ; <float> [#uses=1]
  %514 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %515 = extractelement <4 x float> %514, i32 1   ; <float> [#uses=1]
  %516 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %517 = extractelement <4 x float> %516, i32 2   ; <float> [#uses=1]
  %518 = fmul float %515, %517                    ; <float> [#uses=1]
  %519 = fadd float %513, %518                    ; <float> [#uses=1]
  %520 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %521 = extractelement <4 x float> %520, i32 2   ; <float> [#uses=1]
  %522 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %523 = extractelement <4 x float> %522, i32 2   ; <float> [#uses=1]
  %524 = fmul float %521, %523                    ; <float> [#uses=1]
  %525 = fadd float %519, %524                    ; <float> [#uses=1]
  %526 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %527 = extractelement <4 x float> %526, i32 3   ; <float> [#uses=1]
  %528 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %529 = extractelement <4 x float> %528, i32 2   ; <float> [#uses=1]
  %530 = fmul float %527, %529                    ; <float> [#uses=1]
  %531 = fadd float %525, %530                    ; <float> [#uses=1]
  %532 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %533 = extractelement <4 x float> %532, i32 2   ; <float> [#uses=1]
  %534 = fadd float %533, %531                    ; <float> [#uses=1]
  %535 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %536 = insertelement <4 x float> %535, float %534, i32 2 ; <<4 x float>> [#uses=1]
  store <4 x float> %536, <4 x float>* %sum3
  %537 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %538 = extractelement <4 x float> %537, i32 0   ; <float> [#uses=1]
  %539 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %540 = extractelement <4 x float> %539, i32 3   ; <float> [#uses=1]
  %541 = fmul float %538, %540                    ; <float> [#uses=1]
  %542 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %543 = extractelement <4 x float> %542, i32 1   ; <float> [#uses=1]
  %544 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %545 = extractelement <4 x float> %544, i32 3   ; <float> [#uses=1]
  %546 = fmul float %543, %545                    ; <float> [#uses=1]
  %547 = fadd float %541, %546                    ; <float> [#uses=1]
  %548 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %549 = extractelement <4 x float> %548, i32 2   ; <float> [#uses=1]
  %550 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %551 = extractelement <4 x float> %550, i32 3   ; <float> [#uses=1]
  %552 = fmul float %549, %551                    ; <float> [#uses=1]
  %553 = fadd float %547, %552                    ; <float> [#uses=1]
  %554 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %555 = extractelement <4 x float> %554, i32 3   ; <float> [#uses=1]
  %556 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %557 = extractelement <4 x float> %556, i32 3   ; <float> [#uses=1]
  %558 = fmul float %555, %557                    ; <float> [#uses=1]
  %559 = fadd float %553, %558                    ; <float> [#uses=1]
  %560 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %561 = extractelement <4 x float> %560, i32 3   ; <float> [#uses=1]
  %562 = fadd float %561, %559                    ; <float> [#uses=1]
  %563 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %564 = insertelement <4 x float> %563, float %562, i32 3 ; <<4 x float>> [#uses=1]
  store <4 x float> %564, <4 x float>* %sum3
  br label %565

; <label>:565                                     ; preds = %26
  %566 = load i32* %i                             ; <i32> [#uses=1]
  %567 = add nsw i32 %566, 4                      ; <i32> [#uses=1]
  store i32 %567, i32* %i
  br label %22

; <label>:568                                     ; preds = %22
  %569 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %570 = load <2 x i32>* %pos                     ; <<2 x i32>> [#uses=1]
  %571 = extractelement <2 x i32> %570, i32 0     ; <i32> [#uses=1]
  %572 = load <2 x i32>* %pos                     ; <<2 x i32>> [#uses=1]
  %573 = extractelement <2 x i32> %572, i32 1     ; <i32> [#uses=1]
  %574 = shl i32 %573, 2                          ; <i32> [#uses=1]
  %575 = add nsw i32 %574, 0                      ; <i32> [#uses=1]
  %576 = load i32* %5                             ; <i32> [#uses=1]
  %577 = mul i32 %575, %576                       ; <i32> [#uses=1]
  %578 = add i32 %571, %577                       ; <i32> [#uses=1]
  %579 = load <4 x float> addrspace(1)** %3       ; <<4 x float> addrspace(1)*> [#uses=1]
  %580 = getelementptr inbounds <4 x float> addrspace(1)* %579, i32 %578 ; <<4 x float> addrspace(1)*> [#uses=1]
  store <4 x float> %569, <4 x float> addrspace(1)* %580
  %581 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %582 = load <2 x i32>* %pos                     ; <<2 x i32>> [#uses=1]
  %583 = extractelement <2 x i32> %582, i32 0     ; <i32> [#uses=1]
  %584 = load <2 x i32>* %pos                     ; <<2 x i32>> [#uses=1]
  %585 = extractelement <2 x i32> %584, i32 1     ; <i32> [#uses=1]
  %586 = shl i32 %585, 2                          ; <i32> [#uses=1]
  %587 = add nsw i32 %586, 1                      ; <i32> [#uses=1]
  %588 = load i32* %5                             ; <i32> [#uses=1]
  %589 = mul i32 %587, %588                       ; <i32> [#uses=1]
  %590 = add i32 %583, %589                       ; <i32> [#uses=1]
  %591 = load <4 x float> addrspace(1)** %3       ; <<4 x float> addrspace(1)*> [#uses=1]
  %592 = getelementptr inbounds <4 x float> addrspace(1)* %591, i32 %590 ; <<4 x float> addrspace(1)*> [#uses=1]
  store <4 x float> %581, <4 x float> addrspace(1)* %592
  %593 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %594 = load <2 x i32>* %pos                     ; <<2 x i32>> [#uses=1]
  %595 = extractelement <2 x i32> %594, i32 0     ; <i32> [#uses=1]
  %596 = load <2 x i32>* %pos                     ; <<2 x i32>> [#uses=1]
  %597 = extractelement <2 x i32> %596, i32 1     ; <i32> [#uses=1]
  %598 = shl i32 %597, 2                          ; <i32> [#uses=1]
  %599 = add nsw i32 %598, 2                      ; <i32> [#uses=1]
  %600 = load i32* %5                             ; <i32> [#uses=1]
  %601 = mul i32 %599, %600                       ; <i32> [#uses=1]
  %602 = add i32 %595, %601                       ; <i32> [#uses=1]
  %603 = load <4 x float> addrspace(1)** %3       ; <<4 x float> addrspace(1)*> [#uses=1]
  %604 = getelementptr inbounds <4 x float> addrspace(1)* %603, i32 %602 ; <<4 x float> addrspace(1)*> [#uses=1]
  store <4 x float> %593, <4 x float> addrspace(1)* %604
  %605 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %606 = load <2 x i32>* %pos                     ; <<2 x i32>> [#uses=1]
  %607 = extractelement <2 x i32> %606, i32 0     ; <i32> [#uses=1]
  %608 = load <2 x i32>* %pos                     ; <<2 x i32>> [#uses=1]
  %609 = extractelement <2 x i32> %608, i32 1     ; <i32> [#uses=1]
  %610 = shl i32 %609, 2                          ; <i32> [#uses=1]
  %611 = add nsw i32 %610, 3                      ; <i32> [#uses=1]
  %612 = load i32* %5                             ; <i32> [#uses=1]
  %613 = mul i32 %611, %612                       ; <i32> [#uses=1]
  %614 = add i32 %607, %613                       ; <i32> [#uses=1]
  %615 = load <4 x float> addrspace(1)** %3       ; <<4 x float> addrspace(1)*> [#uses=1]
  %616 = getelementptr inbounds <4 x float> addrspace(1)* %615, i32 %614 ; <<4 x float> addrspace(1)*> [#uses=1]
  store <4 x float> %605, <4 x float> addrspace(1)* %616
  ret void
}

declare i32 @get_global_id(i32)

define void @mmmKernel_local(<4 x float> addrspace(1)* %matrixA, <4 x float> addrspace(1)* %matrixB, <4 x float> addrspace(1)* %matrixC, i32 %widthA, <4 x float> addrspace(3)* %blockA) nounwind {
  %1 = alloca <4 x float> addrspace(1)*, align 16 ; <<4 x float> addrspace(1)**> [#uses=5]
  %2 = alloca <4 x float> addrspace(1)*, align 16 ; <<4 x float> addrspace(1)**> [#uses=5]
  %3 = alloca <4 x float> addrspace(1)*, align 16 ; <<4 x float> addrspace(1)**> [#uses=5]
  %4 = alloca i32, align 4                        ; <i32*> [#uses=2]
  %5 = alloca <4 x float> addrspace(3)*, align 16 ; <<4 x float> addrspace(3)**> [#uses=9]
  %blockPos = alloca i32, align 4                 ; <i32*> [#uses=5]
  %globalPos = alloca i32, align 4                ; <i32*> [#uses=5]
  %sum0 = alloca <4 x float>, align 16            ; <<4 x float>*> [#uses=14]
  %6 = alloca <4 x float>, align 16               ; <<4 x float>*> [#uses=2]
  %sum1 = alloca <4 x float>, align 16            ; <<4 x float>*> [#uses=14]
  %7 = alloca <4 x float>, align 16               ; <<4 x float>*> [#uses=2]
  %sum2 = alloca <4 x float>, align 16            ; <<4 x float>*> [#uses=14]
  %8 = alloca <4 x float>, align 16               ; <<4 x float>*> [#uses=2]
  %sum3 = alloca <4 x float>, align 16            ; <<4 x float>*> [#uses=14]
  %9 = alloca <4 x float>, align 16               ; <<4 x float>*> [#uses=2]
  %temp = alloca i32, align 4                     ; <i32*> [#uses=6]
  %i = alloca i32, align 4                        ; <i32*> [#uses=6]
  %globalPosA = alloca i32, align 4               ; <i32*> [#uses=5]
  %globalPosB = alloca i32, align 4               ; <i32*> [#uses=5]
  %j = alloca i32, align 4                        ; <i32*> [#uses=12]
  %tempA0 = alloca <4 x float>, align 16          ; <<4 x float>*> [#uses=17]
  %tempA1 = alloca <4 x float>, align 16          ; <<4 x float>*> [#uses=17]
  %tempA2 = alloca <4 x float>, align 16          ; <<4 x float>*> [#uses=17]
  %tempA3 = alloca <4 x float>, align 16          ; <<4 x float>*> [#uses=17]
  %tempB0 = alloca <4 x float>, align 16          ; <<4 x float>*> [#uses=17]
  %tempB1 = alloca <4 x float>, align 16          ; <<4 x float>*> [#uses=17]
  %tempB2 = alloca <4 x float>, align 16          ; <<4 x float>*> [#uses=17]
  %tempB3 = alloca <4 x float>, align 16          ; <<4 x float>*> [#uses=17]
  store <4 x float> addrspace(1)* %matrixA, <4 x float> addrspace(1)** %1
  store <4 x float> addrspace(1)* %matrixB, <4 x float> addrspace(1)** %2
  store <4 x float> addrspace(1)* %matrixC, <4 x float> addrspace(1)** %3
  store i32 %widthA, i32* %4
  store <4 x float> addrspace(3)* %blockA, <4 x float> addrspace(3)** %5
  %10 = call i32 @get_local_id(i32 0)             ; <i32> [#uses=1]
  %11 = call i32 @get_local_size(i32 0)           ; <i32> [#uses=1]
  %12 = call i32 @get_local_id(i32 1)             ; <i32> [#uses=1]
  %13 = shl i32 %12, 2                            ; <i32> [#uses=1]
  %14 = mul i32 %11, %13                          ; <i32> [#uses=1]
  %15 = add i32 %10, %14                          ; <i32> [#uses=1]
  store i32 %15, i32* %blockPos
  %16 = call i32 @get_global_id(i32 0)            ; <i32> [#uses=1]
  %17 = call i32 @get_global_id(i32 1)            ; <i32> [#uses=1]
  %18 = shl i32 %17, 2                            ; <i32> [#uses=1]
  %19 = call i32 @get_global_size(i32 0)          ; <i32> [#uses=1]
  %20 = mul i32 %18, %19                          ; <i32> [#uses=1]
  %21 = add i32 %16, %20                          ; <i32> [#uses=1]
  store i32 %21, i32* %globalPos
  store <4 x float> zeroinitializer, <4 x float>* %6
  %22 = load <4 x float>* %6                      ; <<4 x float>> [#uses=1]
  store <4 x float> %22, <4 x float>* %sum0
  store <4 x float> zeroinitializer, <4 x float>* %7
  %23 = load <4 x float>* %7                      ; <<4 x float>> [#uses=1]
  store <4 x float> %23, <4 x float>* %sum1
  store <4 x float> zeroinitializer, <4 x float>* %8
  %24 = load <4 x float>* %8                      ; <<4 x float>> [#uses=1]
  store <4 x float> %24, <4 x float>* %sum2
  store <4 x float> zeroinitializer, <4 x float>* %9
  %25 = load <4 x float>* %9                      ; <<4 x float>> [#uses=1]
  store <4 x float> %25, <4 x float>* %sum3
  %26 = load i32* %4                              ; <i32> [#uses=1]
  %27 = sdiv i32 %26, 4                           ; <i32> [#uses=1]
  store i32 %27, i32* %temp
  store i32 0, i32* %i
  br label %28

; <label>:28                                      ; preds = %633, %0
  %29 = load i32* %i                              ; <i32> [#uses=1]
  %30 = load i32* %temp                           ; <i32> [#uses=1]
  %31 = call i32 @get_local_size(i32 0)           ; <i32> [#uses=1]
  %32 = udiv i32 %30, %31                         ; <i32> [#uses=1]
  %33 = icmp ult i32 %29, %32                     ; <i1> [#uses=1]
  br i1 %33, label %34, label %636

; <label>:34                                      ; preds = %28
  %35 = load i32* %i                              ; <i32> [#uses=1]
  %36 = call i32 @get_local_size(i32 0)           ; <i32> [#uses=1]
  %37 = mul i32 %35, %36                          ; <i32> [#uses=1]
  %38 = call i32 @get_local_id(i32 0)             ; <i32> [#uses=1]
  %39 = add i32 %37, %38                          ; <i32> [#uses=1]
  %40 = call i32 @get_global_id(i32 1)            ; <i32> [#uses=1]
  %41 = shl i32 %40, 2                            ; <i32> [#uses=1]
  %42 = load i32* %temp                           ; <i32> [#uses=1]
  %43 = mul i32 %41, %42                          ; <i32> [#uses=1]
  %44 = add i32 %39, %43                          ; <i32> [#uses=1]
  store i32 %44, i32* %globalPosA
  %45 = load i32* %globalPosA                     ; <i32> [#uses=1]
  %46 = load <4 x float> addrspace(1)** %1        ; <<4 x float> addrspace(1)*> [#uses=1]
  %47 = getelementptr inbounds <4 x float> addrspace(1)* %46, i32 %45 ; <<4 x float> addrspace(1)*> [#uses=1]
  %48 = load <4 x float> addrspace(1)* %47        ; <<4 x float>> [#uses=1]
  %49 = load i32* %blockPos                       ; <i32> [#uses=1]
  %50 = load <4 x float> addrspace(3)** %5        ; <<4 x float> addrspace(3)*> [#uses=1]
  %51 = getelementptr inbounds <4 x float> addrspace(3)* %50, i32 %49 ; <<4 x float> addrspace(3)*> [#uses=1]
  store <4 x float> %48, <4 x float> addrspace(3)* %51
  %52 = load i32* %globalPosA                     ; <i32> [#uses=1]
  %53 = load i32* %temp                           ; <i32> [#uses=1]
  %54 = add nsw i32 %52, %53                      ; <i32> [#uses=1]
  %55 = load <4 x float> addrspace(1)** %1        ; <<4 x float> addrspace(1)*> [#uses=1]
  %56 = getelementptr inbounds <4 x float> addrspace(1)* %55, i32 %54 ; <<4 x float> addrspace(1)*> [#uses=1]
  %57 = load <4 x float> addrspace(1)* %56        ; <<4 x float>> [#uses=1]
  %58 = load i32* %blockPos                       ; <i32> [#uses=1]
  %59 = call i32 @get_local_size(i32 0)           ; <i32> [#uses=1]
  %60 = add i32 %58, %59                          ; <i32> [#uses=1]
  %61 = load <4 x float> addrspace(3)** %5        ; <<4 x float> addrspace(3)*> [#uses=1]
  %62 = getelementptr inbounds <4 x float> addrspace(3)* %61, i32 %60 ; <<4 x float> addrspace(3)*> [#uses=1]
  store <4 x float> %57, <4 x float> addrspace(3)* %62
  %63 = load i32* %globalPosA                     ; <i32> [#uses=1]
  %64 = load i32* %temp                           ; <i32> [#uses=1]
  %65 = mul i32 2, %64                            ; <i32> [#uses=1]
  %66 = add nsw i32 %63, %65                      ; <i32> [#uses=1]
  %67 = load <4 x float> addrspace(1)** %1        ; <<4 x float> addrspace(1)*> [#uses=1]
  %68 = getelementptr inbounds <4 x float> addrspace(1)* %67, i32 %66 ; <<4 x float> addrspace(1)*> [#uses=1]
  %69 = load <4 x float> addrspace(1)* %68        ; <<4 x float>> [#uses=1]
  %70 = load i32* %blockPos                       ; <i32> [#uses=1]
  %71 = call i32 @get_local_size(i32 0)           ; <i32> [#uses=1]
  %72 = mul i32 2, %71                            ; <i32> [#uses=1]
  %73 = add i32 %70, %72                          ; <i32> [#uses=1]
  %74 = load <4 x float> addrspace(3)** %5        ; <<4 x float> addrspace(3)*> [#uses=1]
  %75 = getelementptr inbounds <4 x float> addrspace(3)* %74, i32 %73 ; <<4 x float> addrspace(3)*> [#uses=1]
  store <4 x float> %69, <4 x float> addrspace(3)* %75
  %76 = load i32* %globalPosA                     ; <i32> [#uses=1]
  %77 = load i32* %temp                           ; <i32> [#uses=1]
  %78 = mul i32 3, %77                            ; <i32> [#uses=1]
  %79 = add nsw i32 %76, %78                      ; <i32> [#uses=1]
  %80 = load <4 x float> addrspace(1)** %1        ; <<4 x float> addrspace(1)*> [#uses=1]
  %81 = getelementptr inbounds <4 x float> addrspace(1)* %80, i32 %79 ; <<4 x float> addrspace(1)*> [#uses=1]
  %82 = load <4 x float> addrspace(1)* %81        ; <<4 x float>> [#uses=1]
  %83 = load i32* %blockPos                       ; <i32> [#uses=1]
  %84 = call i32 @get_local_size(i32 0)           ; <i32> [#uses=1]
  %85 = mul i32 3, %84                            ; <i32> [#uses=1]
  %86 = add i32 %83, %85                          ; <i32> [#uses=1]
  %87 = load <4 x float> addrspace(3)** %5        ; <<4 x float> addrspace(3)*> [#uses=1]
  %88 = getelementptr inbounds <4 x float> addrspace(3)* %87, i32 %86 ; <<4 x float> addrspace(3)*> [#uses=1]
  store <4 x float> %82, <4 x float> addrspace(3)* %88
  call void @barrier(i32 1)
  %89 = call i32 @get_global_id(i32 0)            ; <i32> [#uses=1]
  %90 = load i32* %i                              ; <i32> [#uses=1]
  %91 = call i32 @get_local_size(i32 0)           ; <i32> [#uses=1]
  %92 = mul i32 %90, %91                          ; <i32> [#uses=1]
  %93 = shl i32 %92, 2                            ; <i32> [#uses=1]
  %94 = call i32 @get_global_size(i32 0)          ; <i32> [#uses=1]
  %95 = mul i32 %93, %94                          ; <i32> [#uses=1]
  %96 = add i32 %89, %95                          ; <i32> [#uses=1]
  store i32 %96, i32* %globalPosB
  store i32 0, i32* %j
  br label %97

; <label>:97                                      ; preds = %629, %34
  %98 = load i32* %j                              ; <i32> [#uses=1]
  %99 = call i32 @get_local_size(i32 0)           ; <i32> [#uses=1]
  %100 = mul i32 %99, 4                           ; <i32> [#uses=1]
  %101 = icmp ult i32 %98, %100                   ; <i1> [#uses=1]
  br i1 %101, label %102, label %632

; <label>:102                                     ; preds = %97
  %103 = load i32* %j                             ; <i32> [#uses=1]
  %104 = ashr i32 %103, 2                         ; <i32> [#uses=1]
  %105 = call i32 @get_local_id(i32 1)            ; <i32> [#uses=1]
  %106 = mul i32 %105, 4                          ; <i32> [#uses=1]
  %107 = call i32 @get_local_size(i32 0)          ; <i32> [#uses=1]
  %108 = mul i32 %106, %107                       ; <i32> [#uses=1]
  %109 = add i32 %104, %108                       ; <i32> [#uses=1]
  %110 = load <4 x float> addrspace(3)** %5       ; <<4 x float> addrspace(3)*> [#uses=1]
  %111 = getelementptr inbounds <4 x float> addrspace(3)* %110, i32 %109 ; <<4 x float> addrspace(3)*> [#uses=1]
  %112 = load <4 x float> addrspace(3)* %111      ; <<4 x float>> [#uses=1]
  store <4 x float> %112, <4 x float>* %tempA0
  %113 = load i32* %j                             ; <i32> [#uses=1]
  %114 = ashr i32 %113, 2                         ; <i32> [#uses=1]
  %115 = call i32 @get_local_id(i32 1)            ; <i32> [#uses=1]
  %116 = mul i32 %115, 4                          ; <i32> [#uses=1]
  %117 = add i32 %116, 1                          ; <i32> [#uses=1]
  %118 = call i32 @get_local_size(i32 0)          ; <i32> [#uses=1]
  %119 = mul i32 %117, %118                       ; <i32> [#uses=1]
  %120 = add i32 %114, %119                       ; <i32> [#uses=1]
  %121 = load <4 x float> addrspace(3)** %5       ; <<4 x float> addrspace(3)*> [#uses=1]
  %122 = getelementptr inbounds <4 x float> addrspace(3)* %121, i32 %120 ; <<4 x float> addrspace(3)*> [#uses=1]
  %123 = load <4 x float> addrspace(3)* %122      ; <<4 x float>> [#uses=1]
  store <4 x float> %123, <4 x float>* %tempA1
  %124 = load i32* %j                             ; <i32> [#uses=1]
  %125 = ashr i32 %124, 2                         ; <i32> [#uses=1]
  %126 = call i32 @get_local_id(i32 1)            ; <i32> [#uses=1]
  %127 = mul i32 %126, 4                          ; <i32> [#uses=1]
  %128 = add i32 %127, 2                          ; <i32> [#uses=1]
  %129 = call i32 @get_local_size(i32 0)          ; <i32> [#uses=1]
  %130 = mul i32 %128, %129                       ; <i32> [#uses=1]
  %131 = add i32 %125, %130                       ; <i32> [#uses=1]
  %132 = load <4 x float> addrspace(3)** %5       ; <<4 x float> addrspace(3)*> [#uses=1]
  %133 = getelementptr inbounds <4 x float> addrspace(3)* %132, i32 %131 ; <<4 x float> addrspace(3)*> [#uses=1]
  %134 = load <4 x float> addrspace(3)* %133      ; <<4 x float>> [#uses=1]
  store <4 x float> %134, <4 x float>* %tempA2
  %135 = load i32* %j                             ; <i32> [#uses=1]
  %136 = ashr i32 %135, 2                         ; <i32> [#uses=1]
  %137 = call i32 @get_local_id(i32 1)            ; <i32> [#uses=1]
  %138 = mul i32 %137, 4                          ; <i32> [#uses=1]
  %139 = add i32 %138, 3                          ; <i32> [#uses=1]
  %140 = call i32 @get_local_size(i32 0)          ; <i32> [#uses=1]
  %141 = mul i32 %139, %140                       ; <i32> [#uses=1]
  %142 = add i32 %136, %141                       ; <i32> [#uses=1]
  %143 = load <4 x float> addrspace(3)** %5       ; <<4 x float> addrspace(3)*> [#uses=1]
  %144 = getelementptr inbounds <4 x float> addrspace(3)* %143, i32 %142 ; <<4 x float> addrspace(3)*> [#uses=1]
  %145 = load <4 x float> addrspace(3)* %144      ; <<4 x float>> [#uses=1]
  store <4 x float> %145, <4 x float>* %tempA3
  %146 = load i32* %globalPosB                    ; <i32> [#uses=1]
  %147 = load i32* %j                             ; <i32> [#uses=1]
  %148 = call i32 @get_global_size(i32 0)         ; <i32> [#uses=1]
  %149 = mul i32 %147, %148                       ; <i32> [#uses=1]
  %150 = add i32 %146, %149                       ; <i32> [#uses=1]
  %151 = load <4 x float> addrspace(1)** %2       ; <<4 x float> addrspace(1)*> [#uses=1]
  %152 = getelementptr inbounds <4 x float> addrspace(1)* %151, i32 %150 ; <<4 x float> addrspace(1)*> [#uses=1]
  %153 = load <4 x float> addrspace(1)* %152      ; <<4 x float>> [#uses=1]
  store <4 x float> %153, <4 x float>* %tempB0
  %154 = load i32* %globalPosB                    ; <i32> [#uses=1]
  %155 = load i32* %j                             ; <i32> [#uses=1]
  %156 = add nsw i32 %155, 1                      ; <i32> [#uses=1]
  %157 = call i32 @get_global_size(i32 0)         ; <i32> [#uses=1]
  %158 = mul i32 %156, %157                       ; <i32> [#uses=1]
  %159 = add i32 %154, %158                       ; <i32> [#uses=1]
  %160 = load <4 x float> addrspace(1)** %2       ; <<4 x float> addrspace(1)*> [#uses=1]
  %161 = getelementptr inbounds <4 x float> addrspace(1)* %160, i32 %159 ; <<4 x float> addrspace(1)*> [#uses=1]
  %162 = load <4 x float> addrspace(1)* %161      ; <<4 x float>> [#uses=1]
  store <4 x float> %162, <4 x float>* %tempB1
  %163 = load i32* %globalPosB                    ; <i32> [#uses=1]
  %164 = load i32* %j                             ; <i32> [#uses=1]
  %165 = add nsw i32 %164, 2                      ; <i32> [#uses=1]
  %166 = call i32 @get_global_size(i32 0)         ; <i32> [#uses=1]
  %167 = mul i32 %165, %166                       ; <i32> [#uses=1]
  %168 = add i32 %163, %167                       ; <i32> [#uses=1]
  %169 = load <4 x float> addrspace(1)** %2       ; <<4 x float> addrspace(1)*> [#uses=1]
  %170 = getelementptr inbounds <4 x float> addrspace(1)* %169, i32 %168 ; <<4 x float> addrspace(1)*> [#uses=1]
  %171 = load <4 x float> addrspace(1)* %170      ; <<4 x float>> [#uses=1]
  store <4 x float> %171, <4 x float>* %tempB2
  %172 = load i32* %globalPosB                    ; <i32> [#uses=1]
  %173 = load i32* %j                             ; <i32> [#uses=1]
  %174 = add nsw i32 %173, 3                      ; <i32> [#uses=1]
  %175 = call i32 @get_global_size(i32 0)         ; <i32> [#uses=1]
  %176 = mul i32 %174, %175                       ; <i32> [#uses=1]
  %177 = add i32 %172, %176                       ; <i32> [#uses=1]
  %178 = load <4 x float> addrspace(1)** %2       ; <<4 x float> addrspace(1)*> [#uses=1]
  %179 = getelementptr inbounds <4 x float> addrspace(1)* %178, i32 %177 ; <<4 x float> addrspace(1)*> [#uses=1]
  %180 = load <4 x float> addrspace(1)* %179      ; <<4 x float>> [#uses=1]
  store <4 x float> %180, <4 x float>* %tempB3
  %181 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %182 = extractelement <4 x float> %181, i32 0   ; <float> [#uses=1]
  %183 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %184 = extractelement <4 x float> %183, i32 0   ; <float> [#uses=1]
  %185 = fmul float %182, %184                    ; <float> [#uses=1]
  %186 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %187 = extractelement <4 x float> %186, i32 1   ; <float> [#uses=1]
  %188 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %189 = extractelement <4 x float> %188, i32 0   ; <float> [#uses=1]
  %190 = fmul float %187, %189                    ; <float> [#uses=1]
  %191 = fadd float %185, %190                    ; <float> [#uses=1]
  %192 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %193 = extractelement <4 x float> %192, i32 2   ; <float> [#uses=1]
  %194 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %195 = extractelement <4 x float> %194, i32 0   ; <float> [#uses=1]
  %196 = fmul float %193, %195                    ; <float> [#uses=1]
  %197 = fadd float %191, %196                    ; <float> [#uses=1]
  %198 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %199 = extractelement <4 x float> %198, i32 3   ; <float> [#uses=1]
  %200 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %201 = extractelement <4 x float> %200, i32 0   ; <float> [#uses=1]
  %202 = fmul float %199, %201                    ; <float> [#uses=1]
  %203 = fadd float %197, %202                    ; <float> [#uses=1]
  %204 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %205 = extractelement <4 x float> %204, i32 0   ; <float> [#uses=1]
  %206 = fadd float %205, %203                    ; <float> [#uses=1]
  %207 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %208 = insertelement <4 x float> %207, float %206, i32 0 ; <<4 x float>> [#uses=1]
  store <4 x float> %208, <4 x float>* %sum0
  %209 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %210 = extractelement <4 x float> %209, i32 0   ; <float> [#uses=1]
  %211 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %212 = extractelement <4 x float> %211, i32 1   ; <float> [#uses=1]
  %213 = fmul float %210, %212                    ; <float> [#uses=1]
  %214 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %215 = extractelement <4 x float> %214, i32 1   ; <float> [#uses=1]
  %216 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %217 = extractelement <4 x float> %216, i32 1   ; <float> [#uses=1]
  %218 = fmul float %215, %217                    ; <float> [#uses=1]
  %219 = fadd float %213, %218                    ; <float> [#uses=1]
  %220 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %221 = extractelement <4 x float> %220, i32 2   ; <float> [#uses=1]
  %222 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %223 = extractelement <4 x float> %222, i32 1   ; <float> [#uses=1]
  %224 = fmul float %221, %223                    ; <float> [#uses=1]
  %225 = fadd float %219, %224                    ; <float> [#uses=1]
  %226 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %227 = extractelement <4 x float> %226, i32 3   ; <float> [#uses=1]
  %228 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %229 = extractelement <4 x float> %228, i32 1   ; <float> [#uses=1]
  %230 = fmul float %227, %229                    ; <float> [#uses=1]
  %231 = fadd float %225, %230                    ; <float> [#uses=1]
  %232 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %233 = extractelement <4 x float> %232, i32 1   ; <float> [#uses=1]
  %234 = fadd float %233, %231                    ; <float> [#uses=1]
  %235 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %236 = insertelement <4 x float> %235, float %234, i32 1 ; <<4 x float>> [#uses=1]
  store <4 x float> %236, <4 x float>* %sum0
  %237 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %238 = extractelement <4 x float> %237, i32 0   ; <float> [#uses=1]
  %239 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %240 = extractelement <4 x float> %239, i32 2   ; <float> [#uses=1]
  %241 = fmul float %238, %240                    ; <float> [#uses=1]
  %242 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %243 = extractelement <4 x float> %242, i32 1   ; <float> [#uses=1]
  %244 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %245 = extractelement <4 x float> %244, i32 2   ; <float> [#uses=1]
  %246 = fmul float %243, %245                    ; <float> [#uses=1]
  %247 = fadd float %241, %246                    ; <float> [#uses=1]
  %248 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %249 = extractelement <4 x float> %248, i32 2   ; <float> [#uses=1]
  %250 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %251 = extractelement <4 x float> %250, i32 2   ; <float> [#uses=1]
  %252 = fmul float %249, %251                    ; <float> [#uses=1]
  %253 = fadd float %247, %252                    ; <float> [#uses=1]
  %254 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %255 = extractelement <4 x float> %254, i32 3   ; <float> [#uses=1]
  %256 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %257 = extractelement <4 x float> %256, i32 2   ; <float> [#uses=1]
  %258 = fmul float %255, %257                    ; <float> [#uses=1]
  %259 = fadd float %253, %258                    ; <float> [#uses=1]
  %260 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %261 = extractelement <4 x float> %260, i32 2   ; <float> [#uses=1]
  %262 = fadd float %261, %259                    ; <float> [#uses=1]
  %263 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %264 = insertelement <4 x float> %263, float %262, i32 2 ; <<4 x float>> [#uses=1]
  store <4 x float> %264, <4 x float>* %sum0
  %265 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %266 = extractelement <4 x float> %265, i32 0   ; <float> [#uses=1]
  %267 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %268 = extractelement <4 x float> %267, i32 3   ; <float> [#uses=1]
  %269 = fmul float %266, %268                    ; <float> [#uses=1]
  %270 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %271 = extractelement <4 x float> %270, i32 1   ; <float> [#uses=1]
  %272 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %273 = extractelement <4 x float> %272, i32 3   ; <float> [#uses=1]
  %274 = fmul float %271, %273                    ; <float> [#uses=1]
  %275 = fadd float %269, %274                    ; <float> [#uses=1]
  %276 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %277 = extractelement <4 x float> %276, i32 2   ; <float> [#uses=1]
  %278 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %279 = extractelement <4 x float> %278, i32 3   ; <float> [#uses=1]
  %280 = fmul float %277, %279                    ; <float> [#uses=1]
  %281 = fadd float %275, %280                    ; <float> [#uses=1]
  %282 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %283 = extractelement <4 x float> %282, i32 3   ; <float> [#uses=1]
  %284 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %285 = extractelement <4 x float> %284, i32 3   ; <float> [#uses=1]
  %286 = fmul float %283, %285                    ; <float> [#uses=1]
  %287 = fadd float %281, %286                    ; <float> [#uses=1]
  %288 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %289 = extractelement <4 x float> %288, i32 3   ; <float> [#uses=1]
  %290 = fadd float %289, %287                    ; <float> [#uses=1]
  %291 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %292 = insertelement <4 x float> %291, float %290, i32 3 ; <<4 x float>> [#uses=1]
  store <4 x float> %292, <4 x float>* %sum0
  %293 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %294 = extractelement <4 x float> %293, i32 0   ; <float> [#uses=1]
  %295 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %296 = extractelement <4 x float> %295, i32 0   ; <float> [#uses=1]
  %297 = fmul float %294, %296                    ; <float> [#uses=1]
  %298 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %299 = extractelement <4 x float> %298, i32 1   ; <float> [#uses=1]
  %300 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %301 = extractelement <4 x float> %300, i32 0   ; <float> [#uses=1]
  %302 = fmul float %299, %301                    ; <float> [#uses=1]
  %303 = fadd float %297, %302                    ; <float> [#uses=1]
  %304 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %305 = extractelement <4 x float> %304, i32 2   ; <float> [#uses=1]
  %306 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %307 = extractelement <4 x float> %306, i32 0   ; <float> [#uses=1]
  %308 = fmul float %305, %307                    ; <float> [#uses=1]
  %309 = fadd float %303, %308                    ; <float> [#uses=1]
  %310 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %311 = extractelement <4 x float> %310, i32 3   ; <float> [#uses=1]
  %312 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %313 = extractelement <4 x float> %312, i32 0   ; <float> [#uses=1]
  %314 = fmul float %311, %313                    ; <float> [#uses=1]
  %315 = fadd float %309, %314                    ; <float> [#uses=1]
  %316 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %317 = extractelement <4 x float> %316, i32 0   ; <float> [#uses=1]
  %318 = fadd float %317, %315                    ; <float> [#uses=1]
  %319 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %320 = insertelement <4 x float> %319, float %318, i32 0 ; <<4 x float>> [#uses=1]
  store <4 x float> %320, <4 x float>* %sum1
  %321 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %322 = extractelement <4 x float> %321, i32 0   ; <float> [#uses=1]
  %323 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %324 = extractelement <4 x float> %323, i32 1   ; <float> [#uses=1]
  %325 = fmul float %322, %324                    ; <float> [#uses=1]
  %326 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %327 = extractelement <4 x float> %326, i32 1   ; <float> [#uses=1]
  %328 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %329 = extractelement <4 x float> %328, i32 1   ; <float> [#uses=1]
  %330 = fmul float %327, %329                    ; <float> [#uses=1]
  %331 = fadd float %325, %330                    ; <float> [#uses=1]
  %332 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %333 = extractelement <4 x float> %332, i32 2   ; <float> [#uses=1]
  %334 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %335 = extractelement <4 x float> %334, i32 1   ; <float> [#uses=1]
  %336 = fmul float %333, %335                    ; <float> [#uses=1]
  %337 = fadd float %331, %336                    ; <float> [#uses=1]
  %338 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %339 = extractelement <4 x float> %338, i32 3   ; <float> [#uses=1]
  %340 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %341 = extractelement <4 x float> %340, i32 1   ; <float> [#uses=1]
  %342 = fmul float %339, %341                    ; <float> [#uses=1]
  %343 = fadd float %337, %342                    ; <float> [#uses=1]
  %344 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %345 = extractelement <4 x float> %344, i32 1   ; <float> [#uses=1]
  %346 = fadd float %345, %343                    ; <float> [#uses=1]
  %347 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %348 = insertelement <4 x float> %347, float %346, i32 1 ; <<4 x float>> [#uses=1]
  store <4 x float> %348, <4 x float>* %sum1
  %349 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %350 = extractelement <4 x float> %349, i32 0   ; <float> [#uses=1]
  %351 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %352 = extractelement <4 x float> %351, i32 2   ; <float> [#uses=1]
  %353 = fmul float %350, %352                    ; <float> [#uses=1]
  %354 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %355 = extractelement <4 x float> %354, i32 1   ; <float> [#uses=1]
  %356 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %357 = extractelement <4 x float> %356, i32 2   ; <float> [#uses=1]
  %358 = fmul float %355, %357                    ; <float> [#uses=1]
  %359 = fadd float %353, %358                    ; <float> [#uses=1]
  %360 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %361 = extractelement <4 x float> %360, i32 2   ; <float> [#uses=1]
  %362 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %363 = extractelement <4 x float> %362, i32 2   ; <float> [#uses=1]
  %364 = fmul float %361, %363                    ; <float> [#uses=1]
  %365 = fadd float %359, %364                    ; <float> [#uses=1]
  %366 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %367 = extractelement <4 x float> %366, i32 3   ; <float> [#uses=1]
  %368 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %369 = extractelement <4 x float> %368, i32 2   ; <float> [#uses=1]
  %370 = fmul float %367, %369                    ; <float> [#uses=1]
  %371 = fadd float %365, %370                    ; <float> [#uses=1]
  %372 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %373 = extractelement <4 x float> %372, i32 2   ; <float> [#uses=1]
  %374 = fadd float %373, %371                    ; <float> [#uses=1]
  %375 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %376 = insertelement <4 x float> %375, float %374, i32 2 ; <<4 x float>> [#uses=1]
  store <4 x float> %376, <4 x float>* %sum1
  %377 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %378 = extractelement <4 x float> %377, i32 0   ; <float> [#uses=1]
  %379 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %380 = extractelement <4 x float> %379, i32 3   ; <float> [#uses=1]
  %381 = fmul float %378, %380                    ; <float> [#uses=1]
  %382 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %383 = extractelement <4 x float> %382, i32 1   ; <float> [#uses=1]
  %384 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %385 = extractelement <4 x float> %384, i32 3   ; <float> [#uses=1]
  %386 = fmul float %383, %385                    ; <float> [#uses=1]
  %387 = fadd float %381, %386                    ; <float> [#uses=1]
  %388 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %389 = extractelement <4 x float> %388, i32 2   ; <float> [#uses=1]
  %390 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %391 = extractelement <4 x float> %390, i32 3   ; <float> [#uses=1]
  %392 = fmul float %389, %391                    ; <float> [#uses=1]
  %393 = fadd float %387, %392                    ; <float> [#uses=1]
  %394 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %395 = extractelement <4 x float> %394, i32 3   ; <float> [#uses=1]
  %396 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %397 = extractelement <4 x float> %396, i32 3   ; <float> [#uses=1]
  %398 = fmul float %395, %397                    ; <float> [#uses=1]
  %399 = fadd float %393, %398                    ; <float> [#uses=1]
  %400 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %401 = extractelement <4 x float> %400, i32 3   ; <float> [#uses=1]
  %402 = fadd float %401, %399                    ; <float> [#uses=1]
  %403 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %404 = insertelement <4 x float> %403, float %402, i32 3 ; <<4 x float>> [#uses=1]
  store <4 x float> %404, <4 x float>* %sum1
  %405 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %406 = extractelement <4 x float> %405, i32 0   ; <float> [#uses=1]
  %407 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %408 = extractelement <4 x float> %407, i32 0   ; <float> [#uses=1]
  %409 = fmul float %406, %408                    ; <float> [#uses=1]
  %410 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %411 = extractelement <4 x float> %410, i32 1   ; <float> [#uses=1]
  %412 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %413 = extractelement <4 x float> %412, i32 0   ; <float> [#uses=1]
  %414 = fmul float %411, %413                    ; <float> [#uses=1]
  %415 = fadd float %409, %414                    ; <float> [#uses=1]
  %416 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %417 = extractelement <4 x float> %416, i32 2   ; <float> [#uses=1]
  %418 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %419 = extractelement <4 x float> %418, i32 0   ; <float> [#uses=1]
  %420 = fmul float %417, %419                    ; <float> [#uses=1]
  %421 = fadd float %415, %420                    ; <float> [#uses=1]
  %422 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %423 = extractelement <4 x float> %422, i32 3   ; <float> [#uses=1]
  %424 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %425 = extractelement <4 x float> %424, i32 0   ; <float> [#uses=1]
  %426 = fmul float %423, %425                    ; <float> [#uses=1]
  %427 = fadd float %421, %426                    ; <float> [#uses=1]
  %428 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %429 = extractelement <4 x float> %428, i32 0   ; <float> [#uses=1]
  %430 = fadd float %429, %427                    ; <float> [#uses=1]
  %431 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %432 = insertelement <4 x float> %431, float %430, i32 0 ; <<4 x float>> [#uses=1]
  store <4 x float> %432, <4 x float>* %sum2
  %433 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %434 = extractelement <4 x float> %433, i32 0   ; <float> [#uses=1]
  %435 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %436 = extractelement <4 x float> %435, i32 1   ; <float> [#uses=1]
  %437 = fmul float %434, %436                    ; <float> [#uses=1]
  %438 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %439 = extractelement <4 x float> %438, i32 1   ; <float> [#uses=1]
  %440 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %441 = extractelement <4 x float> %440, i32 1   ; <float> [#uses=1]
  %442 = fmul float %439, %441                    ; <float> [#uses=1]
  %443 = fadd float %437, %442                    ; <float> [#uses=1]
  %444 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %445 = extractelement <4 x float> %444, i32 2   ; <float> [#uses=1]
  %446 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %447 = extractelement <4 x float> %446, i32 1   ; <float> [#uses=1]
  %448 = fmul float %445, %447                    ; <float> [#uses=1]
  %449 = fadd float %443, %448                    ; <float> [#uses=1]
  %450 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %451 = extractelement <4 x float> %450, i32 3   ; <float> [#uses=1]
  %452 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %453 = extractelement <4 x float> %452, i32 1   ; <float> [#uses=1]
  %454 = fmul float %451, %453                    ; <float> [#uses=1]
  %455 = fadd float %449, %454                    ; <float> [#uses=1]
  %456 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %457 = extractelement <4 x float> %456, i32 1   ; <float> [#uses=1]
  %458 = fadd float %457, %455                    ; <float> [#uses=1]
  %459 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %460 = insertelement <4 x float> %459, float %458, i32 1 ; <<4 x float>> [#uses=1]
  store <4 x float> %460, <4 x float>* %sum2
  %461 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %462 = extractelement <4 x float> %461, i32 0   ; <float> [#uses=1]
  %463 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %464 = extractelement <4 x float> %463, i32 2   ; <float> [#uses=1]
  %465 = fmul float %462, %464                    ; <float> [#uses=1]
  %466 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %467 = extractelement <4 x float> %466, i32 1   ; <float> [#uses=1]
  %468 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %469 = extractelement <4 x float> %468, i32 2   ; <float> [#uses=1]
  %470 = fmul float %467, %469                    ; <float> [#uses=1]
  %471 = fadd float %465, %470                    ; <float> [#uses=1]
  %472 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %473 = extractelement <4 x float> %472, i32 2   ; <float> [#uses=1]
  %474 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %475 = extractelement <4 x float> %474, i32 2   ; <float> [#uses=1]
  %476 = fmul float %473, %475                    ; <float> [#uses=1]
  %477 = fadd float %471, %476                    ; <float> [#uses=1]
  %478 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %479 = extractelement <4 x float> %478, i32 3   ; <float> [#uses=1]
  %480 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %481 = extractelement <4 x float> %480, i32 2   ; <float> [#uses=1]
  %482 = fmul float %479, %481                    ; <float> [#uses=1]
  %483 = fadd float %477, %482                    ; <float> [#uses=1]
  %484 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %485 = extractelement <4 x float> %484, i32 2   ; <float> [#uses=1]
  %486 = fadd float %485, %483                    ; <float> [#uses=1]
  %487 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %488 = insertelement <4 x float> %487, float %486, i32 2 ; <<4 x float>> [#uses=1]
  store <4 x float> %488, <4 x float>* %sum2
  %489 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %490 = extractelement <4 x float> %489, i32 0   ; <float> [#uses=1]
  %491 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %492 = extractelement <4 x float> %491, i32 3   ; <float> [#uses=1]
  %493 = fmul float %490, %492                    ; <float> [#uses=1]
  %494 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %495 = extractelement <4 x float> %494, i32 1   ; <float> [#uses=1]
  %496 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %497 = extractelement <4 x float> %496, i32 3   ; <float> [#uses=1]
  %498 = fmul float %495, %497                    ; <float> [#uses=1]
  %499 = fadd float %493, %498                    ; <float> [#uses=1]
  %500 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %501 = extractelement <4 x float> %500, i32 2   ; <float> [#uses=1]
  %502 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %503 = extractelement <4 x float> %502, i32 3   ; <float> [#uses=1]
  %504 = fmul float %501, %503                    ; <float> [#uses=1]
  %505 = fadd float %499, %504                    ; <float> [#uses=1]
  %506 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %507 = extractelement <4 x float> %506, i32 3   ; <float> [#uses=1]
  %508 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %509 = extractelement <4 x float> %508, i32 3   ; <float> [#uses=1]
  %510 = fmul float %507, %509                    ; <float> [#uses=1]
  %511 = fadd float %505, %510                    ; <float> [#uses=1]
  %512 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %513 = extractelement <4 x float> %512, i32 3   ; <float> [#uses=1]
  %514 = fadd float %513, %511                    ; <float> [#uses=1]
  %515 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %516 = insertelement <4 x float> %515, float %514, i32 3 ; <<4 x float>> [#uses=1]
  store <4 x float> %516, <4 x float>* %sum2
  %517 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %518 = extractelement <4 x float> %517, i32 0   ; <float> [#uses=1]
  %519 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %520 = extractelement <4 x float> %519, i32 0   ; <float> [#uses=1]
  %521 = fmul float %518, %520                    ; <float> [#uses=1]
  %522 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %523 = extractelement <4 x float> %522, i32 1   ; <float> [#uses=1]
  %524 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %525 = extractelement <4 x float> %524, i32 0   ; <float> [#uses=1]
  %526 = fmul float %523, %525                    ; <float> [#uses=1]
  %527 = fadd float %521, %526                    ; <float> [#uses=1]
  %528 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %529 = extractelement <4 x float> %528, i32 2   ; <float> [#uses=1]
  %530 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %531 = extractelement <4 x float> %530, i32 0   ; <float> [#uses=1]
  %532 = fmul float %529, %531                    ; <float> [#uses=1]
  %533 = fadd float %527, %532                    ; <float> [#uses=1]
  %534 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %535 = extractelement <4 x float> %534, i32 3   ; <float> [#uses=1]
  %536 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %537 = extractelement <4 x float> %536, i32 0   ; <float> [#uses=1]
  %538 = fmul float %535, %537                    ; <float> [#uses=1]
  %539 = fadd float %533, %538                    ; <float> [#uses=1]
  %540 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %541 = extractelement <4 x float> %540, i32 0   ; <float> [#uses=1]
  %542 = fadd float %541, %539                    ; <float> [#uses=1]
  %543 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %544 = insertelement <4 x float> %543, float %542, i32 0 ; <<4 x float>> [#uses=1]
  store <4 x float> %544, <4 x float>* %sum3
  %545 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %546 = extractelement <4 x float> %545, i32 0   ; <float> [#uses=1]
  %547 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %548 = extractelement <4 x float> %547, i32 1   ; <float> [#uses=1]
  %549 = fmul float %546, %548                    ; <float> [#uses=1]
  %550 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %551 = extractelement <4 x float> %550, i32 1   ; <float> [#uses=1]
  %552 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %553 = extractelement <4 x float> %552, i32 1   ; <float> [#uses=1]
  %554 = fmul float %551, %553                    ; <float> [#uses=1]
  %555 = fadd float %549, %554                    ; <float> [#uses=1]
  %556 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %557 = extractelement <4 x float> %556, i32 2   ; <float> [#uses=1]
  %558 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %559 = extractelement <4 x float> %558, i32 1   ; <float> [#uses=1]
  %560 = fmul float %557, %559                    ; <float> [#uses=1]
  %561 = fadd float %555, %560                    ; <float> [#uses=1]
  %562 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %563 = extractelement <4 x float> %562, i32 3   ; <float> [#uses=1]
  %564 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %565 = extractelement <4 x float> %564, i32 1   ; <float> [#uses=1]
  %566 = fmul float %563, %565                    ; <float> [#uses=1]
  %567 = fadd float %561, %566                    ; <float> [#uses=1]
  %568 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %569 = extractelement <4 x float> %568, i32 1   ; <float> [#uses=1]
  %570 = fadd float %569, %567                    ; <float> [#uses=1]
  %571 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %572 = insertelement <4 x float> %571, float %570, i32 1 ; <<4 x float>> [#uses=1]
  store <4 x float> %572, <4 x float>* %sum3
  %573 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %574 = extractelement <4 x float> %573, i32 0   ; <float> [#uses=1]
  %575 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %576 = extractelement <4 x float> %575, i32 2   ; <float> [#uses=1]
  %577 = fmul float %574, %576                    ; <float> [#uses=1]
  %578 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %579 = extractelement <4 x float> %578, i32 1   ; <float> [#uses=1]
  %580 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %581 = extractelement <4 x float> %580, i32 2   ; <float> [#uses=1]
  %582 = fmul float %579, %581                    ; <float> [#uses=1]
  %583 = fadd float %577, %582                    ; <float> [#uses=1]
  %584 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %585 = extractelement <4 x float> %584, i32 2   ; <float> [#uses=1]
  %586 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %587 = extractelement <4 x float> %586, i32 2   ; <float> [#uses=1]
  %588 = fmul float %585, %587                    ; <float> [#uses=1]
  %589 = fadd float %583, %588                    ; <float> [#uses=1]
  %590 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %591 = extractelement <4 x float> %590, i32 3   ; <float> [#uses=1]
  %592 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %593 = extractelement <4 x float> %592, i32 2   ; <float> [#uses=1]
  %594 = fmul float %591, %593                    ; <float> [#uses=1]
  %595 = fadd float %589, %594                    ; <float> [#uses=1]
  %596 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %597 = extractelement <4 x float> %596, i32 2   ; <float> [#uses=1]
  %598 = fadd float %597, %595                    ; <float> [#uses=1]
  %599 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %600 = insertelement <4 x float> %599, float %598, i32 2 ; <<4 x float>> [#uses=1]
  store <4 x float> %600, <4 x float>* %sum3
  %601 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %602 = extractelement <4 x float> %601, i32 0   ; <float> [#uses=1]
  %603 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %604 = extractelement <4 x float> %603, i32 3   ; <float> [#uses=1]
  %605 = fmul float %602, %604                    ; <float> [#uses=1]
  %606 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %607 = extractelement <4 x float> %606, i32 1   ; <float> [#uses=1]
  %608 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %609 = extractelement <4 x float> %608, i32 3   ; <float> [#uses=1]
  %610 = fmul float %607, %609                    ; <float> [#uses=1]
  %611 = fadd float %605, %610                    ; <float> [#uses=1]
  %612 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %613 = extractelement <4 x float> %612, i32 2   ; <float> [#uses=1]
  %614 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %615 = extractelement <4 x float> %614, i32 3   ; <float> [#uses=1]
  %616 = fmul float %613, %615                    ; <float> [#uses=1]
  %617 = fadd float %611, %616                    ; <float> [#uses=1]
  %618 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %619 = extractelement <4 x float> %618, i32 3   ; <float> [#uses=1]
  %620 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %621 = extractelement <4 x float> %620, i32 3   ; <float> [#uses=1]
  %622 = fmul float %619, %621                    ; <float> [#uses=1]
  %623 = fadd float %617, %622                    ; <float> [#uses=1]
  %624 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %625 = extractelement <4 x float> %624, i32 3   ; <float> [#uses=1]
  %626 = fadd float %625, %623                    ; <float> [#uses=1]
  %627 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %628 = insertelement <4 x float> %627, float %626, i32 3 ; <<4 x float>> [#uses=1]
  store <4 x float> %628, <4 x float>* %sum3
  br label %629

; <label>:629                                     ; preds = %102
  %630 = load i32* %j                             ; <i32> [#uses=1]
  %631 = add nsw i32 %630, 4                      ; <i32> [#uses=1]
  store i32 %631, i32* %j
  br label %97

; <label>:632                                     ; preds = %97
  br label %633

; <label>:633                                     ; preds = %632
  %634 = load i32* %i                             ; <i32> [#uses=1]
  %635 = add nsw i32 %634, 1                      ; <i32> [#uses=1]
  store i32 %635, i32* %i
  br label %28

; <label>:636                                     ; preds = %28
  %637 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %638 = load i32* %globalPos                     ; <i32> [#uses=1]
  %639 = load <4 x float> addrspace(1)** %3       ; <<4 x float> addrspace(1)*> [#uses=1]
  %640 = getelementptr inbounds <4 x float> addrspace(1)* %639, i32 %638 ; <<4 x float> addrspace(1)*> [#uses=1]
  store <4 x float> %637, <4 x float> addrspace(1)* %640
  %641 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %642 = load i32* %globalPos                     ; <i32> [#uses=1]
  %643 = call i32 @get_global_size(i32 0)         ; <i32> [#uses=1]
  %644 = add i32 %642, %643                       ; <i32> [#uses=1]
  %645 = load <4 x float> addrspace(1)** %3       ; <<4 x float> addrspace(1)*> [#uses=1]
  %646 = getelementptr inbounds <4 x float> addrspace(1)* %645, i32 %644 ; <<4 x float> addrspace(1)*> [#uses=1]
  store <4 x float> %641, <4 x float> addrspace(1)* %646
  %647 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %648 = load i32* %globalPos                     ; <i32> [#uses=1]
  %649 = call i32 @get_global_size(i32 0)         ; <i32> [#uses=1]
  %650 = mul i32 2, %649                          ; <i32> [#uses=1]
  %651 = add i32 %648, %650                       ; <i32> [#uses=1]
  %652 = load <4 x float> addrspace(1)** %3       ; <<4 x float> addrspace(1)*> [#uses=1]
  %653 = getelementptr inbounds <4 x float> addrspace(1)* %652, i32 %651 ; <<4 x float> addrspace(1)*> [#uses=1]
  store <4 x float> %647, <4 x float> addrspace(1)* %653
  %654 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %655 = load i32* %globalPos                     ; <i32> [#uses=1]
  %656 = call i32 @get_global_size(i32 0)         ; <i32> [#uses=1]
  %657 = mul i32 3, %656                          ; <i32> [#uses=1]
  %658 = add i32 %655, %657                       ; <i32> [#uses=1]
  %659 = load <4 x float> addrspace(1)** %3       ; <<4 x float> addrspace(1)*> [#uses=1]
  %660 = getelementptr inbounds <4 x float> addrspace(1)* %659, i32 %658 ; <<4 x float> addrspace(1)*> [#uses=1]
  store <4 x float> %654, <4 x float> addrspace(1)* %660
  ret void
}

declare i32 @get_local_id(i32)

declare i32 @get_local_size(i32)

declare i32 @get_global_size(i32)

declare void @barrier(i32)

define void @mmmKernel_local2(<4 x float> addrspace(1)* %matrixA, <4 x float> addrspace(1)* %matrixB, <4 x float> addrspace(1)* %matrixC, i32 %widthA, <4 x float> addrspace(3)* %blockA, <4 x float> addrspace(3)* %blockB) nounwind {
  %1 = alloca <4 x float> addrspace(1)*, align 16 ; <<4 x float> addrspace(1)**> [#uses=5]
  %2 = alloca <4 x float> addrspace(1)*, align 16 ; <<4 x float> addrspace(1)**> [#uses=5]
  %3 = alloca <4 x float> addrspace(1)*, align 16 ; <<4 x float> addrspace(1)**> [#uses=5]
  %4 = alloca i32, align 4                        ; <i32*> [#uses=2]
  %5 = alloca <4 x float> addrspace(3)*, align 16 ; <<4 x float> addrspace(3)**> [#uses=9]
  %6 = alloca <4 x float> addrspace(3)*, align 16 ; <<4 x float> addrspace(3)**> [#uses=9]
  %sum0 = alloca <4 x float>, align 16            ; <<4 x float>*> [#uses=14]
  %7 = alloca <4 x float>, align 16               ; <<4 x float>*> [#uses=2]
  %sum1 = alloca <4 x float>, align 16            ; <<4 x float>*> [#uses=14]
  %8 = alloca <4 x float>, align 16               ; <<4 x float>*> [#uses=2]
  %sum2 = alloca <4 x float>, align 16            ; <<4 x float>*> [#uses=14]
  %9 = alloca <4 x float>, align 16               ; <<4 x float>*> [#uses=2]
  %sum3 = alloca <4 x float>, align 16            ; <<4 x float>*> [#uses=14]
  %10 = alloca <4 x float>, align 16              ; <<4 x float>*> [#uses=2]
  %temp = alloca i32, align 4                     ; <i32*> [#uses=2]
  %i = alloca i32, align 4                        ; <i32*> [#uses=12]
  %j = alloca i32, align 4                        ; <i32*> [#uses=12]
  %tempA0 = alloca <4 x float>, align 16          ; <<4 x float>*> [#uses=17]
  %tempA1 = alloca <4 x float>, align 16          ; <<4 x float>*> [#uses=17]
  %tempA2 = alloca <4 x float>, align 16          ; <<4 x float>*> [#uses=17]
  %tempA3 = alloca <4 x float>, align 16          ; <<4 x float>*> [#uses=17]
  %tempB0 = alloca <4 x float>, align 16          ; <<4 x float>*> [#uses=17]
  %tempB1 = alloca <4 x float>, align 16          ; <<4 x float>*> [#uses=17]
  %tempB2 = alloca <4 x float>, align 16          ; <<4 x float>*> [#uses=17]
  %tempB3 = alloca <4 x float>, align 16          ; <<4 x float>*> [#uses=17]
  store <4 x float> addrspace(1)* %matrixA, <4 x float> addrspace(1)** %1
  store <4 x float> addrspace(1)* %matrixB, <4 x float> addrspace(1)** %2
  store <4 x float> addrspace(1)* %matrixC, <4 x float> addrspace(1)** %3
  store i32 %widthA, i32* %4
  store <4 x float> addrspace(3)* %blockA, <4 x float> addrspace(3)** %5
  store <4 x float> addrspace(3)* %blockB, <4 x float> addrspace(3)** %6
  store <4 x float> zeroinitializer, <4 x float>* %7
  %11 = load <4 x float>* %7                      ; <<4 x float>> [#uses=1]
  store <4 x float> %11, <4 x float>* %sum0
  store <4 x float> zeroinitializer, <4 x float>* %8
  %12 = load <4 x float>* %8                      ; <<4 x float>> [#uses=1]
  store <4 x float> %12, <4 x float>* %sum1
  store <4 x float> zeroinitializer, <4 x float>* %9
  %13 = load <4 x float>* %9                      ; <<4 x float>> [#uses=1]
  store <4 x float> %13, <4 x float>* %sum2
  store <4 x float> zeroinitializer, <4 x float>* %10
  %14 = load <4 x float>* %10                     ; <<4 x float>> [#uses=1]
  store <4 x float> %14, <4 x float>* %sum3
  %15 = load i32* %4                              ; <i32> [#uses=1]
  %16 = sdiv i32 %15, 4                           ; <i32> [#uses=1]
  store i32 %16, i32* %temp
  store i32 0, i32* %i
  br label %17

; <label>:17                                      ; preds = %760, %0
  %18 = load i32* %i                              ; <i32> [#uses=1]
  %19 = load i32* %temp                           ; <i32> [#uses=1]
  %20 = call i32 @get_local_size(i32 0)           ; <i32> [#uses=1]
  %21 = udiv i32 %19, %20                         ; <i32> [#uses=1]
  %22 = icmp ult i32 %18, %21                     ; <i1> [#uses=1]
  br i1 %22, label %23, label %763

; <label>:23                                      ; preds = %17
  %24 = load i32* %i                              ; <i32> [#uses=1]
  %25 = call i32 @get_local_size(i32 0)           ; <i32> [#uses=1]
  %26 = mul i32 %24, %25                          ; <i32> [#uses=1]
  %27 = call i32 @get_local_id(i32 0)             ; <i32> [#uses=1]
  %28 = add i32 %26, %27                          ; <i32> [#uses=1]
  %29 = call i32 @get_global_id(i32 1)            ; <i32> [#uses=1]
  %30 = shl i32 %29, 2                            ; <i32> [#uses=1]
  %31 = call i32 @get_global_size(i32 0)          ; <i32> [#uses=1]
  %32 = mul i32 %30, %31                          ; <i32> [#uses=1]
  %33 = add i32 %28, %32                          ; <i32> [#uses=1]
  %34 = load <4 x float> addrspace(1)** %1        ; <<4 x float> addrspace(1)*> [#uses=1]
  %35 = getelementptr inbounds <4 x float> addrspace(1)* %34, i32 %33 ; <<4 x float> addrspace(1)*> [#uses=1]
  %36 = load <4 x float> addrspace(1)* %35        ; <<4 x float>> [#uses=1]
  %37 = call i32 @get_local_id(i32 0)             ; <i32> [#uses=1]
  %38 = call i32 @get_local_size(i32 0)           ; <i32> [#uses=1]
  %39 = call i32 @get_local_id(i32 1)             ; <i32> [#uses=1]
  %40 = shl i32 %39, 2                            ; <i32> [#uses=1]
  %41 = mul i32 %38, %40                          ; <i32> [#uses=1]
  %42 = add i32 %37, %41                          ; <i32> [#uses=1]
  %43 = load <4 x float> addrspace(3)** %5        ; <<4 x float> addrspace(3)*> [#uses=1]
  %44 = getelementptr inbounds <4 x float> addrspace(3)* %43, i32 %42 ; <<4 x float> addrspace(3)*> [#uses=1]
  store <4 x float> %36, <4 x float> addrspace(3)* %44
  %45 = load i32* %i                              ; <i32> [#uses=1]
  %46 = call i32 @get_local_size(i32 0)           ; <i32> [#uses=1]
  %47 = mul i32 %45, %46                          ; <i32> [#uses=1]
  %48 = call i32 @get_local_id(i32 0)             ; <i32> [#uses=1]
  %49 = add i32 %47, %48                          ; <i32> [#uses=1]
  %50 = call i32 @get_global_id(i32 1)            ; <i32> [#uses=1]
  %51 = shl i32 %50, 2                            ; <i32> [#uses=1]
  %52 = call i32 @get_global_size(i32 0)          ; <i32> [#uses=1]
  %53 = mul i32 %51, %52                          ; <i32> [#uses=1]
  %54 = add i32 %49, %53                          ; <i32> [#uses=1]
  %55 = call i32 @get_global_size(i32 0)          ; <i32> [#uses=1]
  %56 = add i32 %54, %55                          ; <i32> [#uses=1]
  %57 = load <4 x float> addrspace(1)** %1        ; <<4 x float> addrspace(1)*> [#uses=1]
  %58 = getelementptr inbounds <4 x float> addrspace(1)* %57, i32 %56 ; <<4 x float> addrspace(1)*> [#uses=1]
  %59 = load <4 x float> addrspace(1)* %58        ; <<4 x float>> [#uses=1]
  %60 = call i32 @get_local_id(i32 0)             ; <i32> [#uses=1]
  %61 = call i32 @get_local_size(i32 0)           ; <i32> [#uses=1]
  %62 = call i32 @get_local_id(i32 1)             ; <i32> [#uses=1]
  %63 = shl i32 %62, 2                            ; <i32> [#uses=1]
  %64 = mul i32 %61, %63                          ; <i32> [#uses=1]
  %65 = add i32 %60, %64                          ; <i32> [#uses=1]
  %66 = call i32 @get_local_size(i32 0)           ; <i32> [#uses=1]
  %67 = add i32 %65, %66                          ; <i32> [#uses=1]
  %68 = load <4 x float> addrspace(3)** %5        ; <<4 x float> addrspace(3)*> [#uses=1]
  %69 = getelementptr inbounds <4 x float> addrspace(3)* %68, i32 %67 ; <<4 x float> addrspace(3)*> [#uses=1]
  store <4 x float> %59, <4 x float> addrspace(3)* %69
  %70 = load i32* %i                              ; <i32> [#uses=1]
  %71 = call i32 @get_local_size(i32 0)           ; <i32> [#uses=1]
  %72 = mul i32 %70, %71                          ; <i32> [#uses=1]
  %73 = call i32 @get_local_id(i32 0)             ; <i32> [#uses=1]
  %74 = add i32 %72, %73                          ; <i32> [#uses=1]
  %75 = call i32 @get_global_id(i32 1)            ; <i32> [#uses=1]
  %76 = shl i32 %75, 2                            ; <i32> [#uses=1]
  %77 = call i32 @get_global_size(i32 0)          ; <i32> [#uses=1]
  %78 = mul i32 %76, %77                          ; <i32> [#uses=1]
  %79 = add i32 %74, %78                          ; <i32> [#uses=1]
  %80 = call i32 @get_global_size(i32 0)          ; <i32> [#uses=1]
  %81 = mul i32 2, %80                            ; <i32> [#uses=1]
  %82 = add i32 %79, %81                          ; <i32> [#uses=1]
  %83 = load <4 x float> addrspace(1)** %1        ; <<4 x float> addrspace(1)*> [#uses=1]
  %84 = getelementptr inbounds <4 x float> addrspace(1)* %83, i32 %82 ; <<4 x float> addrspace(1)*> [#uses=1]
  %85 = load <4 x float> addrspace(1)* %84        ; <<4 x float>> [#uses=1]
  %86 = call i32 @get_local_id(i32 0)             ; <i32> [#uses=1]
  %87 = call i32 @get_local_size(i32 0)           ; <i32> [#uses=1]
  %88 = call i32 @get_local_id(i32 1)             ; <i32> [#uses=1]
  %89 = shl i32 %88, 2                            ; <i32> [#uses=1]
  %90 = mul i32 %87, %89                          ; <i32> [#uses=1]
  %91 = add i32 %86, %90                          ; <i32> [#uses=1]
  %92 = call i32 @get_local_size(i32 0)           ; <i32> [#uses=1]
  %93 = mul i32 2, %92                            ; <i32> [#uses=1]
  %94 = add i32 %91, %93                          ; <i32> [#uses=1]
  %95 = load <4 x float> addrspace(3)** %5        ; <<4 x float> addrspace(3)*> [#uses=1]
  %96 = getelementptr inbounds <4 x float> addrspace(3)* %95, i32 %94 ; <<4 x float> addrspace(3)*> [#uses=1]
  store <4 x float> %85, <4 x float> addrspace(3)* %96
  %97 = load i32* %i                              ; <i32> [#uses=1]
  %98 = call i32 @get_local_size(i32 0)           ; <i32> [#uses=1]
  %99 = mul i32 %97, %98                          ; <i32> [#uses=1]
  %100 = call i32 @get_local_id(i32 0)            ; <i32> [#uses=1]
  %101 = add i32 %99, %100                        ; <i32> [#uses=1]
  %102 = call i32 @get_global_id(i32 1)           ; <i32> [#uses=1]
  %103 = shl i32 %102, 2                          ; <i32> [#uses=1]
  %104 = call i32 @get_global_size(i32 0)         ; <i32> [#uses=1]
  %105 = mul i32 %103, %104                       ; <i32> [#uses=1]
  %106 = add i32 %101, %105                       ; <i32> [#uses=1]
  %107 = call i32 @get_global_size(i32 0)         ; <i32> [#uses=1]
  %108 = mul i32 3, %107                          ; <i32> [#uses=1]
  %109 = add i32 %106, %108                       ; <i32> [#uses=1]
  %110 = load <4 x float> addrspace(1)** %1       ; <<4 x float> addrspace(1)*> [#uses=1]
  %111 = getelementptr inbounds <4 x float> addrspace(1)* %110, i32 %109 ; <<4 x float> addrspace(1)*> [#uses=1]
  %112 = load <4 x float> addrspace(1)* %111      ; <<4 x float>> [#uses=1]
  %113 = call i32 @get_local_id(i32 0)            ; <i32> [#uses=1]
  %114 = call i32 @get_local_size(i32 0)          ; <i32> [#uses=1]
  %115 = call i32 @get_local_id(i32 1)            ; <i32> [#uses=1]
  %116 = shl i32 %115, 2                          ; <i32> [#uses=1]
  %117 = mul i32 %114, %116                       ; <i32> [#uses=1]
  %118 = add i32 %113, %117                       ; <i32> [#uses=1]
  %119 = call i32 @get_local_size(i32 0)          ; <i32> [#uses=1]
  %120 = mul i32 3, %119                          ; <i32> [#uses=1]
  %121 = add i32 %118, %120                       ; <i32> [#uses=1]
  %122 = load <4 x float> addrspace(3)** %5       ; <<4 x float> addrspace(3)*> [#uses=1]
  %123 = getelementptr inbounds <4 x float> addrspace(3)* %122, i32 %121 ; <<4 x float> addrspace(3)*> [#uses=1]
  store <4 x float> %112, <4 x float> addrspace(3)* %123
  %124 = call i32 @get_global_id(i32 0)           ; <i32> [#uses=1]
  %125 = load i32* %i                             ; <i32> [#uses=1]
  %126 = call i32 @get_local_size(i32 1)          ; <i32> [#uses=1]
  %127 = mul i32 %125, %126                       ; <i32> [#uses=1]
  %128 = call i32 @get_local_id(i32 1)            ; <i32> [#uses=1]
  %129 = add i32 %127, %128                       ; <i32> [#uses=1]
  %130 = shl i32 %129, 2                          ; <i32> [#uses=1]
  %131 = call i32 @get_global_size(i32 0)         ; <i32> [#uses=1]
  %132 = mul i32 %130, %131                       ; <i32> [#uses=1]
  %133 = add i32 %124, %132                       ; <i32> [#uses=1]
  %134 = load <4 x float> addrspace(1)** %2       ; <<4 x float> addrspace(1)*> [#uses=1]
  %135 = getelementptr inbounds <4 x float> addrspace(1)* %134, i32 %133 ; <<4 x float> addrspace(1)*> [#uses=1]
  %136 = load <4 x float> addrspace(1)* %135      ; <<4 x float>> [#uses=1]
  %137 = call i32 @get_local_id(i32 0)            ; <i32> [#uses=1]
  %138 = call i32 @get_local_size(i32 0)          ; <i32> [#uses=1]
  %139 = call i32 @get_local_id(i32 1)            ; <i32> [#uses=1]
  %140 = shl i32 %139, 2                          ; <i32> [#uses=1]
  %141 = mul i32 %138, %140                       ; <i32> [#uses=1]
  %142 = add i32 %137, %141                       ; <i32> [#uses=1]
  %143 = load <4 x float> addrspace(3)** %6       ; <<4 x float> addrspace(3)*> [#uses=1]
  %144 = getelementptr inbounds <4 x float> addrspace(3)* %143, i32 %142 ; <<4 x float> addrspace(3)*> [#uses=1]
  store <4 x float> %136, <4 x float> addrspace(3)* %144
  %145 = call i32 @get_global_id(i32 0)           ; <i32> [#uses=1]
  %146 = load i32* %i                             ; <i32> [#uses=1]
  %147 = call i32 @get_local_size(i32 1)          ; <i32> [#uses=1]
  %148 = mul i32 %146, %147                       ; <i32> [#uses=1]
  %149 = call i32 @get_local_id(i32 1)            ; <i32> [#uses=1]
  %150 = add i32 %148, %149                       ; <i32> [#uses=1]
  %151 = shl i32 %150, 2                          ; <i32> [#uses=1]
  %152 = call i32 @get_global_size(i32 0)         ; <i32> [#uses=1]
  %153 = mul i32 %151, %152                       ; <i32> [#uses=1]
  %154 = add i32 %145, %153                       ; <i32> [#uses=1]
  %155 = call i32 @get_global_size(i32 0)         ; <i32> [#uses=1]
  %156 = add i32 %154, %155                       ; <i32> [#uses=1]
  %157 = load <4 x float> addrspace(1)** %2       ; <<4 x float> addrspace(1)*> [#uses=1]
  %158 = getelementptr inbounds <4 x float> addrspace(1)* %157, i32 %156 ; <<4 x float> addrspace(1)*> [#uses=1]
  %159 = load <4 x float> addrspace(1)* %158      ; <<4 x float>> [#uses=1]
  %160 = call i32 @get_local_id(i32 0)            ; <i32> [#uses=1]
  %161 = call i32 @get_local_size(i32 0)          ; <i32> [#uses=1]
  %162 = call i32 @get_local_id(i32 1)            ; <i32> [#uses=1]
  %163 = shl i32 %162, 2                          ; <i32> [#uses=1]
  %164 = mul i32 %161, %163                       ; <i32> [#uses=1]
  %165 = add i32 %160, %164                       ; <i32> [#uses=1]
  %166 = call i32 @get_local_size(i32 0)          ; <i32> [#uses=1]
  %167 = add i32 %165, %166                       ; <i32> [#uses=1]
  %168 = load <4 x float> addrspace(3)** %6       ; <<4 x float> addrspace(3)*> [#uses=1]
  %169 = getelementptr inbounds <4 x float> addrspace(3)* %168, i32 %167 ; <<4 x float> addrspace(3)*> [#uses=1]
  store <4 x float> %159, <4 x float> addrspace(3)* %169
  %170 = call i32 @get_global_id(i32 0)           ; <i32> [#uses=1]
  %171 = load i32* %i                             ; <i32> [#uses=1]
  %172 = call i32 @get_local_size(i32 1)          ; <i32> [#uses=1]
  %173 = mul i32 %171, %172                       ; <i32> [#uses=1]
  %174 = call i32 @get_local_id(i32 1)            ; <i32> [#uses=1]
  %175 = add i32 %173, %174                       ; <i32> [#uses=1]
  %176 = shl i32 %175, 2                          ; <i32> [#uses=1]
  %177 = call i32 @get_global_size(i32 0)         ; <i32> [#uses=1]
  %178 = mul i32 %176, %177                       ; <i32> [#uses=1]
  %179 = add i32 %170, %178                       ; <i32> [#uses=1]
  %180 = call i32 @get_global_size(i32 0)         ; <i32> [#uses=1]
  %181 = mul i32 2, %180                          ; <i32> [#uses=1]
  %182 = add i32 %179, %181                       ; <i32> [#uses=1]
  %183 = load <4 x float> addrspace(1)** %2       ; <<4 x float> addrspace(1)*> [#uses=1]
  %184 = getelementptr inbounds <4 x float> addrspace(1)* %183, i32 %182 ; <<4 x float> addrspace(1)*> [#uses=1]
  %185 = load <4 x float> addrspace(1)* %184      ; <<4 x float>> [#uses=1]
  %186 = call i32 @get_local_id(i32 0)            ; <i32> [#uses=1]
  %187 = call i32 @get_local_size(i32 0)          ; <i32> [#uses=1]
  %188 = call i32 @get_local_id(i32 1)            ; <i32> [#uses=1]
  %189 = shl i32 %188, 2                          ; <i32> [#uses=1]
  %190 = mul i32 %187, %189                       ; <i32> [#uses=1]
  %191 = add i32 %186, %190                       ; <i32> [#uses=1]
  %192 = call i32 @get_local_size(i32 0)          ; <i32> [#uses=1]
  %193 = mul i32 2, %192                          ; <i32> [#uses=1]
  %194 = add i32 %191, %193                       ; <i32> [#uses=1]
  %195 = load <4 x float> addrspace(3)** %6       ; <<4 x float> addrspace(3)*> [#uses=1]
  %196 = getelementptr inbounds <4 x float> addrspace(3)* %195, i32 %194 ; <<4 x float> addrspace(3)*> [#uses=1]
  store <4 x float> %185, <4 x float> addrspace(3)* %196
  %197 = call i32 @get_global_id(i32 0)           ; <i32> [#uses=1]
  %198 = load i32* %i                             ; <i32> [#uses=1]
  %199 = call i32 @get_local_size(i32 1)          ; <i32> [#uses=1]
  %200 = mul i32 %198, %199                       ; <i32> [#uses=1]
  %201 = call i32 @get_local_id(i32 1)            ; <i32> [#uses=1]
  %202 = add i32 %200, %201                       ; <i32> [#uses=1]
  %203 = shl i32 %202, 2                          ; <i32> [#uses=1]
  %204 = call i32 @get_global_size(i32 0)         ; <i32> [#uses=1]
  %205 = mul i32 %203, %204                       ; <i32> [#uses=1]
  %206 = add i32 %197, %205                       ; <i32> [#uses=1]
  %207 = call i32 @get_global_size(i32 0)         ; <i32> [#uses=1]
  %208 = mul i32 3, %207                          ; <i32> [#uses=1]
  %209 = add i32 %206, %208                       ; <i32> [#uses=1]
  %210 = load <4 x float> addrspace(1)** %2       ; <<4 x float> addrspace(1)*> [#uses=1]
  %211 = getelementptr inbounds <4 x float> addrspace(1)* %210, i32 %209 ; <<4 x float> addrspace(1)*> [#uses=1]
  %212 = load <4 x float> addrspace(1)* %211      ; <<4 x float>> [#uses=1]
  %213 = call i32 @get_local_id(i32 0)            ; <i32> [#uses=1]
  %214 = call i32 @get_local_size(i32 0)          ; <i32> [#uses=1]
  %215 = call i32 @get_local_id(i32 1)            ; <i32> [#uses=1]
  %216 = shl i32 %215, 2                          ; <i32> [#uses=1]
  %217 = mul i32 %214, %216                       ; <i32> [#uses=1]
  %218 = add i32 %213, %217                       ; <i32> [#uses=1]
  %219 = call i32 @get_local_size(i32 0)          ; <i32> [#uses=1]
  %220 = mul i32 3, %219                          ; <i32> [#uses=1]
  %221 = add i32 %218, %220                       ; <i32> [#uses=1]
  %222 = load <4 x float> addrspace(3)** %6       ; <<4 x float> addrspace(3)*> [#uses=1]
  %223 = getelementptr inbounds <4 x float> addrspace(3)* %222, i32 %221 ; <<4 x float> addrspace(3)*> [#uses=1]
  store <4 x float> %212, <4 x float> addrspace(3)* %223
  call void @barrier(i32 1)
  store i32 0, i32* %j
  br label %224

; <label>:224                                     ; preds = %756, %23
  %225 = load i32* %j                             ; <i32> [#uses=1]
  %226 = call i32 @get_local_size(i32 0)          ; <i32> [#uses=1]
  %227 = shl i32 %226, 2                          ; <i32> [#uses=1]
  %228 = icmp ult i32 %225, %227                  ; <i1> [#uses=1]
  br i1 %228, label %229, label %759

; <label>:229                                     ; preds = %224
  %230 = load i32* %j                             ; <i32> [#uses=1]
  %231 = ashr i32 %230, 2                         ; <i32> [#uses=1]
  %232 = call i32 @get_local_id(i32 1)            ; <i32> [#uses=1]
  %233 = mul i32 %232, 4                          ; <i32> [#uses=1]
  %234 = call i32 @get_local_size(i32 0)          ; <i32> [#uses=1]
  %235 = mul i32 %233, %234                       ; <i32> [#uses=1]
  %236 = add i32 %231, %235                       ; <i32> [#uses=1]
  %237 = load <4 x float> addrspace(3)** %5       ; <<4 x float> addrspace(3)*> [#uses=1]
  %238 = getelementptr inbounds <4 x float> addrspace(3)* %237, i32 %236 ; <<4 x float> addrspace(3)*> [#uses=1]
  %239 = load <4 x float> addrspace(3)* %238      ; <<4 x float>> [#uses=1]
  store <4 x float> %239, <4 x float>* %tempA0
  %240 = load i32* %j                             ; <i32> [#uses=1]
  %241 = ashr i32 %240, 2                         ; <i32> [#uses=1]
  %242 = call i32 @get_local_id(i32 1)            ; <i32> [#uses=1]
  %243 = mul i32 %242, 4                          ; <i32> [#uses=1]
  %244 = add i32 %243, 1                          ; <i32> [#uses=1]
  %245 = call i32 @get_local_size(i32 0)          ; <i32> [#uses=1]
  %246 = mul i32 %244, %245                       ; <i32> [#uses=1]
  %247 = add i32 %241, %246                       ; <i32> [#uses=1]
  %248 = load <4 x float> addrspace(3)** %5       ; <<4 x float> addrspace(3)*> [#uses=1]
  %249 = getelementptr inbounds <4 x float> addrspace(3)* %248, i32 %247 ; <<4 x float> addrspace(3)*> [#uses=1]
  %250 = load <4 x float> addrspace(3)* %249      ; <<4 x float>> [#uses=1]
  store <4 x float> %250, <4 x float>* %tempA1
  %251 = load i32* %j                             ; <i32> [#uses=1]
  %252 = ashr i32 %251, 2                         ; <i32> [#uses=1]
  %253 = call i32 @get_local_id(i32 1)            ; <i32> [#uses=1]
  %254 = mul i32 %253, 4                          ; <i32> [#uses=1]
  %255 = add i32 %254, 2                          ; <i32> [#uses=1]
  %256 = call i32 @get_local_size(i32 0)          ; <i32> [#uses=1]
  %257 = mul i32 %255, %256                       ; <i32> [#uses=1]
  %258 = add i32 %252, %257                       ; <i32> [#uses=1]
  %259 = load <4 x float> addrspace(3)** %5       ; <<4 x float> addrspace(3)*> [#uses=1]
  %260 = getelementptr inbounds <4 x float> addrspace(3)* %259, i32 %258 ; <<4 x float> addrspace(3)*> [#uses=1]
  %261 = load <4 x float> addrspace(3)* %260      ; <<4 x float>> [#uses=1]
  store <4 x float> %261, <4 x float>* %tempA2
  %262 = load i32* %j                             ; <i32> [#uses=1]
  %263 = ashr i32 %262, 2                         ; <i32> [#uses=1]
  %264 = call i32 @get_local_id(i32 1)            ; <i32> [#uses=1]
  %265 = mul i32 %264, 4                          ; <i32> [#uses=1]
  %266 = add i32 %265, 3                          ; <i32> [#uses=1]
  %267 = call i32 @get_local_size(i32 0)          ; <i32> [#uses=1]
  %268 = mul i32 %266, %267                       ; <i32> [#uses=1]
  %269 = add i32 %263, %268                       ; <i32> [#uses=1]
  %270 = load <4 x float> addrspace(3)** %5       ; <<4 x float> addrspace(3)*> [#uses=1]
  %271 = getelementptr inbounds <4 x float> addrspace(3)* %270, i32 %269 ; <<4 x float> addrspace(3)*> [#uses=1]
  %272 = load <4 x float> addrspace(3)* %271      ; <<4 x float>> [#uses=1]
  store <4 x float> %272, <4 x float>* %tempA3
  %273 = call i32 @get_local_id(i32 0)            ; <i32> [#uses=1]
  %274 = load i32* %j                             ; <i32> [#uses=1]
  %275 = call i32 @get_local_size(i32 0)          ; <i32> [#uses=1]
  %276 = mul i32 %274, %275                       ; <i32> [#uses=1]
  %277 = add i32 %273, %276                       ; <i32> [#uses=1]
  %278 = load <4 x float> addrspace(3)** %6       ; <<4 x float> addrspace(3)*> [#uses=1]
  %279 = getelementptr inbounds <4 x float> addrspace(3)* %278, i32 %277 ; <<4 x float> addrspace(3)*> [#uses=1]
  %280 = load <4 x float> addrspace(3)* %279      ; <<4 x float>> [#uses=1]
  store <4 x float> %280, <4 x float>* %tempB0
  %281 = call i32 @get_local_id(i32 0)            ; <i32> [#uses=1]
  %282 = load i32* %j                             ; <i32> [#uses=1]
  %283 = add nsw i32 %282, 1                      ; <i32> [#uses=1]
  %284 = call i32 @get_local_size(i32 0)          ; <i32> [#uses=1]
  %285 = mul i32 %283, %284                       ; <i32> [#uses=1]
  %286 = add i32 %281, %285                       ; <i32> [#uses=1]
  %287 = load <4 x float> addrspace(3)** %6       ; <<4 x float> addrspace(3)*> [#uses=1]
  %288 = getelementptr inbounds <4 x float> addrspace(3)* %287, i32 %286 ; <<4 x float> addrspace(3)*> [#uses=1]
  %289 = load <4 x float> addrspace(3)* %288      ; <<4 x float>> [#uses=1]
  store <4 x float> %289, <4 x float>* %tempB1
  %290 = call i32 @get_local_id(i32 0)            ; <i32> [#uses=1]
  %291 = load i32* %j                             ; <i32> [#uses=1]
  %292 = add nsw i32 %291, 2                      ; <i32> [#uses=1]
  %293 = call i32 @get_local_size(i32 0)          ; <i32> [#uses=1]
  %294 = mul i32 %292, %293                       ; <i32> [#uses=1]
  %295 = add i32 %290, %294                       ; <i32> [#uses=1]
  %296 = load <4 x float> addrspace(3)** %6       ; <<4 x float> addrspace(3)*> [#uses=1]
  %297 = getelementptr inbounds <4 x float> addrspace(3)* %296, i32 %295 ; <<4 x float> addrspace(3)*> [#uses=1]
  %298 = load <4 x float> addrspace(3)* %297      ; <<4 x float>> [#uses=1]
  store <4 x float> %298, <4 x float>* %tempB2
  %299 = call i32 @get_local_id(i32 0)            ; <i32> [#uses=1]
  %300 = load i32* %j                             ; <i32> [#uses=1]
  %301 = add nsw i32 %300, 3                      ; <i32> [#uses=1]
  %302 = call i32 @get_local_size(i32 0)          ; <i32> [#uses=1]
  %303 = mul i32 %301, %302                       ; <i32> [#uses=1]
  %304 = add i32 %299, %303                       ; <i32> [#uses=1]
  %305 = load <4 x float> addrspace(3)** %6       ; <<4 x float> addrspace(3)*> [#uses=1]
  %306 = getelementptr inbounds <4 x float> addrspace(3)* %305, i32 %304 ; <<4 x float> addrspace(3)*> [#uses=1]
  %307 = load <4 x float> addrspace(3)* %306      ; <<4 x float>> [#uses=1]
  store <4 x float> %307, <4 x float>* %tempB3
  %308 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %309 = extractelement <4 x float> %308, i32 0   ; <float> [#uses=1]
  %310 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %311 = extractelement <4 x float> %310, i32 0   ; <float> [#uses=1]
  %312 = fmul float %309, %311                    ; <float> [#uses=1]
  %313 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %314 = extractelement <4 x float> %313, i32 1   ; <float> [#uses=1]
  %315 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %316 = extractelement <4 x float> %315, i32 0   ; <float> [#uses=1]
  %317 = fmul float %314, %316                    ; <float> [#uses=1]
  %318 = fadd float %312, %317                    ; <float> [#uses=1]
  %319 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %320 = extractelement <4 x float> %319, i32 2   ; <float> [#uses=1]
  %321 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %322 = extractelement <4 x float> %321, i32 0   ; <float> [#uses=1]
  %323 = fmul float %320, %322                    ; <float> [#uses=1]
  %324 = fadd float %318, %323                    ; <float> [#uses=1]
  %325 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %326 = extractelement <4 x float> %325, i32 3   ; <float> [#uses=1]
  %327 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %328 = extractelement <4 x float> %327, i32 0   ; <float> [#uses=1]
  %329 = fmul float %326, %328                    ; <float> [#uses=1]
  %330 = fadd float %324, %329                    ; <float> [#uses=1]
  %331 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %332 = extractelement <4 x float> %331, i32 0   ; <float> [#uses=1]
  %333 = fadd float %332, %330                    ; <float> [#uses=1]
  %334 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %335 = insertelement <4 x float> %334, float %333, i32 0 ; <<4 x float>> [#uses=1]
  store <4 x float> %335, <4 x float>* %sum0
  %336 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %337 = extractelement <4 x float> %336, i32 0   ; <float> [#uses=1]
  %338 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %339 = extractelement <4 x float> %338, i32 1   ; <float> [#uses=1]
  %340 = fmul float %337, %339                    ; <float> [#uses=1]
  %341 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %342 = extractelement <4 x float> %341, i32 1   ; <float> [#uses=1]
  %343 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %344 = extractelement <4 x float> %343, i32 1   ; <float> [#uses=1]
  %345 = fmul float %342, %344                    ; <float> [#uses=1]
  %346 = fadd float %340, %345                    ; <float> [#uses=1]
  %347 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %348 = extractelement <4 x float> %347, i32 2   ; <float> [#uses=1]
  %349 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %350 = extractelement <4 x float> %349, i32 1   ; <float> [#uses=1]
  %351 = fmul float %348, %350                    ; <float> [#uses=1]
  %352 = fadd float %346, %351                    ; <float> [#uses=1]
  %353 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %354 = extractelement <4 x float> %353, i32 3   ; <float> [#uses=1]
  %355 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %356 = extractelement <4 x float> %355, i32 1   ; <float> [#uses=1]
  %357 = fmul float %354, %356                    ; <float> [#uses=1]
  %358 = fadd float %352, %357                    ; <float> [#uses=1]
  %359 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %360 = extractelement <4 x float> %359, i32 1   ; <float> [#uses=1]
  %361 = fadd float %360, %358                    ; <float> [#uses=1]
  %362 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %363 = insertelement <4 x float> %362, float %361, i32 1 ; <<4 x float>> [#uses=1]
  store <4 x float> %363, <4 x float>* %sum0
  %364 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %365 = extractelement <4 x float> %364, i32 0   ; <float> [#uses=1]
  %366 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %367 = extractelement <4 x float> %366, i32 2   ; <float> [#uses=1]
  %368 = fmul float %365, %367                    ; <float> [#uses=1]
  %369 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %370 = extractelement <4 x float> %369, i32 1   ; <float> [#uses=1]
  %371 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %372 = extractelement <4 x float> %371, i32 2   ; <float> [#uses=1]
  %373 = fmul float %370, %372                    ; <float> [#uses=1]
  %374 = fadd float %368, %373                    ; <float> [#uses=1]
  %375 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %376 = extractelement <4 x float> %375, i32 2   ; <float> [#uses=1]
  %377 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %378 = extractelement <4 x float> %377, i32 2   ; <float> [#uses=1]
  %379 = fmul float %376, %378                    ; <float> [#uses=1]
  %380 = fadd float %374, %379                    ; <float> [#uses=1]
  %381 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %382 = extractelement <4 x float> %381, i32 3   ; <float> [#uses=1]
  %383 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %384 = extractelement <4 x float> %383, i32 2   ; <float> [#uses=1]
  %385 = fmul float %382, %384                    ; <float> [#uses=1]
  %386 = fadd float %380, %385                    ; <float> [#uses=1]
  %387 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %388 = extractelement <4 x float> %387, i32 2   ; <float> [#uses=1]
  %389 = fadd float %388, %386                    ; <float> [#uses=1]
  %390 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %391 = insertelement <4 x float> %390, float %389, i32 2 ; <<4 x float>> [#uses=1]
  store <4 x float> %391, <4 x float>* %sum0
  %392 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %393 = extractelement <4 x float> %392, i32 0   ; <float> [#uses=1]
  %394 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %395 = extractelement <4 x float> %394, i32 3   ; <float> [#uses=1]
  %396 = fmul float %393, %395                    ; <float> [#uses=1]
  %397 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %398 = extractelement <4 x float> %397, i32 1   ; <float> [#uses=1]
  %399 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %400 = extractelement <4 x float> %399, i32 3   ; <float> [#uses=1]
  %401 = fmul float %398, %400                    ; <float> [#uses=1]
  %402 = fadd float %396, %401                    ; <float> [#uses=1]
  %403 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %404 = extractelement <4 x float> %403, i32 2   ; <float> [#uses=1]
  %405 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %406 = extractelement <4 x float> %405, i32 3   ; <float> [#uses=1]
  %407 = fmul float %404, %406                    ; <float> [#uses=1]
  %408 = fadd float %402, %407                    ; <float> [#uses=1]
  %409 = load <4 x float>* %tempA0                ; <<4 x float>> [#uses=1]
  %410 = extractelement <4 x float> %409, i32 3   ; <float> [#uses=1]
  %411 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %412 = extractelement <4 x float> %411, i32 3   ; <float> [#uses=1]
  %413 = fmul float %410, %412                    ; <float> [#uses=1]
  %414 = fadd float %408, %413                    ; <float> [#uses=1]
  %415 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %416 = extractelement <4 x float> %415, i32 3   ; <float> [#uses=1]
  %417 = fadd float %416, %414                    ; <float> [#uses=1]
  %418 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %419 = insertelement <4 x float> %418, float %417, i32 3 ; <<4 x float>> [#uses=1]
  store <4 x float> %419, <4 x float>* %sum0
  %420 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %421 = extractelement <4 x float> %420, i32 0   ; <float> [#uses=1]
  %422 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %423 = extractelement <4 x float> %422, i32 0   ; <float> [#uses=1]
  %424 = fmul float %421, %423                    ; <float> [#uses=1]
  %425 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %426 = extractelement <4 x float> %425, i32 1   ; <float> [#uses=1]
  %427 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %428 = extractelement <4 x float> %427, i32 0   ; <float> [#uses=1]
  %429 = fmul float %426, %428                    ; <float> [#uses=1]
  %430 = fadd float %424, %429                    ; <float> [#uses=1]
  %431 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %432 = extractelement <4 x float> %431, i32 2   ; <float> [#uses=1]
  %433 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %434 = extractelement <4 x float> %433, i32 0   ; <float> [#uses=1]
  %435 = fmul float %432, %434                    ; <float> [#uses=1]
  %436 = fadd float %430, %435                    ; <float> [#uses=1]
  %437 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %438 = extractelement <4 x float> %437, i32 3   ; <float> [#uses=1]
  %439 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %440 = extractelement <4 x float> %439, i32 0   ; <float> [#uses=1]
  %441 = fmul float %438, %440                    ; <float> [#uses=1]
  %442 = fadd float %436, %441                    ; <float> [#uses=1]
  %443 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %444 = extractelement <4 x float> %443, i32 0   ; <float> [#uses=1]
  %445 = fadd float %444, %442                    ; <float> [#uses=1]
  %446 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %447 = insertelement <4 x float> %446, float %445, i32 0 ; <<4 x float>> [#uses=1]
  store <4 x float> %447, <4 x float>* %sum1
  %448 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %449 = extractelement <4 x float> %448, i32 0   ; <float> [#uses=1]
  %450 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %451 = extractelement <4 x float> %450, i32 1   ; <float> [#uses=1]
  %452 = fmul float %449, %451                    ; <float> [#uses=1]
  %453 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %454 = extractelement <4 x float> %453, i32 1   ; <float> [#uses=1]
  %455 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %456 = extractelement <4 x float> %455, i32 1   ; <float> [#uses=1]
  %457 = fmul float %454, %456                    ; <float> [#uses=1]
  %458 = fadd float %452, %457                    ; <float> [#uses=1]
  %459 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %460 = extractelement <4 x float> %459, i32 2   ; <float> [#uses=1]
  %461 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %462 = extractelement <4 x float> %461, i32 1   ; <float> [#uses=1]
  %463 = fmul float %460, %462                    ; <float> [#uses=1]
  %464 = fadd float %458, %463                    ; <float> [#uses=1]
  %465 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %466 = extractelement <4 x float> %465, i32 3   ; <float> [#uses=1]
  %467 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %468 = extractelement <4 x float> %467, i32 1   ; <float> [#uses=1]
  %469 = fmul float %466, %468                    ; <float> [#uses=1]
  %470 = fadd float %464, %469                    ; <float> [#uses=1]
  %471 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %472 = extractelement <4 x float> %471, i32 1   ; <float> [#uses=1]
  %473 = fadd float %472, %470                    ; <float> [#uses=1]
  %474 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %475 = insertelement <4 x float> %474, float %473, i32 1 ; <<4 x float>> [#uses=1]
  store <4 x float> %475, <4 x float>* %sum1
  %476 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %477 = extractelement <4 x float> %476, i32 0   ; <float> [#uses=1]
  %478 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %479 = extractelement <4 x float> %478, i32 2   ; <float> [#uses=1]
  %480 = fmul float %477, %479                    ; <float> [#uses=1]
  %481 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %482 = extractelement <4 x float> %481, i32 1   ; <float> [#uses=1]
  %483 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %484 = extractelement <4 x float> %483, i32 2   ; <float> [#uses=1]
  %485 = fmul float %482, %484                    ; <float> [#uses=1]
  %486 = fadd float %480, %485                    ; <float> [#uses=1]
  %487 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %488 = extractelement <4 x float> %487, i32 2   ; <float> [#uses=1]
  %489 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %490 = extractelement <4 x float> %489, i32 2   ; <float> [#uses=1]
  %491 = fmul float %488, %490                    ; <float> [#uses=1]
  %492 = fadd float %486, %491                    ; <float> [#uses=1]
  %493 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %494 = extractelement <4 x float> %493, i32 3   ; <float> [#uses=1]
  %495 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %496 = extractelement <4 x float> %495, i32 2   ; <float> [#uses=1]
  %497 = fmul float %494, %496                    ; <float> [#uses=1]
  %498 = fadd float %492, %497                    ; <float> [#uses=1]
  %499 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %500 = extractelement <4 x float> %499, i32 2   ; <float> [#uses=1]
  %501 = fadd float %500, %498                    ; <float> [#uses=1]
  %502 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %503 = insertelement <4 x float> %502, float %501, i32 2 ; <<4 x float>> [#uses=1]
  store <4 x float> %503, <4 x float>* %sum1
  %504 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %505 = extractelement <4 x float> %504, i32 0   ; <float> [#uses=1]
  %506 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %507 = extractelement <4 x float> %506, i32 3   ; <float> [#uses=1]
  %508 = fmul float %505, %507                    ; <float> [#uses=1]
  %509 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %510 = extractelement <4 x float> %509, i32 1   ; <float> [#uses=1]
  %511 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %512 = extractelement <4 x float> %511, i32 3   ; <float> [#uses=1]
  %513 = fmul float %510, %512                    ; <float> [#uses=1]
  %514 = fadd float %508, %513                    ; <float> [#uses=1]
  %515 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %516 = extractelement <4 x float> %515, i32 2   ; <float> [#uses=1]
  %517 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %518 = extractelement <4 x float> %517, i32 3   ; <float> [#uses=1]
  %519 = fmul float %516, %518                    ; <float> [#uses=1]
  %520 = fadd float %514, %519                    ; <float> [#uses=1]
  %521 = load <4 x float>* %tempA1                ; <<4 x float>> [#uses=1]
  %522 = extractelement <4 x float> %521, i32 3   ; <float> [#uses=1]
  %523 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %524 = extractelement <4 x float> %523, i32 3   ; <float> [#uses=1]
  %525 = fmul float %522, %524                    ; <float> [#uses=1]
  %526 = fadd float %520, %525                    ; <float> [#uses=1]
  %527 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %528 = extractelement <4 x float> %527, i32 3   ; <float> [#uses=1]
  %529 = fadd float %528, %526                    ; <float> [#uses=1]
  %530 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %531 = insertelement <4 x float> %530, float %529, i32 3 ; <<4 x float>> [#uses=1]
  store <4 x float> %531, <4 x float>* %sum1
  %532 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %533 = extractelement <4 x float> %532, i32 0   ; <float> [#uses=1]
  %534 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %535 = extractelement <4 x float> %534, i32 0   ; <float> [#uses=1]
  %536 = fmul float %533, %535                    ; <float> [#uses=1]
  %537 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %538 = extractelement <4 x float> %537, i32 1   ; <float> [#uses=1]
  %539 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %540 = extractelement <4 x float> %539, i32 0   ; <float> [#uses=1]
  %541 = fmul float %538, %540                    ; <float> [#uses=1]
  %542 = fadd float %536, %541                    ; <float> [#uses=1]
  %543 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %544 = extractelement <4 x float> %543, i32 2   ; <float> [#uses=1]
  %545 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %546 = extractelement <4 x float> %545, i32 0   ; <float> [#uses=1]
  %547 = fmul float %544, %546                    ; <float> [#uses=1]
  %548 = fadd float %542, %547                    ; <float> [#uses=1]
  %549 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %550 = extractelement <4 x float> %549, i32 3   ; <float> [#uses=1]
  %551 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %552 = extractelement <4 x float> %551, i32 0   ; <float> [#uses=1]
  %553 = fmul float %550, %552                    ; <float> [#uses=1]
  %554 = fadd float %548, %553                    ; <float> [#uses=1]
  %555 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %556 = extractelement <4 x float> %555, i32 0   ; <float> [#uses=1]
  %557 = fadd float %556, %554                    ; <float> [#uses=1]
  %558 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %559 = insertelement <4 x float> %558, float %557, i32 0 ; <<4 x float>> [#uses=1]
  store <4 x float> %559, <4 x float>* %sum2
  %560 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %561 = extractelement <4 x float> %560, i32 0   ; <float> [#uses=1]
  %562 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %563 = extractelement <4 x float> %562, i32 1   ; <float> [#uses=1]
  %564 = fmul float %561, %563                    ; <float> [#uses=1]
  %565 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %566 = extractelement <4 x float> %565, i32 1   ; <float> [#uses=1]
  %567 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %568 = extractelement <4 x float> %567, i32 1   ; <float> [#uses=1]
  %569 = fmul float %566, %568                    ; <float> [#uses=1]
  %570 = fadd float %564, %569                    ; <float> [#uses=1]
  %571 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %572 = extractelement <4 x float> %571, i32 2   ; <float> [#uses=1]
  %573 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %574 = extractelement <4 x float> %573, i32 1   ; <float> [#uses=1]
  %575 = fmul float %572, %574                    ; <float> [#uses=1]
  %576 = fadd float %570, %575                    ; <float> [#uses=1]
  %577 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %578 = extractelement <4 x float> %577, i32 3   ; <float> [#uses=1]
  %579 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %580 = extractelement <4 x float> %579, i32 1   ; <float> [#uses=1]
  %581 = fmul float %578, %580                    ; <float> [#uses=1]
  %582 = fadd float %576, %581                    ; <float> [#uses=1]
  %583 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %584 = extractelement <4 x float> %583, i32 1   ; <float> [#uses=1]
  %585 = fadd float %584, %582                    ; <float> [#uses=1]
  %586 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %587 = insertelement <4 x float> %586, float %585, i32 1 ; <<4 x float>> [#uses=1]
  store <4 x float> %587, <4 x float>* %sum2
  %588 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %589 = extractelement <4 x float> %588, i32 0   ; <float> [#uses=1]
  %590 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %591 = extractelement <4 x float> %590, i32 2   ; <float> [#uses=1]
  %592 = fmul float %589, %591                    ; <float> [#uses=1]
  %593 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %594 = extractelement <4 x float> %593, i32 1   ; <float> [#uses=1]
  %595 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %596 = extractelement <4 x float> %595, i32 2   ; <float> [#uses=1]
  %597 = fmul float %594, %596                    ; <float> [#uses=1]
  %598 = fadd float %592, %597                    ; <float> [#uses=1]
  %599 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %600 = extractelement <4 x float> %599, i32 2   ; <float> [#uses=1]
  %601 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %602 = extractelement <4 x float> %601, i32 2   ; <float> [#uses=1]
  %603 = fmul float %600, %602                    ; <float> [#uses=1]
  %604 = fadd float %598, %603                    ; <float> [#uses=1]
  %605 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %606 = extractelement <4 x float> %605, i32 3   ; <float> [#uses=1]
  %607 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %608 = extractelement <4 x float> %607, i32 2   ; <float> [#uses=1]
  %609 = fmul float %606, %608                    ; <float> [#uses=1]
  %610 = fadd float %604, %609                    ; <float> [#uses=1]
  %611 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %612 = extractelement <4 x float> %611, i32 2   ; <float> [#uses=1]
  %613 = fadd float %612, %610                    ; <float> [#uses=1]
  %614 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %615 = insertelement <4 x float> %614, float %613, i32 2 ; <<4 x float>> [#uses=1]
  store <4 x float> %615, <4 x float>* %sum2
  %616 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %617 = extractelement <4 x float> %616, i32 0   ; <float> [#uses=1]
  %618 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %619 = extractelement <4 x float> %618, i32 3   ; <float> [#uses=1]
  %620 = fmul float %617, %619                    ; <float> [#uses=1]
  %621 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %622 = extractelement <4 x float> %621, i32 1   ; <float> [#uses=1]
  %623 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %624 = extractelement <4 x float> %623, i32 3   ; <float> [#uses=1]
  %625 = fmul float %622, %624                    ; <float> [#uses=1]
  %626 = fadd float %620, %625                    ; <float> [#uses=1]
  %627 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %628 = extractelement <4 x float> %627, i32 2   ; <float> [#uses=1]
  %629 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %630 = extractelement <4 x float> %629, i32 3   ; <float> [#uses=1]
  %631 = fmul float %628, %630                    ; <float> [#uses=1]
  %632 = fadd float %626, %631                    ; <float> [#uses=1]
  %633 = load <4 x float>* %tempA2                ; <<4 x float>> [#uses=1]
  %634 = extractelement <4 x float> %633, i32 3   ; <float> [#uses=1]
  %635 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %636 = extractelement <4 x float> %635, i32 3   ; <float> [#uses=1]
  %637 = fmul float %634, %636                    ; <float> [#uses=1]
  %638 = fadd float %632, %637                    ; <float> [#uses=1]
  %639 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %640 = extractelement <4 x float> %639, i32 3   ; <float> [#uses=1]
  %641 = fadd float %640, %638                    ; <float> [#uses=1]
  %642 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %643 = insertelement <4 x float> %642, float %641, i32 3 ; <<4 x float>> [#uses=1]
  store <4 x float> %643, <4 x float>* %sum2
  %644 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %645 = extractelement <4 x float> %644, i32 0   ; <float> [#uses=1]
  %646 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %647 = extractelement <4 x float> %646, i32 0   ; <float> [#uses=1]
  %648 = fmul float %645, %647                    ; <float> [#uses=1]
  %649 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %650 = extractelement <4 x float> %649, i32 1   ; <float> [#uses=1]
  %651 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %652 = extractelement <4 x float> %651, i32 0   ; <float> [#uses=1]
  %653 = fmul float %650, %652                    ; <float> [#uses=1]
  %654 = fadd float %648, %653                    ; <float> [#uses=1]
  %655 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %656 = extractelement <4 x float> %655, i32 2   ; <float> [#uses=1]
  %657 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %658 = extractelement <4 x float> %657, i32 0   ; <float> [#uses=1]
  %659 = fmul float %656, %658                    ; <float> [#uses=1]
  %660 = fadd float %654, %659                    ; <float> [#uses=1]
  %661 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %662 = extractelement <4 x float> %661, i32 3   ; <float> [#uses=1]
  %663 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %664 = extractelement <4 x float> %663, i32 0   ; <float> [#uses=1]
  %665 = fmul float %662, %664                    ; <float> [#uses=1]
  %666 = fadd float %660, %665                    ; <float> [#uses=1]
  %667 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %668 = extractelement <4 x float> %667, i32 0   ; <float> [#uses=1]
  %669 = fadd float %668, %666                    ; <float> [#uses=1]
  %670 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %671 = insertelement <4 x float> %670, float %669, i32 0 ; <<4 x float>> [#uses=1]
  store <4 x float> %671, <4 x float>* %sum3
  %672 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %673 = extractelement <4 x float> %672, i32 0   ; <float> [#uses=1]
  %674 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %675 = extractelement <4 x float> %674, i32 1   ; <float> [#uses=1]
  %676 = fmul float %673, %675                    ; <float> [#uses=1]
  %677 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %678 = extractelement <4 x float> %677, i32 1   ; <float> [#uses=1]
  %679 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %680 = extractelement <4 x float> %679, i32 1   ; <float> [#uses=1]
  %681 = fmul float %678, %680                    ; <float> [#uses=1]
  %682 = fadd float %676, %681                    ; <float> [#uses=1]
  %683 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %684 = extractelement <4 x float> %683, i32 2   ; <float> [#uses=1]
  %685 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %686 = extractelement <4 x float> %685, i32 1   ; <float> [#uses=1]
  %687 = fmul float %684, %686                    ; <float> [#uses=1]
  %688 = fadd float %682, %687                    ; <float> [#uses=1]
  %689 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %690 = extractelement <4 x float> %689, i32 3   ; <float> [#uses=1]
  %691 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %692 = extractelement <4 x float> %691, i32 1   ; <float> [#uses=1]
  %693 = fmul float %690, %692                    ; <float> [#uses=1]
  %694 = fadd float %688, %693                    ; <float> [#uses=1]
  %695 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %696 = extractelement <4 x float> %695, i32 1   ; <float> [#uses=1]
  %697 = fadd float %696, %694                    ; <float> [#uses=1]
  %698 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %699 = insertelement <4 x float> %698, float %697, i32 1 ; <<4 x float>> [#uses=1]
  store <4 x float> %699, <4 x float>* %sum3
  %700 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %701 = extractelement <4 x float> %700, i32 0   ; <float> [#uses=1]
  %702 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %703 = extractelement <4 x float> %702, i32 2   ; <float> [#uses=1]
  %704 = fmul float %701, %703                    ; <float> [#uses=1]
  %705 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %706 = extractelement <4 x float> %705, i32 1   ; <float> [#uses=1]
  %707 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %708 = extractelement <4 x float> %707, i32 2   ; <float> [#uses=1]
  %709 = fmul float %706, %708                    ; <float> [#uses=1]
  %710 = fadd float %704, %709                    ; <float> [#uses=1]
  %711 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %712 = extractelement <4 x float> %711, i32 2   ; <float> [#uses=1]
  %713 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %714 = extractelement <4 x float> %713, i32 2   ; <float> [#uses=1]
  %715 = fmul float %712, %714                    ; <float> [#uses=1]
  %716 = fadd float %710, %715                    ; <float> [#uses=1]
  %717 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %718 = extractelement <4 x float> %717, i32 3   ; <float> [#uses=1]
  %719 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %720 = extractelement <4 x float> %719, i32 2   ; <float> [#uses=1]
  %721 = fmul float %718, %720                    ; <float> [#uses=1]
  %722 = fadd float %716, %721                    ; <float> [#uses=1]
  %723 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %724 = extractelement <4 x float> %723, i32 2   ; <float> [#uses=1]
  %725 = fadd float %724, %722                    ; <float> [#uses=1]
  %726 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %727 = insertelement <4 x float> %726, float %725, i32 2 ; <<4 x float>> [#uses=1]
  store <4 x float> %727, <4 x float>* %sum3
  %728 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %729 = extractelement <4 x float> %728, i32 0   ; <float> [#uses=1]
  %730 = load <4 x float>* %tempB0                ; <<4 x float>> [#uses=1]
  %731 = extractelement <4 x float> %730, i32 3   ; <float> [#uses=1]
  %732 = fmul float %729, %731                    ; <float> [#uses=1]
  %733 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %734 = extractelement <4 x float> %733, i32 1   ; <float> [#uses=1]
  %735 = load <4 x float>* %tempB1                ; <<4 x float>> [#uses=1]
  %736 = extractelement <4 x float> %735, i32 3   ; <float> [#uses=1]
  %737 = fmul float %734, %736                    ; <float> [#uses=1]
  %738 = fadd float %732, %737                    ; <float> [#uses=1]
  %739 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %740 = extractelement <4 x float> %739, i32 2   ; <float> [#uses=1]
  %741 = load <4 x float>* %tempB2                ; <<4 x float>> [#uses=1]
  %742 = extractelement <4 x float> %741, i32 3   ; <float> [#uses=1]
  %743 = fmul float %740, %742                    ; <float> [#uses=1]
  %744 = fadd float %738, %743                    ; <float> [#uses=1]
  %745 = load <4 x float>* %tempA3                ; <<4 x float>> [#uses=1]
  %746 = extractelement <4 x float> %745, i32 3   ; <float> [#uses=1]
  %747 = load <4 x float>* %tempB3                ; <<4 x float>> [#uses=1]
  %748 = extractelement <4 x float> %747, i32 3   ; <float> [#uses=1]
  %749 = fmul float %746, %748                    ; <float> [#uses=1]
  %750 = fadd float %744, %749                    ; <float> [#uses=1]
  %751 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %752 = extractelement <4 x float> %751, i32 3   ; <float> [#uses=1]
  %753 = fadd float %752, %750                    ; <float> [#uses=1]
  %754 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %755 = insertelement <4 x float> %754, float %753, i32 3 ; <<4 x float>> [#uses=1]
  store <4 x float> %755, <4 x float>* %sum3
  br label %756

; <label>:756                                     ; preds = %229
  %757 = load i32* %j                             ; <i32> [#uses=1]
  %758 = add nsw i32 %757, 4                      ; <i32> [#uses=1]
  store i32 %758, i32* %j
  br label %224

; <label>:759                                     ; preds = %224
  br label %760

; <label>:760                                     ; preds = %759
  %761 = load i32* %i                             ; <i32> [#uses=1]
  %762 = add nsw i32 %761, 1                      ; <i32> [#uses=1]
  store i32 %762, i32* %i
  br label %17

; <label>:763                                     ; preds = %17
  %764 = load <4 x float>* %sum0                  ; <<4 x float>> [#uses=1]
  %765 = call i32 @get_global_id(i32 0)           ; <i32> [#uses=1]
  %766 = call i32 @get_global_id(i32 1)           ; <i32> [#uses=1]
  %767 = shl i32 %766, 2                          ; <i32> [#uses=1]
  %768 = call i32 @get_global_size(i32 0)         ; <i32> [#uses=1]
  %769 = mul i32 %767, %768                       ; <i32> [#uses=1]
  %770 = add i32 %765, %769                       ; <i32> [#uses=1]
  %771 = load <4 x float> addrspace(1)** %3       ; <<4 x float> addrspace(1)*> [#uses=1]
  %772 = getelementptr inbounds <4 x float> addrspace(1)* %771, i32 %770 ; <<4 x float> addrspace(1)*> [#uses=1]
  store <4 x float> %764, <4 x float> addrspace(1)* %772
  %773 = load <4 x float>* %sum1                  ; <<4 x float>> [#uses=1]
  %774 = call i32 @get_global_id(i32 0)           ; <i32> [#uses=1]
  %775 = call i32 @get_global_id(i32 1)           ; <i32> [#uses=1]
  %776 = shl i32 %775, 2                          ; <i32> [#uses=1]
  %777 = call i32 @get_global_size(i32 0)         ; <i32> [#uses=1]
  %778 = mul i32 %776, %777                       ; <i32> [#uses=1]
  %779 = add i32 %774, %778                       ; <i32> [#uses=1]
  %780 = call i32 @get_global_size(i32 0)         ; <i32> [#uses=1]
  %781 = add i32 %779, %780                       ; <i32> [#uses=1]
  %782 = load <4 x float> addrspace(1)** %3       ; <<4 x float> addrspace(1)*> [#uses=1]
  %783 = getelementptr inbounds <4 x float> addrspace(1)* %782, i32 %781 ; <<4 x float> addrspace(1)*> [#uses=1]
  store <4 x float> %773, <4 x float> addrspace(1)* %783
  %784 = load <4 x float>* %sum2                  ; <<4 x float>> [#uses=1]
  %785 = call i32 @get_global_id(i32 0)           ; <i32> [#uses=1]
  %786 = call i32 @get_global_id(i32 1)           ; <i32> [#uses=1]
  %787 = shl i32 %786, 2                          ; <i32> [#uses=1]
  %788 = call i32 @get_global_size(i32 0)         ; <i32> [#uses=1]
  %789 = mul i32 %787, %788                       ; <i32> [#uses=1]
  %790 = add i32 %785, %789                       ; <i32> [#uses=1]
  %791 = call i32 @get_global_size(i32 0)         ; <i32> [#uses=1]
  %792 = mul i32 2, %791                          ; <i32> [#uses=1]
  %793 = add i32 %790, %792                       ; <i32> [#uses=1]
  %794 = load <4 x float> addrspace(1)** %3       ; <<4 x float> addrspace(1)*> [#uses=1]
  %795 = getelementptr inbounds <4 x float> addrspace(1)* %794, i32 %793 ; <<4 x float> addrspace(1)*> [#uses=1]
  store <4 x float> %784, <4 x float> addrspace(1)* %795
  %796 = load <4 x float>* %sum3                  ; <<4 x float>> [#uses=1]
  %797 = call i32 @get_global_id(i32 0)           ; <i32> [#uses=1]
  %798 = call i32 @get_global_id(i32 1)           ; <i32> [#uses=1]
  %799 = shl i32 %798, 2                          ; <i32> [#uses=1]
  %800 = call i32 @get_global_size(i32 0)         ; <i32> [#uses=1]
  %801 = mul i32 %799, %800                       ; <i32> [#uses=1]
  %802 = add i32 %797, %801                       ; <i32> [#uses=1]
  %803 = call i32 @get_global_size(i32 0)         ; <i32> [#uses=1]
  %804 = mul i32 3, %803                          ; <i32> [#uses=1]
  %805 = add i32 %802, %804                       ; <i32> [#uses=1]
  %806 = load <4 x float> addrspace(1)** %3       ; <<4 x float> addrspace(1)*> [#uses=1]
  %807 = getelementptr inbounds <4 x float> addrspace(1)* %806, i32 %805 ; <<4 x float> addrspace(1)*> [#uses=1]
  store <4 x float> %796, <4 x float> addrspace(1)* %807
  ret void
}