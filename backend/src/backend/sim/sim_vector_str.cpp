/* 
 * Copyright Â© 2012 Intel Corporation
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 *
 * Author: Benjamin Segovia <benjamin.segovia@intel.com>
 */

#include "string"
namespace gbe {
std::string sim_vector_str = 
"/*\n"
" * Copyright 2012 Intel Corporation\n"
" *\n"
" * Permission is hereby granted, free of charge, to any person obtaining a\n"
" * copy of this software and associated documentation files (the \"Software\"),\n"
" * to deal in the Software without restriction, including without limitation\n"
" * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n"
" * and/or sell copies of the Software, and to permit persons to whom the\n"
" * Software is furnished to do so, subject to the following conditions:\n"
" *\n"
" * The above copyright notice and this permission notice (including the next\n"
" * paragraph) shall be included in all copies or substantial portions of the\n"
" * Software.\n"
" *\n"
" * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n"
" * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n"
" * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n"
" * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n"
" * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n"
" * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n"
" * DEALINGS IN THE SOFTWARE.\n"
" */\n"
"\n"
"/**\n"
" * \\file sim_vector.h\n"
" * \\author Benjamin Segovia <benjamin.segovia@intel.com>\n"
" *\n"
" * c++ class helper for the simulator\n"
" */\n"
"\n"
"#ifndef __GBE_SIM_VECTOR_H__\n"
"#define __GBE_SIM_VECTOR_H__\n"
"\n"
"#include <xmmintrin.h>\n"
"#include <emmintrin.h>\n"
"#include <pmmintrin.h>\n"
"#include <smmintrin.h>\n"
"#include <stdint.h>\n"
"#include <cmath>\n"
"\n"
"#define INLINE inline __attribute__((always_inline))\n"
"#define ID(X) (X)\n"
"#define PS2SI(X) _mm_castps_si128(X)\n"
"#define SI2PS(X) _mm_castsi128_ps(X)\n"
"\n"
"/* Some extra SSE functions */\n"
"template<size_t i0, size_t i1, size_t i2, size_t i3>\n"
"INLINE const __m128 shuffle(const __m128& b) {\n"
"  return _mm_castsi128_ps(_mm_shuffle_epi32(_mm_castps_si128(b), _MM_SHUFFLE(i3, i2, i1, i0)));\n"
"}\n"
"template<size_t i> INLINE\n"
"__m128 expand(const __m128& b) { \n"
"  return shuffle<i, i, i, i>(b);\n"
"}\n"
"template<size_t index_0, size_t index_1, size_t index_2, size_t index_3>\n"
"INLINE const __m128i shuffle(const __m128i& a) {\n"
"  return _mm_shuffle_epi32(a, _MM_SHUFFLE(index_3, index_2, index_1, index_0));\n"
"}\n"
"template<size_t index>\n"
"INLINE const __m128i expand(const __m128i& b) {\n"
"  return shuffle<index, index, index, index>(b);\n"
"}\n"
"\n"
"/*! Base structure for scalar double word (32 bits) */\n"
"union scalar_dw {\n"
"  INLINE scalar_dw(void) {}\n"
"  INLINE scalar_dw(uint32_t u) { this->u = u; }\n"
"  INLINE scalar_dw(int32_t s) { this->s = s; }\n"
"  INLINE scalar_dw(float f) { this->f = f; }\n"
"  uint32_t u;\n"
"  int32_t s;\n"
"  float f;\n"
"  char data[4];\n"
"};\n"
"\n"
"/*! Base structure for scalar word (16 bits) */\n"
"union scalar_w {\n"
"  INLINE scalar_w(void) {}\n"
"  INLINE scalar_w(uint16_t u) { this->u = u; }\n"
"  INLINE scalar_w(int16_t s) { this->s = s; }\n"
"  INLINE float toFloat(void) const {\n"
"    union {uint16_t u[2]; float f;} x;\n"
"    x.u[0] = u;\n"
"    x.u[1] = 0;\n"
"    return x.f;\n"
"  }\n"
"  uint16_t u;\n"
"  int16_t s;\n"
"  char data[2];\n"
"};\n"
"\n"
"/*! Base structure for scalar byte (8 bits) */\n"
"union scalar_b {\n"
"  INLINE scalar_b(void) {}\n"
"  INLINE scalar_b(uint8_t u) { this->u = u; }\n"
"  INLINE scalar_b(int8_t s) { this->s = s; }\n"
"  INLINE float toFloat(void) const {\n"
"    union {uint8_t u[4]; float f;} x;\n"
"    x.u[0] = u;\n"
"    x.u[1] = 0;\n"
"    x.u[2] = 0;\n"
"    x.u[3] = 0;\n"
"    return x.f;\n"
"  }\n"
"  uint8_t u;\n"
"  int8_t s;\n"
"  char data[1];\n"
"};\n"
"\n"
"/*! Base structure for scalar mask */\n"
"union scalar_m { uint32_t u; int32_t s; float f; };\n"
"\n"
"/*! Base structure for vectors 4 / 8 / 16 / 32 double words */\n"
"template <uint32_t vectorNum>\n"
"struct simd_dw {\n"
"  INLINE simd_dw(void) {}\n"
"  INLINE simd_dw(const scalar_dw &s) {\n"
"    for (uint32_t i = 0; i < vectorNum; ++i) m[i] = _mm_load1_ps(&s.f);\n"
"  }\n"
"  simd_dw &operator= (const scalar_dw &s) {\n"
"    for (uint32_t i = 0; i < vectorNum; ++i) m[i] = _mm_load1_ps(&s.f);\n"
"    return *this;\n"
"  }\n"
"  __m128 m[vectorNum];\n"
"};\n"
"\n"
"/*! Base structure for vectors 4 / 8 / 16 / 32 words. We do not store 8 shorts\n"
" *  but only 4. This makes everything much simpler even if it is clearly slower\n"
" */\n"
"template <uint32_t vectorNum>\n"
"struct simd_w {\n"
"  INLINE simd_w(void) {}\n"
"  INLINE simd_w(const scalar_w &s) {\n"
"    const float f = s.toFloat();\n"
"    for (uint32_t i = 0; i < vectorNum; ++i) m[i] = _mm_load1_ps(&f);\n"
"  }\n"
"  simd_w &operator= (const scalar_w &s) {\n"
"    const float f = s.toFloat();\n"
"    for (uint32_t i = 0; i < vectorNum; ++i) m[i] = _mm_load1_ps(&f);\n"
"    return *this;\n"
"  }\n"
"  __m128 m[vectorNum];\n"
"};\n"
"\n"
"/*! Base structure for vectors 4 / 8 / 16 / 32 bytes. We do not store 16 bytes\n"
" *  but only 4. This makes everything much simpler even if it is clearly slower\n"
" */\n"
"template <uint32_t vectorNum>\n"
"struct simd_b {\n"
"  INLINE simd_b(void) {}\n"
"  INLINE simd_b(const scalar_b &s) {\n"
"    const float f = s.toFloat();\n"
"    for (uint32_t i = 0; i < vectorNum; ++i) m[i] = _mm_load1_ps(&f);\n"
"  }\n"
"  simd_b &operator= (const scalar_b &s) {\n"
"    const float f = s.toFloat();\n"
"    for (uint32_t i = 0; i < vectorNum; ++i) m[i] = _mm_load1_ps(&f);\n"
"    return *this;\n"
"  }\n"
"  __m128 m[vectorNum];\n"
"};\n"
"\n"
"/*! Base structure for 4 / 8 / 16 / 32 booleans (m stands for \"mask\") */\n"
"template <uint32_t vectorNum>\n"
"struct simd_m {\n"
"  INLINE simd_m(void) {}\n"
"  INLINE simd_m(scalar_m s) {\n"
"    for (uint32_t i = 0; i < vectorNum; ++i) m[i] = _mm_load1_ps(&s.f);\n"
"  }\n"
"  __m128 m[vectorNum];\n"
"};\n"
"\n"
"/*! Select instruction on vectors */\n"
"template <uint32_t vectorNum, template <uint32_t> class T>\n"
"INLINE void select(T<vectorNum> &dst,\n"
"                   const T<vectorNum> &src0,\n"
"                   const T<vectorNum> &src1,\n"
"                   const simd_m<vectorNum> &mask)\n"
"{\n"
"  for (uint32_t i = 0; i < vectorNum; ++i)\n"
"    dst.m[i] = _mm_blendv_ps(src0.m[i], src1.m[i], mask.m[i]);\n"
"}\n"
"\n"
"/*! To cast 32 bits values in sse registers through memory */\n"
"union cast_dw {\n"
"  INLINE cast_dw(uint32_t u0, uint32_t u1, uint32_t u2, uint32_t u3) {\n"
"    u[0] = u0; u[1] = u1; u[2] = u2; u[3] = u3;\n"
"  }\n"
"  INLINE cast_dw(int32_t s0, int32_t s1, int32_t s2, int32_t s3) {\n"
"    s[0] = s0; s[1] = s1; s[2] = s2; s[3] = s3;\n"
"  }\n"
"  INLINE cast_dw(float f0, float f1, float f2, float f3) {\n"
"    f[0] = f0; f[1] = f1; f[2] = f2; f[3] = f3;\n"
"  }\n"
"  INLINE cast_dw(const __m128 &v) : v(v) {}\n"
"  INLINE cast_dw(const __m128i &vi) : vi(vi) {}\n"
"  INLINE cast_dw(void) {}\n"
"  __m128 v;\n"
"  __m128i vi;\n"
"  char data[16];\n"
"  uint32_t u[4];\n"
"  int32_t s[4];\n"
"  float f[4];\n"
"};\n"
"static const cast_dw allTrue(0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff);\n"
"\n"
"/*! To cast 16 bits values in sse registers through memory */\n"
"union cast_w {\n"
"  INLINE cast_w(int16_t s0, int16_t s1, int16_t s2, int16_t s3) {\n"
"    s[0].v = s0; s[1].v = s1; s[2].v = s2; s[3].v = s3;\n"
"    s[0].pad = s[1].pad = s[2].pad = s[3].pad = 0;\n"
"  }\n"
"  INLINE cast_w(uint16_t u0, uint16_t u1, uint16_t u2, uint16_t u3) {\n"
"    u[0].v = u0; u[1].v = u1; u[2].v = u2; u[3].v = u3;\n"
"    u[0].pad = u[1].pad = u[2].pad = u[3].pad = 0;\n"
"  }\n"
"  INLINE cast_w(const __m128 &v) : v(v) {}\n"
"  INLINE cast_w(const __m128i &vi) : vi(vi) {}\n"
"  INLINE cast_w(void) {}\n"
"  __m128 v;\n"
"  __m128i vi;\n"
"  char data[16];\n"
"  struct { uint16_t v; uint16_t pad; } u[4];\n"
"  struct {  int16_t v;  int16_t pad; } s[4];\n"
"};\n"
"\n"
"/*! To cast 8 bits values in sse registers through memory */\n"
"union cast_b {\n"
"  INLINE cast_b(int8_t s0, int8_t s1, int8_t s2, int8_t s3) {\n"
"    s[0].v = s0; s[1].v = s1; s[2].v = s2; s[3].v = s3;\n"
"    for (uint32_t i = 0; i < 3; ++i)\n"
"      s[0].pad[i] = s[1].pad[i] = s[2].pad[i] = s[3].pad[i] = 0;\n"
"  }\n"
"  INLINE cast_b(uint8_t u0, uint8_t u1, uint8_t u2, uint8_t u3) {\n"
"    u[0].v = u0; u[1].v = u1; u[2].v = u2; u[3].v = u3;\n"
"    for (uint32_t i = 0; i < 3; ++i)\n"
"      s[0].pad[i] = s[1].pad[i] = s[2].pad[i] = s[3].pad[i] = 0;\n"
"  }\n"
"  INLINE cast_b(const __m128 &v) : v(v) {}\n"
"  INLINE cast_b(const __m128i &vi) : vi(vi) {}\n"
"  INLINE cast_b(void) {}\n"
"  __m128 v;\n"
"  __m128i vi;\n"
"  char data[16];\n"
"  struct { uint8_t v; uint8_t pad[3]; } u[4];\n"
"  struct {  int8_t v;  int8_t pad[3]; } s[4];\n"
"};\n"
"\n"
"/*! Make a mask true */\n"
"template <uint32_t vectorNum>\n"
"INLINE void allTrueMask(simd_m<vectorNum> &x) {\n"
"  for (uint32_t i = 0; i < vectorNum; ++i) x.m[i] = allTrue.v;\n"
"}\n"
"\n"
"/* Some convenient typedefs */\n"
"typedef scalar_dw  simd1dw;\n"
"typedef simd_dw<1> simd4dw;\n"
"typedef simd_dw<2> simd8dw;\n"
"typedef simd_dw<4> simd16dw;\n"
"typedef simd_dw<8> simd32dw;\n"
"typedef scalar_w   simd1w;\n"
"typedef simd_w<1>  simd4w;\n"
"typedef simd_w<2>  simd8w;\n"
"typedef simd_w<4>  simd16w;\n"
"typedef simd_w<8>  simd32w;\n"
"typedef scalar_b   simd1b;\n"
"typedef simd_b<1>  simd4b;\n"
"typedef simd_b<2>  simd8b;\n"
"typedef simd_b<4>  simd16b;\n"
"typedef simd_b<8>  simd32b;\n"
"typedef scalar_m   simd1m;\n"
"typedef simd_m<1>  simd4m;\n"
"typedef simd_m<2>  simd8m;\n"
"typedef simd_m<4>  simd16m;\n"
"typedef simd_m<8>  simd32m;\n"
"\n"
"/* Meta-programming crap to get the vector and the scalar types from the regular\n"
" * base C types\n"
" */\n"
"template <uint32_t vectorNum, typename T> struct SimTypeTrait {};\n"
"\n"
"#define DECL_TYPE_TRAIT(CTYPE, VECTOR_TYPE, SCALAR_TYPE, CAST_TYPE) \\\n"
"template <uint32_t vectorNum> \\\n"
"struct SimTypeTrait<vectorNum, CTYPE> { \\\n"
"  typedef VECTOR_TYPE Vector; \\\n"
"  typedef SCALAR_TYPE Scalar; \\\n"
"  typedef CAST_TYPE Cast; \\\n"
"};\n"
"DECL_TYPE_TRAIT(uint8_t, simd_b<vectorNum>, scalar_b, cast_b)\n"
"DECL_TYPE_TRAIT(int8_t, simd_b<vectorNum>, scalar_b, cast_b)\n"
"DECL_TYPE_TRAIT(uint16_t, simd_w<vectorNum>, scalar_w, cast_w)\n"
"DECL_TYPE_TRAIT(int16_t, simd_w<vectorNum>, scalar_w, cast_w)\n"
"DECL_TYPE_TRAIT(uint32_t, simd_dw<vectorNum>, scalar_dw, cast_dw)\n"
"DECL_TYPE_TRAIT(int32_t, simd_dw<vectorNum>, scalar_dw, cast_dw)\n"
"DECL_TYPE_TRAIT(float, simd_dw<vectorNum>, scalar_dw, cast_dw)\n"
"#undef DECL_TYPE_TRAIT\n"
"\n"
"//////////////////////////////////////////////////////////////////////////////\n"
"// Vector instructions\n"
"//////////////////////////////////////////////////////////////////////////////\n"
"/* Simple function to get the number of element per vector */\n"
"template <uint32_t vectorNum>\n"
"INLINE uint32_t elemNum(const simd_dw<vectorNum> &x) {\n"
"  return 4*vectorNum;\n"
"}\n"
"template <uint32_t vectorNum>\n"
"INLINE uint32_t elemNum(const simd_w<vectorNum> &x) {\n"
"  return 4*vectorNum;\n"
"}\n"
"template <uint32_t vectorNum>\n"
"INLINE uint32_t elemNum(const simd_b<vectorNum> &x) {\n"
"  return 4*vectorNum;\n"
"}\n"
"template <uint32_t vectorNum>\n"
"INLINE uint32_t elemNum(const simd_m<vectorNum> &x) {\n"
"  return 4*vectorNum;\n"
"}\n"
"\n"
"/* Build an integer mask from the mask vectors */\n"
"template <uint32_t vectorNum>\n"
"INLINE uint32_t mask(const simd_m<vectorNum> v) {\n"
"  uint32_t m = _mm_movemask_ps(v.m[0]);\n"
"  for (uint32_t i = 1; i < vectorNum; ++i)\n"
"    m |= (_mm_movemask_ps(v.m[i]) << (4*i));\n"
"  return m;\n"
"}\n"
"\n"
"/* MOV instruction */\n"
"template <uint32_t vectorNum>\n"
"INLINE void MOV_S32(simd_dw<vectorNum> &dst, const simd_dw<vectorNum> &v) {\n"
"  for (uint32_t i = 0; i < vectorNum; ++i) dst.m[i] = v.m[i];\n"
"}\n"
"template <uint32_t vectorNum>\n"
"INLINE void MOV_S32(simd_dw<vectorNum> &dst, const scalar_dw &x) {\n"
"  const __m128 v = _mm_load1_ps(&x.f);\n"
"  for (uint32_t i = 0; i < vectorNum; ++i) dst.m[i] = v;\n"
"}\n"
"template <uint32_t vectorNum>\n"
"INLINE void MOV_S16(simd_w<vectorNum> &dst, const simd_w<vectorNum> &v) {\n"
"  for (uint32_t i = 0; i < vectorNum; ++i) dst.m[i] = v.m[i];\n"
"}\n"
"template <uint32_t vectorNum>\n"
"INLINE void MOV_S16(simd_w<vectorNum> &dst, const scalar_w &x) {\n"
"  const float f = x.toFloat();\n"
"  const __m128 v = _mm_load1_ps(&f);\n"
"  for (uint32_t i = 0; i < vectorNum; ++i) dst.m[i] = v;\n"
"}\n"
"template <uint32_t vectorNum>\n"
"INLINE void MOV_S8(simd_b<vectorNum> &dst, const simd_b<vectorNum> &v) {\n"
"  for (uint32_t i = 0; i < vectorNum; ++i) dst.m[i] = v.m[i];\n"
"}\n"
"template <uint32_t vectorNum>\n"
"INLINE void MOV_S8(simd_b<vectorNum> &dst, const scalar_b &x) {\n"
"  const float f = x.toFloat();\n"
"  const __m128 v = _mm_load1_ps(&f);\n"
"  for (uint32_t i = 0; i < vectorNum; ++i) dst.m[i] = v;\n"
"}\n"
"\n"
"/* Vector instructions that use sse* */\n"
"#define VEC_OP(DST_TYPE, SRC_TYPE, SCALAR_TYPE, NAME, INTRINSIC_NAME, FN, FN0, FN1)\\\n"
"template <uint32_t vectorNum>\\\n"
"INLINE void NAME(DST_TYPE &dst, const SRC_TYPE &v0, const SRC_TYPE &v1) {\\\n"
"  for (uint32_t i = 0; i < vectorNum; ++i)\\\n"
"    dst.m[i] = FN(INTRINSIC_NAME(FN0(v0.m[i]), FN1(v1.m[i])));\\\n"
"}\\\n"
"template <uint32_t vectorNum>\\\n"
"INLINE void NAME(DST_TYPE &dst, const SRC_TYPE &v0, const SCALAR_TYPE &v1) {\\\n"
"  NAME(dst, v0, SRC_TYPE(v1));\\\n"
"}\\\n"
"template <uint32_t vectorNum>\\\n"
"INLINE void NAME(DST_TYPE &dst, const SCALAR_TYPE &v0, const SRC_TYPE &v1) {\\\n"
"  NAME(dst, SRC_TYPE(v0), v1);\\\n"
"}\\\n"
"template <uint32_t vectorNum>\\\n"
"INLINE void NAME(DST_TYPE &dst, const SCALAR_TYPE &v0, const SCALAR_TYPE &v1) {\\\n"
"  NAME(dst, SRC_TYPE(v0), SRC_TYPE(v1));\\\n"
"}\n"
"VEC_OP(simd_dw<vectorNum>, simd_dw<vectorNum>, scalar_dw, ADD_F, _mm_add_ps, ID, ID, ID);\n"
"VEC_OP(simd_dw<vectorNum>, simd_dw<vectorNum>, scalar_dw, SUB_F, _mm_sub_ps, ID, ID, ID);\n"
"VEC_OP(simd_dw<vectorNum>, simd_dw<vectorNum>, scalar_dw, MUL_F, _mm_mul_ps, ID, ID, ID);\n"
"VEC_OP(simd_dw<vectorNum>, simd_dw<vectorNum>, scalar_dw, DIV_F, _mm_div_ps, ID, ID, ID);\n"
"VEC_OP(simd_m<vectorNum>,  simd_dw<vectorNum>, scalar_dw, EQ_F, _mm_cmpeq_ps, ID, ID, ID);\n"
"VEC_OP(simd_m<vectorNum>,  simd_dw<vectorNum>, scalar_dw, NE_F, _mm_cmpneq_ps, ID, ID, ID);\n"
"VEC_OP(simd_m<vectorNum>,  simd_dw<vectorNum>, scalar_dw, LT_F, _mm_cmplt_ps, ID, ID, ID);\n"
"VEC_OP(simd_m<vectorNum>,  simd_dw<vectorNum>, scalar_dw, LE_F, _mm_cmple_ps, ID, ID, ID);\n"
"VEC_OP(simd_m<vectorNum>,  simd_dw<vectorNum>, scalar_dw, GT_F, _mm_cmpgt_ps, ID, ID, ID);\n"
"VEC_OP(simd_m<vectorNum>,  simd_dw<vectorNum>, scalar_dw, GE_F, _mm_cmpge_ps, ID, ID, ID);\n"
"VEC_OP(simd_dw<vectorNum>, simd_dw<vectorNum>, scalar_dw, ADD_S32, _mm_add_epi32, SI2PS, PS2SI, PS2SI);\n"
"VEC_OP(simd_dw<vectorNum>, simd_dw<vectorNum>, scalar_dw, SUB_S32, _mm_sub_epi32, SI2PS, PS2SI, PS2SI);\n"
"VEC_OP(simd_m<vectorNum>,  simd_dw<vectorNum>, scalar_dw, EQ_S32, _mm_cmpeq_epi32, SI2PS, PS2SI, PS2SI);\n"
"VEC_OP(simd_m<vectorNum>,  simd_dw<vectorNum>, scalar_dw, LT_S32, _mm_cmplt_epi32, SI2PS, PS2SI, PS2SI);\n"
"VEC_OP(simd_m<vectorNum>,  simd_dw<vectorNum>, scalar_dw, GT_S32, _mm_cmpgt_epi32, SI2PS, PS2SI, PS2SI);\n"
"VEC_OP(simd_dw<vectorNum>, simd_dw<vectorNum>, scalar_dw, AND_S32, _mm_and_ps, ID, ID, ID);\n"
"VEC_OP(simd_dw<vectorNum>, simd_dw<vectorNum>, scalar_dw, OR_S32, _mm_or_ps, ID, ID, ID);\n"
"VEC_OP(simd_dw<vectorNum>, simd_dw<vectorNum>, scalar_dw, XOR_S32, _mm_xor_ps, ID, ID, ID);\n"
"VEC_OP(simd_m<vectorNum>,  simd_w<vectorNum>,  scalar_w,  EQ_S16, _mm_cmpeq_epi32, SI2PS, PS2SI, PS2SI);\n"
"VEC_OP(simd_w<vectorNum>,  simd_w<vectorNum>,  scalar_w, ADD_S16, _mm_add_epi16, SI2PS, PS2SI, PS2SI);\n"
"VEC_OP(simd_w<vectorNum>,  simd_w<vectorNum>,  scalar_w, SUB_S16, _mm_sub_epi16, SI2PS, PS2SI, PS2SI);\n"
"VEC_OP(simd_w<vectorNum>,  simd_w<vectorNum>,  scalar_w, AND_S16, _mm_and_ps, ID, ID, ID);\n"
"VEC_OP(simd_w<vectorNum>,  simd_w<vectorNum>,  scalar_w, OR_S16, _mm_or_ps, ID, ID, ID);\n"
"VEC_OP(simd_w<vectorNum>,  simd_w<vectorNum>,  scalar_w, XOR_S16, _mm_xor_ps, ID, ID, ID);\n"
"VEC_OP(simd_m<vectorNum>,  simd_b<vectorNum>,  scalar_b,  EQ_S8, _mm_cmpeq_epi32, SI2PS, PS2SI, PS2SI);\n"
"VEC_OP(simd_b<vectorNum>,  simd_b<vectorNum>,  scalar_b, ADD_S8, _mm_add_epi8, SI2PS, PS2SI, PS2SI);\n"
"VEC_OP(simd_b<vectorNum>,  simd_b<vectorNum>,  scalar_b, SUB_S8, _mm_sub_epi8, SI2PS, PS2SI, PS2SI);\n"
"VEC_OP(simd_b<vectorNum>,  simd_b<vectorNum>,  scalar_b, AND_S8, _mm_and_ps, ID, ID, ID);\n"
"VEC_OP(simd_b<vectorNum>,  simd_b<vectorNum>,  scalar_b, OR_S8, _mm_or_ps, ID, ID, ID);\n"
"VEC_OP(simd_b<vectorNum>,  simd_b<vectorNum>,  scalar_b, XOR_S8, _mm_xor_ps, ID, ID, ID);\n"
"VEC_OP(simd_m<vectorNum>,  simd_m<vectorNum>,  scalar_m, AND_M,   _mm_and_ps, ID, ID, ID);\n"
"#undef VEC_OP\n"
"\n"
"/* Vector integer operations that we can get by switching argument order */\n"
"#define VEC_OP(DST_TYPE, SRC_TYPE, NAME, INTRINSIC_NAME, FN, FN0, FN1)\\\n"
"template <uint32_t vectorNum>\\\n"
"INLINE void NAME(DST_TYPE &dst, const SRC_TYPE &v0, const SRC_TYPE &v1) {\\\n"
"  for (uint32_t i = 0; i < vectorNum; ++i)\\\n"
"    dst.m[i] = _mm_xor_ps(FN(INTRINSIC_NAME(FN1(v0.m[i]), FN0(v1.m[i]))), allTrue.v);\\\n"
"}\\\n"
"template <uint32_t vectorNum>\\\n"
"INLINE void NAME(DST_TYPE &dst, const SRC_TYPE &v0, const scalar_dw &v1) {\\\n"
"  NAME(dst, v0, simd_dw<vectorNum>(v1));\\\n"
"}\\\n"
"template <uint32_t vectorNum>\\\n"
"INLINE void NAME(DST_TYPE &dst, const scalar_dw &v0, const SRC_TYPE &v1) {\\\n"
"  NAME(dst, simd_dw<vectorNum>(v0), v1);\\\n"
"}\\\n"
"template <uint32_t vectorNum>\\\n"
"INLINE void NAME(DST_TYPE &dst, const scalar_dw &v0, const scalar_dw &v1) {\\\n"
"  NAME(dst, simd_dw<vectorNum>(v0), simd_dw<vectorNum>(v1));\\\n"
"}\n"
"VEC_OP(simd_m<vectorNum>, simd_dw<vectorNum>, GE_S32, _mm_cmplt_epi32, SI2PS, PS2SI, PS2SI);\n"
"VEC_OP(simd_m<vectorNum>, simd_dw<vectorNum>, LE_S32, _mm_cmpgt_epi32, SI2PS, PS2SI, PS2SI);\n"
"#undef VEC_OP\n"
"\n"
"/* Vector binary integer operations that require C */\n"
"#define VEC_OP(DST_TYPE, SRC_TYPE, SCALAR_TYPE, CAST_TYPE, NAME, OP, FIELD)\\\n"
"template <uint32_t vectorNum>\\\n"
"INLINE void NAME(DST_TYPE &dst, const SRC_TYPE &v0, const SRC_TYPE &v1) {\\\n"
"  for (uint32_t i = 0; i < vectorNum; ++i) {\\\n"
"    CAST_TYPE c0(v0.m[i]), c1(v1.m[i]), d;\\\n"
"    for (uint32_t j = 0; j < 4; ++j)\\\n"
"      d.FIELD = c0.FIELD OP c1.FIELD;\\\n"
"    dst.m[i] = d.v;\\\n"
"  }\\\n"
"}\\\n"
"template <uint32_t vectorNum>\\\n"
"INLINE void NAME(DST_TYPE &dst, const SRC_TYPE &v0, const SCALAR_TYPE &v1) {\\\n"
"  NAME(dst, v0, SRC_TYPE(v1));\\\n"
"}\\\n"
"template <uint32_t vectorNum>\\\n"
"INLINE void NAME(DST_TYPE &dst, const SCALAR_TYPE &v0, const SRC_TYPE &v1) {\\\n"
"  NAME(dst, SRC_TYPE(v0), v1);\\\n"
"}\\\n"
"template <uint32_t vectorNum>\\\n"
"INLINE void NAME(DST_TYPE &dst, const SCALAR_TYPE &v0, const SCALAR_TYPE &v1) {\\\n"
"  NAME(dst, SRC_TYPE(v0), SRC_TYPE(v1));\\\n"
"}\n"
"VEC_OP(simd_dw<vectorNum>, simd_dw<vectorNum>, scalar_dw, cast_dw, SHL_U32, <<, s[j]);\n"
"VEC_OP(simd_dw<vectorNum>, simd_dw<vectorNum>, scalar_dw, cast_dw, MUL_S32, *, s[j]);\n"
"VEC_OP(simd_dw<vectorNum>, simd_dw<vectorNum>, scalar_dw, cast_dw, DIV_S32, /, s[j]);\n"
"VEC_OP(simd_dw<vectorNum>, simd_dw<vectorNum>, scalar_dw, cast_dw, REM_S32, %, s[j]);\n"
"VEC_OP(simd_dw<vectorNum>, simd_dw<vectorNum>, scalar_dw, cast_dw, MUL_U32, *, u[j]);\n"
"VEC_OP(simd_dw<vectorNum>, simd_dw<vectorNum>, scalar_dw, cast_dw, DIV_U32, /, u[j]);\n"
"VEC_OP(simd_dw<vectorNum>, simd_dw<vectorNum>, scalar_dw, cast_dw, REM_U32, %, u[j]);\n"
"VEC_OP(simd_w<vectorNum>,  simd_w<vectorNum>,  scalar_w,  cast_w,  SHL_U16, <<, s[j].v);\n"
"VEC_OP(simd_w<vectorNum>,  simd_w<vectorNum>,  scalar_w,  cast_w,  MUL_S16, *, s[j].v);\n"
"VEC_OP(simd_w<vectorNum>,  simd_w<vectorNum>,  scalar_w,  cast_w,  DIV_S16, /, s[j].v);\n"
"VEC_OP(simd_w<vectorNum>,  simd_w<vectorNum>,  scalar_w,  cast_w,  REM_S16, %, s[j].v);\n"
"VEC_OP(simd_w<vectorNum>,  simd_w<vectorNum>,  scalar_w,  cast_w,  MUL_U16, *, u[j].v);\n"
"VEC_OP(simd_w<vectorNum>,  simd_w<vectorNum>,  scalar_w,  cast_w,  DIV_U16, /, u[j].v);\n"
"VEC_OP(simd_w<vectorNum>,  simd_w<vectorNum>,  scalar_w,  cast_w,  REM_U16, %, u[j].v);\n"
"VEC_OP(simd_b<vectorNum>,  simd_b<vectorNum>,  scalar_b,  cast_b,  SHL_U8, <<, s[j].v);\n"
"VEC_OP(simd_b<vectorNum>,  simd_b<vectorNum>,  scalar_b,  cast_b,  MUL_S8, *, s[j].v);\n"
"VEC_OP(simd_b<vectorNum>,  simd_b<vectorNum>,  scalar_b,  cast_b,  DIV_S8, /, s[j].v);\n"
"VEC_OP(simd_b<vectorNum>,  simd_b<vectorNum>,  scalar_b,  cast_b,  REM_S8, %, s[j].v);\n"
"VEC_OP(simd_b<vectorNum>,  simd_b<vectorNum>,  scalar_b,  cast_b,  MUL_U8, *, u[j].v);\n"
"VEC_OP(simd_b<vectorNum>,  simd_b<vectorNum>,  scalar_b,  cast_b,  DIV_U8, /, u[j].v);\n"
"VEC_OP(simd_b<vectorNum>,  simd_b<vectorNum>,  scalar_b,  cast_b,  REM_U8, %, u[j].v);\n"
"#undef VEC_OP\n"
"\n"
"/* Vector compare vectors that require C */\n"
"#define VEC_OP(DST_TYPE, SRC_TYPE, SCALAR_TYPE, CAST_TYPE, NAME, OP, FIELD)\\\n"
"template <uint32_t vectorNum>\\\n"
"INLINE void NAME(DST_TYPE &dst, const SRC_TYPE &v0, const SRC_TYPE &v1) {\\\n"
"  for (uint32_t i = 0; i < vectorNum; ++i) {\\\n"
"    CAST_TYPE c0(v0.m[i]), c1(v1.m[i]);\\\n"
"    cast_dw d;\\\n"
"    for (uint32_t j = 0; j < 4; ++j)\\\n"
"      d.u[j] = (c0.FIELD OP c1.FIELD) ? ~0u : 0u;\\\n"
"    dst.m[i] = d.v;\\\n"
"  }\\\n"
"}\\\n"
"template <uint32_t vectorNum>\\\n"
"INLINE void NAME(DST_TYPE &dst, const SRC_TYPE &v0, const SCALAR_TYPE &v1) {\\\n"
"  NAME(dst, v0, SRC_TYPE(v1));\\\n"
"}\\\n"
"template <uint32_t vectorNum>\\\n"
"INLINE void NAME(DST_TYPE &dst, const SCALAR_TYPE &v0, const SRC_TYPE &v1) {\\\n"
"  NAME(dst, SRC_TYPE(v0), v1);\\\n"
"}\\\n"
"template <uint32_t vectorNum>\\\n"
"INLINE void NAME(DST_TYPE &dst, const SCALAR_TYPE &v0, const SCALAR_TYPE &v1) {\\\n"
"  NAME(dst, SRC_TYPE(v0), SRC_TYPE(v1));\\\n"
"}\n"
"VEC_OP(simd_m<vectorNum>, simd_dw<vectorNum>, scalar_dw, cast_dw, LE_U32, <=, u[j]);\n"
"VEC_OP(simd_m<vectorNum>, simd_dw<vectorNum>, scalar_dw, cast_dw, LT_U32, <, u[j]);\n"
"VEC_OP(simd_m<vectorNum>, simd_dw<vectorNum>, scalar_dw, cast_dw, GE_U32, >=, u[j]);\n"
"VEC_OP(simd_m<vectorNum>, simd_dw<vectorNum>, scalar_dw, cast_dw, GT_U32, >, u[j]);\n"
"VEC_OP(simd_m<vectorNum>, simd_w<vectorNum>,  scalar_w,  cast_w,  LE_U16, <=, u[j].v);\n"
"VEC_OP(simd_m<vectorNum>, simd_w<vectorNum>,  scalar_w,  cast_w,  LT_U16, <, u[j].v);\n"
"VEC_OP(simd_m<vectorNum>, simd_w<vectorNum>,  scalar_w,  cast_w,  GE_U16, >=, u[j].v);\n"
"VEC_OP(simd_m<vectorNum>, simd_w<vectorNum>,  scalar_w,  cast_w,  GT_U16, >, u[j].v);\n"
"VEC_OP(simd_m<vectorNum>, simd_w<vectorNum>,  scalar_w,  cast_w,  LE_S16, <=, s[j].v);\n"
"VEC_OP(simd_m<vectorNum>, simd_w<vectorNum>,  scalar_w,  cast_w,  LT_S16, <, s[j].v);\n"
"VEC_OP(simd_m<vectorNum>, simd_w<vectorNum>,  scalar_w,  cast_w,  GE_S16, >=, s[j].v);\n"
"VEC_OP(simd_m<vectorNum>, simd_w<vectorNum>,  scalar_w,  cast_w,  GT_S16, >, s[j].v);\n"
"VEC_OP(simd_m<vectorNum>, simd_b<vectorNum>,  scalar_b,  cast_b,  LE_U8, <=, u[j].v);\n"
"VEC_OP(simd_m<vectorNum>, simd_b<vectorNum>,  scalar_b,  cast_b,  LT_U8, <, u[j].v);\n"
"VEC_OP(simd_m<vectorNum>, simd_b<vectorNum>,  scalar_b,  cast_b,  GE_U8, >=, u[j].v);\n"
"VEC_OP(simd_m<vectorNum>, simd_b<vectorNum>,  scalar_b,  cast_b,  GT_U8, >, u[j].v);\n"
"VEC_OP(simd_m<vectorNum>, simd_b<vectorNum>,  scalar_b,  cast_b,  LE_S8, <=, s[j].v);\n"
"VEC_OP(simd_m<vectorNum>, simd_b<vectorNum>,  scalar_b,  cast_b,  LT_S8, <, s[j].v);\n"
"VEC_OP(simd_m<vectorNum>, simd_b<vectorNum>,  scalar_b,  cast_b,  GE_S8, >=, s[j].v);\n"
"VEC_OP(simd_m<vectorNum>, simd_b<vectorNum>,  scalar_b,  cast_b,  GT_S8, >, s[j].v);\n"
"#undef VEC_OP\n"
"\n"
"/* Get NE from EQ */\n"
"template <uint32_t vectorNum>\n"
"INLINE void NE_S32(simd_m<vectorNum> &dst,\n"
"                   const simd_dw<vectorNum> &v0,\n"
"                   const simd_dw<vectorNum> &v1)\n"
"{\n"
"  for (uint32_t i = 0; i < vectorNum; ++i)\n"
"    dst.m[i] = _mm_xor_ps(allTrue.v, SI2PS(_mm_cmpeq_epi32(PS2SI(v0.m[i]), PS2SI(v1.m[i]))));\n"
"}\n"
"template <uint32_t vectorNum>\n"
"INLINE void NE_S32(simd_m<vectorNum> &dst,\n"
"                   const simd_dw<vectorNum> &v0,\n"
"                   const scalar_dw &v1)\n"
"{\n"
"  NE_S32(dst, v0, simd_dw<vectorNum>(v1));\n"
"}\n"
"template <uint32_t vectorNum>\n"
"INLINE void NE_S32(simd_m<vectorNum> &dst,\n"
"                   const scalar_dw &v0,\n"
"                   const simd_dw<vectorNum> &v1)\n"
"{\n"
"  NE_S32(dst, simd_dw<vectorNum>(v0), v1);\n"
"}\n"
"template <uint32_t vectorNum>\n"
"INLINE void NE_S16(simd_m<vectorNum> &dst,\n"
"                   const simd_w<vectorNum> &v0,\n"
"                   const simd_w<vectorNum> &v1)\n"
"{\n"
"  for (uint32_t i = 0; i < vectorNum; ++i)\n"
"    dst.m[i] = _mm_xor_ps(allTrue.v, SI2PS(_mm_cmpeq_epi32(PS2SI(v0.m[i]), PS2SI(v1.m[i]))));\n"
"}\n"
"template <uint32_t vectorNum>\n"
"INLINE void NE_S16(simd_m<vectorNum> &dst,\n"
"                   const simd_w<vectorNum> &v0,\n"
"                   const scalar_w &v1)\n"
"{\n"
"  NE_S16(dst, v0, simd_w<vectorNum>(v1));\n"
"}\n"
"template <uint32_t vectorNum>\n"
"INLINE void NE_S16(simd_m<vectorNum> &dst,\n"
"                   const scalar_w &v0,\n"
"                   const simd_w<vectorNum> &v1)\n"
"{\n"
"  NE_S16(dst, simd_w<vectorNum>(v0), v1);\n"
"}\n"
"template <uint32_t vectorNum>\n"
"INLINE void NE_S16(simd_m<vectorNum> &dst,\n"
"                   const scalar_w &v0,\n"
"                   const scalar_w &v1)\n"
"{\n"
"  NE_S16(dst, simd_w<vectorNum>(v0), simd_w<vectorNum>(v1));\n"
"}\n"
"template <uint32_t vectorNum>\n"
"INLINE void NE_S8(simd_m<vectorNum> &dst,\n"
"                  const simd_b<vectorNum> &v0,\n"
"                  const simd_b<vectorNum> &v1)\n"
"{\n"
"  for (uint32_t i = 0; i < vectorNum; ++i)\n"
"    dst.m[i] = _mm_xor_ps(allTrue.v, SI2PS(_mm_cmpeq_epi32(PS2SI(v0.m[i]), PS2SI(v1.m[i]))));\n"
"}\n"
"template <uint32_t vectorNum>\n"
"INLINE void NE_S8(simd_m<vectorNum> &dst,\n"
"                  const simd_b<vectorNum> &v0,\n"
"                  const scalar_b &v1)\n"
"{\n"
"  NE_S8(dst, v0, simd_b<vectorNum>(v1));\n"
"}\n"
"template <uint32_t vectorNum>\n"
"INLINE void NE_S8(simd_m<vectorNum> &dst,\n"
"                  const scalar_b &v0,\n"
"                  const simd_b<vectorNum> &v1)\n"
"{\n"
"  NE_S8(dst, simd_b<vectorNum>(v0), v1);\n"
"}\n"
"template <uint32_t vectorNum>\n"
"INLINE void NE_S8(simd_m<vectorNum> &dst,\n"
"                  const scalar_b &v0,\n"
"                  const scalar_b &v1)\n"
"{\n"
"  NE_S8(dst, simd_b<vectorNum>(v0), simd_b<vectorNum>(v1));\n"
"}\n"
"\n"
"\n"
"template <typename DstCType,\n"
"          typename SrcCType,\n"
"          uint32_t vectorNum,\n"
"          template <uint32_t> class DstType,\n"
"          template <uint32_t> class SrcType>\n"
"INLINE void CVT(DstType<vectorNum> &dst, const SrcType<vectorNum> &src)\n"
"{\n"
"  for (uint32_t i = 0; i < vectorNum; ++i) {\n"
"    const typename SimTypeTrait<vectorNum, SrcCType>::Cast srcCast(src.m[i]);\n"
"    const DstCType x0 = (DstCType) *(const SrcCType*) (srcCast.data + 0);\n"
"    const DstCType x1 = (DstCType) *(const SrcCType*) (srcCast.data + 4);\n"
"    const DstCType x2 = (DstCType) *(const SrcCType*) (srcCast.data + 8);\n"
"    const DstCType x3 = (DstCType) *(const SrcCType*) (srcCast.data + 12);\n"
"    const typename SimTypeTrait<vectorNum, DstCType>::Cast dstCast(x0, x1, x2, x3);\n"
"    dst.m[i] = dstCast.v;\n"
"  }\n"
"}\n"
"\n"
"template <typename DstCType,\n"
"          typename SrcCType,\n"
"          uint32_t vectorNum,\n"
"          template <uint32_t> class DstType,\n"
"          class SrcType>\n"
"INLINE void CVT(DstType<vectorNum> &dst, const SrcType &src)\n"
"{\n"
"  for (uint32_t i = 0; i < vectorNum; ++i) {\n"
"    const SrcCType from = *((SrcCType *) src.data);\n"
"    const DstCType x = (DstCType) from;\n"
"    const typename SimTypeTrait<vectorNum, DstCType>::Cast dstCast(x,x,x,x);\n"
"    dst.m[i] = dstCast.v;\n"
"  }\n"
"}\n"
"\n"
"/* Load from contiguous double words */\n"
"template <uint32_t vectorNum>\n"
"INLINE void LOAD(simd_dw<vectorNum> &dst, const char *ptr) {\n"
"  for (uint32_t i = 0; i < vectorNum; ++i)\n"
"    dst.m[i] = _mm_loadu_ps((const float*) ptr + 4*i);\n"
"}\n"
"\n"
"/* Store to contiguous double words */\n"
"template <uint32_t vectorNum>\n"
"INLINE void STORE(const simd_dw<vectorNum> &src, char *ptr) {\n"
"  for (uint32_t i = 0; i < vectorNum; ++i)\n"
"    _mm_storeu_ps((float*) ptr + 4*i, src.m[i]);\n"
"}\n"
"\n"
"/* Load from contiguous words */\n"
"template <uint32_t vectorNum>\n"
"INLINE void LOAD(simd_w<vectorNum> &dst, const char *ptr) {\n"
"  for (uint32_t i = 0; i < vectorNum; ++i) {\n"
"    const uint16_t u0 = *((uint16_t*) ptr + 4*i + 0);\n"
"    const uint16_t u1 = *((uint16_t*) ptr + 4*i + 1);\n"
"    const uint16_t u2 = *((uint16_t*) ptr + 4*i + 2);\n"
"    const uint16_t u3 = *((uint16_t*) ptr + 4*i + 3);\n"
"    const cast_w w(u0,u1,u2,u3);\n"
"    dst.m[i] = w.v;\n"
"  }\n"
"}\n"
"\n"
"/* Store to contiguous words */\n"
"template <uint32_t vectorNum>\n"
"INLINE void STORE(const simd_w<vectorNum> &src, char *ptr) {\n"
"  for (uint32_t i = 0; i < vectorNum; ++i) {\n"
"    const cast_w w(src.m[i]);\n"
"    *((uint16_t*) ptr + 4*i + 0) = w.u[0].v;\n"
"    *((uint16_t*) ptr + 4*i + 1) = w.u[1].v;\n"
"    *((uint16_t*) ptr + 4*i + 2) = w.u[2].v;\n"
"    *((uint16_t*) ptr + 4*i + 3) = w.u[3].v;\n"
"  }\n"
"}\n"
"\n"
"/* Load from contiguous bytes */\n"
"template <uint32_t vectorNum>\n"
"INLINE void LOAD(simd_b<vectorNum> &dst, const char *ptr) {\n"
"  for (uint32_t i = 0; i < vectorNum; ++i) {\n"
"    const uint8_t u0 = *((uint8_t*) ptr + 4*i + 0);\n"
"    const uint8_t u1 = *((uint8_t*) ptr + 4*i + 1);\n"
"    const uint8_t u2 = *((uint8_t*) ptr + 4*i + 2);\n"
"    const uint8_t u3 = *((uint8_t*) ptr + 4*i + 3);\n"
"    const cast_b w(u0,u1,u2,u3);\n"
"    dst.m[i] = w.v;\n"
"  }\n"
"}\n"
"\n"
"/* Store to contiguous bytes */\n"
"template <uint32_t vectorNum>\n"
"INLINE void STORE(const simd_b<vectorNum> &src, char *ptr) {\n"
"  for (uint32_t i = 0; i < vectorNum; ++i) {\n"
"    const cast_b w(src.m[i]);\n"
"    *((uint8_t*) ptr + 4*i + 0) = w.u[0].v;\n"
"    *((uint8_t*) ptr + 4*i + 1) = w.u[1].v;\n"
"    *((uint8_t*) ptr + 4*i + 2) = w.u[2].v;\n"
"    *((uint8_t*) ptr + 4*i + 3) = w.u[3].v;\n"
"  }\n"
"}\n"
"\n"
"/* Load immediates */\n"
"template <uint32_t vectorNum>\n"
"INLINE void LOADI(simd_dw<vectorNum> &dst, uint32_t u) {\n"
"  union { uint32_t u; float f; } cast;\n"
"  cast.u = u;\n"
"  for (uint32_t i = 0; i < vectorNum; ++i)\n"
"    dst.m[i] = _mm_load1_ps(&cast.f);\n"
"}\n"
"template <uint32_t vectorNum>\n"
"INLINE void LOADI(simd_w<vectorNum> &dst, uint16_t u) {\n"
"  union { uint32_t u; float f; } cast;\n"
"  cast.u = u;\n"
"  for (uint32_t i = 0; i < vectorNum; ++i)\n"
"    dst.m[i] = _mm_load1_ps(&cast.f);\n"
"}\n"
"template <uint32_t vectorNum>\n"
"INLINE void LOADI(simd_b<vectorNum> &dst, uint8_t u) {\n"
"  union { uint32_t u; float f; } cast;\n"
"  cast.u = u;\n"
"  for (uint32_t i = 0; i < vectorNum; ++i)\n"
"    dst.m[i] = _mm_load1_ps(&cast.f);\n"
"}\n"
"\n"
"/* Scatter for bytes, shorts and integers */\n"
"#define DECL_SCATTER(VECTOR_TYPE, SCALAR_TYPE, CTYPE, MASK) \\\n"
"template <uint32_t vectorNum> \\\n"
"INLINE void SCATTER(const simd_dw<vectorNum> &address, \\\n"
"                    const VECTOR_TYPE<vectorNum> &value, \\\n"
"                    char *base_address, \\\n"
"                    uint32_t offset = 0) \\\n"
"{ \\\n"
"  for (uint32_t i = 0; i < vectorNum; ++i) { \\\n"
"    const uint32_t v0 = _mm_extract_epi32(PS2SI(value.m[i]), 0) & MASK; \\\n"
"    const uint32_t v1 = _mm_extract_epi32(PS2SI(value.m[i]), 1) & MASK; \\\n"
"    const uint32_t v2 = _mm_extract_epi32(PS2SI(value.m[i]), 2) & MASK; \\\n"
"    const uint32_t v3 = _mm_extract_epi32(PS2SI(value.m[i]), 3) & MASK; \\\n"
"    const uint32_t o0 = _mm_extract_epi32(PS2SI(address.m[i]), 0) + offset; \\\n"
"    const uint32_t o1 = _mm_extract_epi32(PS2SI(address.m[i]), 1) + offset; \\\n"
"    const uint32_t o2 = _mm_extract_epi32(PS2SI(address.m[i]), 2) + offset; \\\n"
"    const uint32_t o3 = _mm_extract_epi32(PS2SI(address.m[i]), 3) + offset; \\\n"
"    *(CTYPE *)(base_address + o0) = v0; \\\n"
"    *(CTYPE *)(base_address + o1) = v1; \\\n"
"    *(CTYPE *)(base_address + o2) = v2; \\\n"
"    *(CTYPE *)(base_address + o3) = v3; \\\n"
"  } \\\n"
"} \\\n"
"template <uint32_t vectorNum> \\\n"
"INLINE void SCATTER(const simd_dw<vectorNum> &address, \\\n"
"                    const SCALAR_TYPE &value, \\\n"
"                    char *base_address, \\\n"
"                    uint32_t offset = 0) \\\n"
"{ \\\n"
"  SCATTER(address, VECTOR_TYPE<vectorNum>(value), base_address, offset); \\\n"
"} \\\n"
"template <uint32_t vectorNum> \\\n"
"INLINE void SCATTER(const scalar_dw &address, \\\n"
"                    const VECTOR_TYPE<vectorNum> &value, \\\n"
"                    char *base_address, \\\n"
"                    uint32_t offset = 0) \\\n"
"{ \\\n"
"  SCATTER(simd_dw<vectorNum>(address), value, base_address, offset); \\\n"
"}\n"
"DECL_SCATTER(simd_dw, scalar_dw, uint32_t, 0xffffffff)\n"
"DECL_SCATTER(simd_w,  scalar_w,  uint16_t, 0xffff)\n"
"DECL_SCATTER(simd_b,  scalar_b,  uint8_t,  0xff)\n"
"#undef DECL_SCATTER\n"
"\n"
"template <typename T, typename U, typename V, uint32_t vectorNum>\n"
"INLINE void SCATTER2(const T &address,\n"
"                     const U &value0,\n"
"                     const V &value1,\n"
"                     char *base_address)\n"
"{\n"
"  SCATTER(address, value0, base_address, 0);\n"
"  SCATTER(address, value1, base_address, 4);\n"
"}\n"
"template <typename T, typename U, typename V, typename W, uint32_t vectorNum>\n"
"INLINE void SCATTER3(const T &address,\n"
"                     const U &value0,\n"
"                     const V &value1,\n"
"                     const W &value2,\n"
"                     char *base_address)\n"
"{\n"
"  SCATTER(address, value0, base_address, 0);\n"
"  SCATTER(address, value1, base_address, 4);\n"
"  SCATTER(address, value2, base_address, 8);\n"
"}\n"
"template <typename T, typename U, typename V, typename W, typename X, uint32_t vectorNum>\n"
"INLINE void SCATTER4(const T &address,\n"
"                     const U &value0,\n"
"                     const V &value1,\n"
"                     const W &value2,\n"
"                     const X &value3,\n"
"                     char *base_address)\n"
"{\n"
"  SCATTER(address, value0, base_address, 0);\n"
"  SCATTER(address, value1, base_address, 4);\n"
"  SCATTER(address, value2, base_address, 8);\n"
"  SCATTER(address, value3, base_address, 12);\n"
"}\n"
"\n"
"/* Masked scatter will only store unmasked lanes */\n"
"#define DECL_MASKED_SCATTER(VECTOR_TYPE, SCALAR_TYPE, CTYPE, MASK) \\\n"
"template <uint32_t vectorNum> \\\n"
"INLINE void MASKED_SCATTER(const simd_dw<vectorNum> &address, \\\n"
"                           const VECTOR_TYPE<vectorNum> &value, \\\n"
"                           char *base_address, \\\n"
"                           uint32_t mask, \\\n"
"                           uint32_t offset = 0) \\\n"
"{ \\\n"
"  for (uint32_t i = 0; i < vectorNum; ++i) { \\\n"
"    const uint32_t v0 = _mm_extract_epi32(PS2SI(value.m[i]), 0) & MASK; \\\n"
"    const uint32_t v1 = _mm_extract_epi32(PS2SI(value.m[i]), 1) & MASK; \\\n"
"    const uint32_t v2 = _mm_extract_epi32(PS2SI(value.m[i]), 2) & MASK; \\\n"
"    const uint32_t v3 = _mm_extract_epi32(PS2SI(value.m[i]), 3) & MASK; \\\n"
"    const uint32_t o0 = _mm_extract_epi32(PS2SI(address.m[i]), 0) + offset; \\\n"
"    const uint32_t o1 = _mm_extract_epi32(PS2SI(address.m[i]), 1) + offset; \\\n"
"    const uint32_t o2 = _mm_extract_epi32(PS2SI(address.m[i]), 2) + offset; \\\n"
"    const uint32_t o3 = _mm_extract_epi32(PS2SI(address.m[i]), 3) + offset; \\\n"
"    if (mask & 1) *(CTYPE *)(base_address + o0) = v0; \\\n"
"    if (mask & 2) *(CTYPE *)(base_address + o1) = v1; \\\n"
"    if (mask & 4) *(CTYPE *)(base_address + o2) = v2; \\\n"
"    if (mask & 8) *(CTYPE *)(base_address + o3) = v3; \\\n"
"    mask = mask >> 4; \\\n"
"  } \\\n"
"} \\\n"
"template <uint32_t vectorNum> \\\n"
"INLINE void MASKED_SCATTER(const simd_dw<vectorNum> &address, \\\n"
"                           const SCALAR_TYPE &value, \\\n"
"                           char *base_address, \\\n"
"                           uint32_t mask, \\\n"
"                           uint32_t offset = 0) \\\n"
"{ \\\n"
"  MASKED_SCATTER(address, VECTOR_TYPE<vectorNum>(value), base_address, mask, offset); \\\n"
"} \\\n"
"template <uint32_t vectorNum> \\\n"
"INLINE void MASKED_SCATTER(const scalar_dw &address, \\\n"
"                           const VECTOR_TYPE<vectorNum> &value, \\\n"
"                           char *base_address, \\\n"
"                           uint32_t mask, \\\n"
"                           uint32_t offset = 0) \\\n"
"{ \\\n"
"  MASKED_SCATTER(simd_dw<vectorNum>(address), value, base_address, mask, offset); \\\n"
"}\n"
"DECL_MASKED_SCATTER(simd_dw, scalar_dw, uint32_t, 0xffffffff)\n"
"DECL_MASKED_SCATTER(simd_w,  scalar_w,  uint16_t, 0xffff)\n"
"DECL_MASKED_SCATTER(simd_b,  scalar_b,  uint8_t,  0xff)\n"
"#undef DECL_MASKED_SCATTER\n"
"\n"
"template <typename T, typename U, typename V>\n"
"INLINE void MASKED_SCATTER2(const T &address,\n"
"                            const U &value0,\n"
"                            const V &value1,\n"
"                            char *base_address,\n"
"                            uint32_t mask)\n"
"{\n"
"  MASKED_SCATTER(address, value0, base_address, mask, 0);\n"
"  MASKED_SCATTER(address, value1, base_address, mask, 4);\n"
"}\n"
"template <typename T, typename U, typename V, typename W>\n"
"INLINE void MASKED_SCATTER3(const T &address,\n"
"                            const U &value0,\n"
"                            const V &value1,\n"
"                            const W &value2,\n"
"                            char *base_address,\n"
"                            uint32_t mask)\n"
"{\n"
"  MASKED_SCATTER(address, value0, base_address, mask, 0);\n"
"  MASKED_SCATTER(address, value1, base_address, mask, 4);\n"
"  MASKED_SCATTER(address, value2, base_address, mask, 8);\n"
"}\n"
"template <typename T, typename U, typename V, typename W, typename X>\n"
"INLINE void MASKED_SCATTER4(const T &address,\n"
"                            const U &value0,\n"
"                            const V &value1,\n"
"                            const W &value2,\n"
"                            const X &value3,\n"
"                            char *base_address,\n"
"                            uint32_t mask)\n"
"{\n"
"  MASKED_SCATTER(address, value0, base_address, mask, 0);\n"
"  MASKED_SCATTER(address, value1, base_address, mask, 4);\n"
"  MASKED_SCATTER(address, value2, base_address, mask, 8);\n"
"  MASKED_SCATTER(address, value3, base_address, mask, 12);\n"
"}\n"
"\n"
"/* Gather */\n"
"#define DECL_GATHER(VECTOR_TYPE, SCALAR_TYPE, CTYPE) \\\n"
"template <uint32_t vectorNum> \\\n"
"INLINE void GATHER(VECTOR_TYPE<vectorNum> &dst, \\\n"
"                   const simd_dw<vectorNum> &address, \\\n"
"                   const char *base_address, \\\n"
"                   uint32_t offset = 0) \\\n"
"{ \\\n"
"  for (uint32_t i = 0; i < vectorNum; ++i) { \\\n"
"    const uint32_t o0 = _mm_extract_epi32(PS2SI(address.m[i]), 0) + offset; \\\n"
"    const uint32_t o1 = _mm_extract_epi32(PS2SI(address.m[i]), 1) + offset; \\\n"
"    const uint32_t o2 = _mm_extract_epi32(PS2SI(address.m[i]), 2) + offset; \\\n"
"    const uint32_t o3 = _mm_extract_epi32(PS2SI(address.m[i]), 3) + offset; \\\n"
"    const CTYPE v0 = *(const CTYPE *)(base_address + o0); \\\n"
"    const CTYPE v1 = *(const CTYPE *)(base_address + o1); \\\n"
"    const CTYPE v2 = *(const CTYPE *)(base_address + o2); \\\n"
"    const CTYPE v3 = *(const CTYPE *)(base_address + o3); \\\n"
"    dst.m[i] = SI2PS(_mm_insert_epi32(PS2SI(dst.m[i]), v0, 0)); \\\n"
"    dst.m[i] = SI2PS(_mm_insert_epi32(PS2SI(dst.m[i]), v1, 1)); \\\n"
"    dst.m[i] = SI2PS(_mm_insert_epi32(PS2SI(dst.m[i]), v2, 2)); \\\n"
"    dst.m[i] = SI2PS(_mm_insert_epi32(PS2SI(dst.m[i]), v3, 3)); \\\n"
"  } \\\n"
"} \\\n"
"template <uint32_t vectorNum> \\\n"
"INLINE void GATHER(VECTOR_TYPE<vectorNum> &dst, \\\n"
"                   const scalar_dw &address, \\\n"
"                   const char *base_address, \\\n"
"                   uint32_t offset = 0) \\\n"
"{ \\\n"
"  GATHER(dst, VECTOR_TYPE<vectorNum>(address), base_address, offset); \\\n"
"}\n"
"DECL_GATHER(simd_dw, scalar_dw, uint32_t)\n"
"DECL_GATHER(simd_w,  scalar_w, uint16_t)\n"
"DECL_GATHER(simd_b,  scalar_b, uint8_t)\n"
"#undef DECL_GATHER\n"
"\n"
"template <typename T, typename U, typename V>\n"
"INLINE void GATHER2(U &value0,\n"
"                    V &value1,\n"
"                    const T &address,\n"
"                    char *base_address)\n"
"{\n"
"  GATHER(value0, address, base_address, 0);\n"
"  GATHER(value1, address, base_address, 4);\n"
"}\n"
"template <typename T, typename U, typename V, typename W>\n"
"INLINE void GATHER3(U &value0,\n"
"                    V &value1,\n"
"                    W &value2,\n"
"                    const T &address,\n"
"                    char *base_address)\n"
"{\n"
"  GATHER(value0, address, base_address, 0);\n"
"  GATHER(value1, address, base_address, 4);\n"
"  GATHER(value2, address, base_address, 8);\n"
"}\n"
"template <typename T, typename U, typename V, typename W, typename X>\n"
"INLINE void GATHER4(U &value0,\n"
"                    V &value1,\n"
"                    W &value2,\n"
"                    X &value3,\n"
"                    const T &address,\n"
"                    char *base_address)\n"
"{\n"
"  GATHER(value0, address, base_address, 0);\n"
"  GATHER(value1, address, base_address, 4);\n"
"  GATHER(value2, address, base_address, 8);\n"
"  GATHER(value3, address, base_address, 12);\n"
"}\n"
"#include <cstdio>\n"
"/* Masked gather will only load activated lanes */\n"
"#define DECL_MASKED_GATHER(VECTOR_TYPE, SCALAR_TYPE, CTYPE) \\\n"
"template <uint32_t vectorNum> \\\n"
"INLINE void MASKED_GATHER(VECTOR_TYPE<vectorNum> &dst, \\\n"
"                          const simd_dw<vectorNum> &address, \\\n"
"                          const char *base_address, \\\n"
"                          uint32_t mask, \\\n"
"                          uint32_t offset = 0) \\\n"
"{ \\\n"
"  for (uint32_t i = 0; i < vectorNum; ++i) { \\\n"
"    printf(\"%i\\n\", i);\\\n"
"    const uint32_t o0 = _mm_extract_epi32(PS2SI(address.m[i]), 0) + offset; \\\n"
"    const uint32_t o1 = _mm_extract_epi32(PS2SI(address.m[i]), 1) + offset; \\\n"
"    const uint32_t o2 = _mm_extract_epi32(PS2SI(address.m[i]), 2) + offset; \\\n"
"    const uint32_t o3 = _mm_extract_epi32(PS2SI(address.m[i]), 3) + offset; \\\n"
"    if (mask & 1) { \\\n"
"      const CTYPE v0 = *(const CTYPE *)(base_address + o0); \\\n"
"      dst.m[i] = SI2PS(_mm_insert_epi32(PS2SI(dst.m[i]), v0, 0)); \\\n"
"    } \\\n"
"    if (mask & 2) { \\\n"
"      const CTYPE v1 = *(const CTYPE *)(base_address + o1); \\\n"
"      dst.m[i] = SI2PS(_mm_insert_epi32(PS2SI(dst.m[i]), v1, 1)); \\\n"
"    } \\\n"
"    if (mask & 4) { \\\n"
"      const CTYPE v2 = *(const CTYPE *)(base_address + o2); \\\n"
"      dst.m[i] = SI2PS(_mm_insert_epi32(PS2SI(dst.m[i]), v2, 2)); \\\n"
"    } \\\n"
"    if (mask & 8) { \\\n"
"      const CTYPE v3 = *(const CTYPE *)(base_address + o3); \\\n"
"      dst.m[i] = SI2PS(_mm_insert_epi32(PS2SI(dst.m[i]), v3, 3)); \\\n"
"    } \\\n"
"    mask = mask >> 4; \\\n"
"  } \\\n"
"} \\\n"
"template <uint32_t vectorNum> \\\n"
"INLINE void MASKED_GATHER(VECTOR_TYPE<vectorNum> &dst, \\\n"
"                          const scalar_dw &address, \\\n"
"                          const char *base_address, \\\n"
"                          uint32_t mask, \\\n"
"                          uint32_t offset = 0) \\\n"
"{ \\\n"
"  MASKED_GATHER(dst, simd_dw<vectorNum>(address), base_address, mask, offset); \\\n"
"}\n"
"DECL_MASKED_GATHER(simd_dw, scalar_dw, uint32_t)\n"
"DECL_MASKED_GATHER(simd_w, scalar_w, uint16_t)\n"
"DECL_MASKED_GATHER(simd_b, scalar_b, uint8_t)\n"
"#undef DECL_MASKED_GATHER\n"
"\n"
"template <typename T, typename U, typename V>\n"
"INLINE void MASKED_GATHER2(U &value0,\n"
"                           V &value1,\n"
"                           const T &address,\n"
"                           char *base_address,\n"
"                           uint32_t mask)\n"
"{\n"
"  MASKED_GATHER(value0, address, base_address, mask, 0);\n"
"  MASKED_GATHER(value1, address, base_address, mask, 4);\n"
"}\n"
"template <typename T, typename U, typename V, typename W>\n"
"INLINE void MASKED_GATHER3(U &value0,\n"
"                           V &value1,\n"
"                           W &value2,\n"
"                           const T &address,\n"
"                           char *base_address,\n"
"                           uint32_t mask)\n"
"{\n"
"  MASKED_GATHER(value0, address, base_address, mask, 0);\n"
"  MASKED_GATHER(value1, address, base_address, mask, 4);\n"
"  MASKED_GATHER(value2, address, base_address, mask, 8);\n"
"}\n"
"template <typename T, typename U, typename V, typename W, typename X>\n"
"INLINE void MASKED_GATHER4(U &value0,\n"
"                           V &value1,\n"
"                           W &value2,\n"
"                           X &value3,\n"
"                           const T &address,\n"
"                           char *base_address,\n"
"                           uint32_t mask)\n"
"{\n"
"  MASKED_GATHER(value0, address, base_address, mask, 0);\n"
"  MASKED_GATHER(value1, address, base_address, mask, 4);\n"
"  MASKED_GATHER(value2, address, base_address, mask, 8);\n"
"  MASKED_GATHER(value3, address, base_address, mask, 12);\n"
"}\n"
"\n"
"//////////////////////////////////////////////////////////////////////////////\n"
"// Scalar instructions\n"
"//////////////////////////////////////////////////////////////////////////////\n"
"INLINE uint32_t elemNum(const scalar_dw &x) { return 1; }\n"
"INLINE uint32_t elemNum(const scalar_w &x) { return 1; }\n"
"INLINE uint32_t elemNum(const scalar_b &x) { return 1; }\n"
"INLINE uint32_t elemNum(const scalar_m &x) { return 1; }\n"
"INLINE uint32_t mask(const scalar_m &v) { return v.u ? 1 : 0; }\n"
"\n"
"// 32 bit floating points\n"
"INLINE void ADD_F(scalar_dw &dst, scalar_dw v0, scalar_dw v1) { dst.f = v0.f + v1.f; }\n"
"INLINE void SUB_F(scalar_dw &dst, scalar_dw v0, scalar_dw v1) { dst.f = v0.f - v1.f; }\n"
"INLINE void MUL_F(scalar_dw &dst, scalar_dw v0, scalar_dw v1) { dst.f = v0.f * v1.f; }\n"
"INLINE void DIV_F(scalar_dw &dst, scalar_dw v0, scalar_dw v1) { dst.f = v0.f / v1.f; }\n"
"INLINE void EQ_F(scalar_m &dst, scalar_dw v0, scalar_dw v1) { dst.u = (v0.f == v1.f ? ~0 : 0); }\n"
"INLINE void NE_F(scalar_m &dst, scalar_dw v0, scalar_dw v1) { dst.u = (v0.f != v1.f ? ~0 : 0); }\n"
"INLINE void LE_F(scalar_m &dst, scalar_dw v0, scalar_dw v1) { dst.u = (v0.f <= v1.f ? ~0 : 0); }\n"
"INLINE void LT_F(scalar_m &dst, scalar_dw v0, scalar_dw v1) { dst.u = (v0.f < v1.f ? ~0 : 0); }\n"
"INLINE void GE_F(scalar_m &dst, scalar_dw v0, scalar_dw v1) { dst.u = (v0.f >= v1.f ? ~0 : 0); }\n"
"INLINE void GT_F(scalar_m &dst, scalar_dw v0, scalar_dw v1) { dst.u = (v0.f > v1.f ? ~0 : 0); }\n"
"\n"
"// 32 bit integers\n"
"INLINE void SHL_U32(scalar_dw &dst, scalar_dw v0, scalar_dw v1) { dst.s = v0.s << v1.s; }\n"
"INLINE void ADD_S32(scalar_dw &dst, scalar_dw v0, scalar_dw v1) { dst.s = v0.s + v1.s; }\n"
"INLINE void SUB_S32(scalar_dw &dst, scalar_dw v0, scalar_dw v1) { dst.s = v0.s - v1.s; }\n"
"INLINE void MUL_S32(scalar_dw &dst, scalar_dw v0, scalar_dw v1) { dst.s = v0.s * v1.s; }\n"
"INLINE void DIV_S32(scalar_dw &dst, scalar_dw v0, scalar_dw v1) { dst.s = v0.s / v1.s; }\n"
"INLINE void REM_S32(scalar_dw &dst, scalar_dw v0, scalar_dw v1) { dst.s = v0.s % v1.s; }\n"
"INLINE void MUL_U32(scalar_dw &dst, scalar_dw v0, scalar_dw v1) { dst.u = v0.u * v1.u; }\n"
"INLINE void DIV_U32(scalar_dw &dst, scalar_dw v0, scalar_dw v1) { dst.u = v0.u / v1.u; }\n"
"INLINE void REM_U32(scalar_dw &dst, scalar_dw v0, scalar_dw v1) { dst.u = v0.u % v1.u; }\n"
"INLINE void EQ_S32(scalar_m &dst, scalar_dw v0, scalar_dw v1) { dst.u = (v0.s == v1.s ? ~0 : 0); }\n"
"INLINE void NE_S32(scalar_m &dst, scalar_dw v0, scalar_dw v1) { dst.u = (v0.s != v1.s ? ~0 : 0); }\n"
"INLINE void LE_S32(scalar_m &dst, scalar_dw v0, scalar_dw v1) { dst.u = (v0.s <= v1.s ? ~0 : 0); }\n"
"INLINE void LT_S32(scalar_m &dst, scalar_dw v0, scalar_dw v1) { dst.u = (v0.s < v1.s ? ~0 : 0); }\n"
"INLINE void GE_S32(scalar_m &dst, scalar_dw v0, scalar_dw v1) { dst.u = (v0.s >= v1.s ? ~0 : 0); }\n"
"INLINE void GT_S32(scalar_m &dst, scalar_dw v0, scalar_dw v1) { dst.u = (v0.s > v1.s ? ~0 : 0); }\n"
"INLINE void XOR_S32(scalar_dw &dst, scalar_dw v0, scalar_dw v1) { dst.s = v0.s ^ v1.s; }\n"
"INLINE void OR_S32(scalar_dw &dst, scalar_dw v0, scalar_dw v1) { dst.s = v0.s | v1.s; }\n"
"INLINE void AND_S32(scalar_dw &dst, scalar_dw v0, scalar_dw v1) { dst.s = v0.s & v1.s; }\n"
"INLINE void LE_U32(scalar_m &dst, scalar_dw v0, scalar_dw v1) { dst.u = (v0.u <= v1.u ? ~0 : 0); }\n"
"INLINE void LT_U32(scalar_m &dst, scalar_dw v0, scalar_dw v1) { dst.u = (v0.u < v1.u ? ~0 : 0); }\n"
"INLINE void GE_U32(scalar_m &dst, scalar_dw v0, scalar_dw v1) { dst.u = (v0.u >= v1.u ? ~0 : 0); }\n"
"INLINE void GT_U32(scalar_m &dst, scalar_dw v0, scalar_dw v1) { dst.u = (v0.u > v1.u ? ~0 : 0); }\n"
"INLINE void LOAD(scalar_dw &dst, const char *ptr) { dst.u = *(const uint32_t *) ptr; }\n"
"INLINE void STORE(scalar_dw src, char *ptr) { *(uint32_t *) ptr = src.u; }\n"
"INLINE void LOADI(scalar_dw &dst, uint32_t u) { dst.u = u; }\n"
"INLINE void SCATTER(scalar_dw offset, scalar_dw value, char *base) { *(uint32_t*)(base + offset.u) = value.u; }\n"
"INLINE void GATHER(scalar_dw &dst, scalar_dw offset, const char *base) { dst.u = *(const uint32_t*)(base + offset.u); }\n"
"\n"
"// 16 bits scalar\n"
"INLINE void SHL_U16(scalar_w &dst, scalar_w v0, scalar_w v1) { dst.u = v0.u << v1.u; }\n"
"INLINE void ADD_U16(scalar_w &dst, scalar_w v0, scalar_w v1) { dst.u = v0.u + v1.u; }\n"
"INLINE void SUB_U16(scalar_w &dst, scalar_w v0, scalar_w v1) { dst.u = v0.u - v1.u; }\n"
"INLINE void ADD_S16(scalar_w &dst, scalar_w v0, scalar_w v1) { dst.s = v0.s + v1.s; }\n"
"INLINE void SUB_S16(scalar_w &dst, scalar_w v0, scalar_w v1) { dst.s = v0.s - v1.s; }\n"
"INLINE void MUL_S16(scalar_w &dst, scalar_w v0, scalar_w v1) { dst.s = v0.s * v1.s; }\n"
"INLINE void DIV_S16(scalar_w &dst, scalar_w v0, scalar_w v1) { dst.s = v0.s / v1.s; }\n"
"INLINE void REM_S16(scalar_w &dst, scalar_w v0, scalar_w v1) { dst.s = v0.s % v1.s; }\n"
"INLINE void MUL_U16(scalar_w &dst, scalar_w v0, scalar_w v1) { dst.u = v0.u * v1.u; }\n"
"INLINE void DIV_U16(scalar_w &dst, scalar_w v0, scalar_w v1) { dst.u = v0.u / v1.u; }\n"
"INLINE void REM_U16(scalar_w &dst, scalar_w v0, scalar_w v1) { dst.u = v0.u % v1.u; }\n"
"INLINE void EQ_S16(scalar_m &dst, scalar_w v0, scalar_w v1) { dst.u = (v0.s == v1.s ? ~0 : 0); }\n"
"INLINE void NE_S16(scalar_m &dst, scalar_w v0, scalar_w v1) { dst.u = (v0.s != v1.s ? ~0 : 0); }\n"
"INLINE void LE_S16(scalar_m &dst, scalar_w v0, scalar_w v1) { dst.u = (v0.s <= v1.s ? ~0 : 0); }\n"
"INLINE void LT_S16(scalar_m &dst, scalar_w v0, scalar_w v1) { dst.u = (v0.s < v1.s ? ~0 : 0); }\n"
"INLINE void GE_S16(scalar_m &dst, scalar_w v0, scalar_w v1) { dst.u = (v0.s >= v1.s ? ~0 : 0); }\n"
"INLINE void GT_S16(scalar_m &dst, scalar_w v0, scalar_w v1) { dst.u = (v0.s > v1.s ? ~0 : 0); }\n"
"INLINE void XOR_S16(scalar_w &dst, scalar_w v0, scalar_w v1) { dst.s = v0.s ^ v1.s; }\n"
"INLINE void OR_S16(scalar_w &dst, scalar_w v0, scalar_w v1) { dst.s = v0.s | v1.s; }\n"
"INLINE void AND_S16(scalar_w &dst, scalar_w v0, scalar_w v1) { dst.s = v0.s & v1.s; }\n"
"INLINE void LE_U16(scalar_m &dst, scalar_w v0, scalar_w v1) { dst.u = (v0.u <= v1.u ? ~0 : 0); }\n"
"INLINE void LT_U16(scalar_m &dst, scalar_w v0, scalar_w v1) { dst.u = (v0.u < v1.u ? ~0 : 0); }\n"
"INLINE void GE_U16(scalar_m &dst, scalar_w v0, scalar_w v1) { dst.u = (v0.u >= v1.u ? ~0 : 0); }\n"
"INLINE void GT_U16(scalar_m &dst, scalar_w v0, scalar_w v1) { dst.u = (v0.u > v1.u ? ~0 : 0); }\n"
"INLINE void LOAD(scalar_w &dst, const char *ptr) { dst.u = *(const uint16_t *) ptr; }\n"
"INLINE void STORE(scalar_w src, char *ptr) { *(uint16_t *) ptr = src.u; }\n"
"INLINE void LOADI(scalar_w &dst, uint16_t u) { dst.u = u; }\n"
"INLINE void SCATTER(scalar_dw offset, scalar_w value, char *base) { *(uint16_t*)(base + offset.u) = value.u; }\n"
"INLINE void GATHER(scalar_w &dst, scalar_dw offset, const char *base) { dst.u = *(const uint16_t*)(base + offset.u); }\n"
"\n"
"// 8 bits scalars\n"
"INLINE void SHL_U8(scalar_b &dst, scalar_b v0, scalar_b v1) { dst.u = v0.u << v1.u; }\n"
"INLINE void ADD_U8(scalar_b &dst, scalar_b v0, scalar_b v1) { dst.u = v0.u + v1.u; }\n"
"INLINE void SUB_U8(scalar_b &dst, scalar_b v0, scalar_b v1) { dst.u = v0.u - v1.u; }\n"
"INLINE void ADD_S8(scalar_b &dst, scalar_b v0, scalar_b v1) { dst.s = v0.s + v1.s; }\n"
"INLINE void SUB_S8(scalar_b &dst, scalar_b v0, scalar_b v1) { dst.s = v0.s - v1.s; }\n"
"INLINE void MUL_S8(scalar_b &dst, scalar_b v0, scalar_b v1) { dst.s = v0.s * v1.s; }\n"
"INLINE void DIV_S8(scalar_b &dst, scalar_b v0, scalar_b v1) { dst.s = v0.s / v1.s; }\n"
"INLINE void REM_S8(scalar_b &dst, scalar_b v0, scalar_b v1) { dst.s = v0.s % v1.s; }\n"
"INLINE void MUL_U8(scalar_b &dst, scalar_b v0, scalar_b v1) { dst.u = v0.u * v1.u; }\n"
"INLINE void DIV_U8(scalar_b &dst, scalar_b v0, scalar_b v1) { dst.u = v0.u / v1.u; }\n"
"INLINE void REM_U8(scalar_b &dst, scalar_b v0, scalar_b v1) { dst.u = v0.u % v1.u; }\n"
"INLINE void EQ_S8(scalar_m &dst, scalar_b v0, scalar_b v1) { dst.u = (v0.s == v1.s ? ~0 : 0); }\n"
"INLINE void NE_S8(scalar_m &dst, scalar_b v0, scalar_b v1) { dst.u = (v0.s != v1.s ? ~0 : 0); }\n"
"INLINE void LE_S8(scalar_m &dst, scalar_b v0, scalar_b v1) { dst.u = (v0.s <= v1.s ? ~0 : 0); }\n"
"INLINE void LT_S8(scalar_m &dst, scalar_b v0, scalar_b v1) { dst.u = (v0.s < v1.s ? ~0 : 0); }\n"
"INLINE void GE_S8(scalar_m &dst, scalar_b v0, scalar_b v1) { dst.u = (v0.s >= v1.s ? ~0 : 0); }\n"
"INLINE void GT_S8(scalar_m &dst, scalar_b v0, scalar_b v1) { dst.u = (v0.s > v1.s ? ~0 : 0); }\n"
"INLINE void XOR_S8(scalar_b &dst, scalar_b v0, scalar_b v1) { dst.s = v0.s ^ v1.s; }\n"
"INLINE void OR_S8(scalar_b &dst, scalar_b v0, scalar_b v1) { dst.s = v0.s | v1.s; }\n"
"INLINE void AND_S8(scalar_b &dst, scalar_b v0, scalar_b v1) { dst.s = v0.s & v1.s; }\n"
"INLINE void LE_U8(scalar_m &dst, scalar_b v0, scalar_b v1) { dst.u = (v0.u <= v1.u ? ~0 : 0); }\n"
"INLINE void LT_U8(scalar_m &dst, scalar_b v0, scalar_b v1) { dst.u = (v0.u < v1.u ? ~0 : 0); }\n"
"INLINE void GE_U8(scalar_m &dst, scalar_b v0, scalar_b v1) { dst.u = (v0.u >= v1.u ? ~0 : 0); }\n"
"INLINE void GT_U8(scalar_m &dst, scalar_b v0, scalar_b v1) { dst.u = (v0.u > v1.u ? ~0 : 0); }\n"
"INLINE void LOAD(scalar_b &dst, const char *ptr) { dst.u = *(const uint8_t *) ptr; }\n"
"INLINE void STORE(scalar_b src, char *ptr) { *(uint8_t *) ptr = src.u; }\n"
"INLINE void LOADI(scalar_b &dst, uint8_t u) { dst.u = u; }\n"
"INLINE void SCATTER(scalar_dw offset, scalar_b value, char *base) { *(uint8_t*)(base + offset.u) = value.u; }\n"
"INLINE void GATHER(scalar_b &dst, scalar_dw offset, const char *base) { dst.u = *(const uint8_t*)(base + offset.u); }\n"
"\n"
"//////////////////////////////////////////////////////////////////////////////\n"
"// Identical instructions are forwarded\n"
"//////////////////////////////////////////////////////////////////////////////\n"
"\n"
"// Forward identical 32 bit instructions\n"
"#define MOV_U32 MOV_S32\n"
"#define SHL_S32 SHL_U32\n"
"#define MOV_F MOV_S32\n"
"#define ADD_U32 ADD_S32\n"
"#define SUB_U32 SUB_S32\n"
"#define XOR_U32 XOR_S32\n"
"#define OR_U32 OR_S32\n"
"#define AND_U32 AND_S32\n"
"#define EQ_U32 EQ_S32\n"
"#define NE_U32 NE_S32\n"
"\n"
"// Forward identical 16 bit instructions\n"
"#define MOV_U16 MOV_S16\n"
"#define SHL_S16 SHL_U16\n"
"#define ADD_U16 ADD_S16\n"
"#define SUB_U16 SUB_S16\n"
"#define AND_U16 AND_S16\n"
"#define XOR_U16 XOR_S16\n"
"#define OR_U16 OR_S16\n"
"#define AND_U16 AND_S16\n"
"#define EQ_U16 EQ_S16\n"
"#define NE_U16 NE_S16\n"
"\n"
"// Forward identical 8 bit instructions\n"
"#define MOV_U8 MOV_S8\n"
"#define SHL_S8 SHL_U8\n"
"#define ADD_U8 ADD_S8\n"
"#define SUB_U8 SUB_S8\n"
"#define AND_U8 AND_S8\n"
"#define XOR_U8 XOR_S8\n"
"#define OR_U8 OR_S8\n"
"#define AND_U8 AND_S8\n"
"#define EQ_U8 EQ_S8\n"
"#define NE_U8 NE_S8\n"
"\n"
"// More convenient to emit code\n"
"#define GATHER1 GATHER\n"
"#define SCATTER1 SCATTER\n"
"#define MASKED_GATHER1 MASKED_GATHER\n"
"#define MASKED_SCATTER1 MASKED_SCATTER\n"
"\n"
"#undef PS2SI\n"
"#undef SI2PS\n"
"#undef ID\n"
"\n"
"//////////////////////////////////////////////////////////////////////////////\n"
"// Goto implementation which is directly inspired by BDW goto and by this\n"
"// article \"Whole function vectorization\" (CGO 2011)\n"
"//////////////////////////////////////////////////////////////////////////////\n"
"\n"
"/*! Update the UIP vector according for the lanes alive in mask */\n"
"template <uint32_t vectorNum>\n"
"void updateUIP(simd_w<vectorNum> &uipVec, const simd_m<vectorNum> mask, uint16_t uip) {\n"
"  union { float f; uint32_t u; } x;\n"
"  x.u = uip;\n"
"  __m128 v = _mm_load1_ps(&x.f);\n"
"  for (uint32_t i = 0; i < vectorNum; ++i)\n"
"    uipVec.m[i] = _mm_blendv_ps(uipVec.m[i], v, mask.m[i]);\n"
"}\n"
"\n"
"/*! Update the UIP vector according for the lanes alive in mask */\n"
"template <uint32_t vectorNum>\n"
"void updateUIPC(simd_w<vectorNum> &uipVec,\n"
"                const simd_m<vectorNum> mask,\n"
"                const simd_m<vectorNum> cond,\n"
"                uint16_t uip) {\n"
"  union { float f; uint32_t u; } x;\n"
"  x.u = uip;\n"
"  __m128 v = _mm_load1_ps(&x.f);\n"
"  for (uint32_t i = 0; i < vectorNum; ++i)\n"
"    uipVec.m[i] = _mm_blendv_ps(uipVec.m[i], v, _mm_and_ps(cond.m[i], mask.m[i]));\n"
"}\n"
"\n"
"/*! Update the execution mask based on block IP and UIP values */\n"
"template <uint32_t vectorNum>\n"
"void updateMask(simd_m<vectorNum> &mask, const simd_w<vectorNum> &uipVec, uint16_t ip) {\n"
"  const simd_w<vectorNum> ipv(ip);\n"
"  LE_U16(mask, uipVec, ipv);\n"
"}\n"
"\n"
"/*! Jump to the block JIP */\n"
"#define SIM_FWD_BRA(UIPVEC, EMASK, JIP, UIP) \\\n"
"  do { \\\n"
"    updateUIP(UIPVEC, EMASK, UIP); \\\n"
"    goto label##JIP; \\\n"
"  } while (0)\n"
"\n"
"/*! Based on the condition jump to block JIP */\n"
"#define SIM_FWD_BRA_C(UIPVEC, EMASK, COND, JIP, UIP) \\\n"
"  do { \\\n"
"    updateUIPC(UIPVEC, EMASK, COND, UIP); \\\n"
"    typeof(COND) jumpCond; \\\n"
"    scalar_w jipScalar(uint16_t(JIP)); \\\n"
"    LT_U16(jumpCond, UIPVEC, uint16_t(JIP)); \\\n"
"    uint32_t jumpMask = mask(jumpCond); \\\n"
"    if (!jumpMask) goto label##JIP; \\\n"
"  } while (0)\n"
"\n"
"/*! Backward jump is always taken */\n"
"#define SIM_BWD_BRA(UIPVEC, EMASK, JIP) \\\n"
"  do { \\\n"
"    updateUIP(UIPVEC, EMASK, JIP); \\\n"
"    goto label##JIP; \\\n"
"  } while (0)\n"
"\n"
"/*! Conditional backward jump is taken if the condition is non-null */\n"
"#define SIM_BWD_BRA_C(UIPVEC, EMASK, COND, JIP) \\\n"
"  do { \\\n"
"    updateUIPC(UIPVEC, EMASK, COND, JIP); \\\n"
"    typeof(COND) JUMP_MASK; \\\n"
"    AND_M(JUMP_MASK, COND, EMASK); \\\n"
"    if (mask(JUMP_MASK) != 0) goto label##JIP; \\\n"
"  } while (0)\n"
"\n"
"/*! JOIN: reactivates lanes */\n"
"#define SIM_JOIN(UIPVEC, MASK, IP) \\\n"
"  do { \\\n"
"    updateMask(MASK, UIPVEC, IP); \\\n"
"    movedMask = mask(MASK); \\\n"
"  } while (0)\n"
"\n"
"/*! JOIN_JUMP: ractivate lanes and jump to JIP if none is activated */\n"
"#define SIM_JOIN_JUMP(UIPVEC, EMASK, IP, JIP) \\\n"
"  do { \\\n"
"    SIM_JOIN(UIPVEC, EMASK, IP); \\\n"
"    const uint32_t execMask = mask(EMASK); \\\n"
"    if (execMask == 0) goto label##JIP; \\\n"
"  } while (0)\n"
"\n"
"/* Macro to apply masking on destinations (from zero to four destinations) */\n"
"#define MASKED0(OP, ...) \\\n"
"  do { \\\n"
"    OP(__VA_ARGS__); \\\n"
"  } while (0)\n"
"\n"
"#define MASKED1(OP, ARG0, ...) \\\n"
"  do { \\\n"
"    typeof(ARG0) ARG0##__; \\\n"
"    OP(ARG0##__, __VA_ARGS__); \\\n"
"    select(ARG0, ARG0, ARG0##__, emask); \\\n"
"  } while (0)\n"
"\n"
"#define MASKED2(OP, ARG0, ARG1, ...) \\\n"
"  do { \\\n"
"    typeof(ARG0) ARG0##__; \\\n"
"    typeof(ARG1) ARG1##__; \\\n"
"    OP(ARG0##__, ARG1##__, __VA_ARGS__); \\\n"
"    select(ARG0, ARG0, ARG0##__, emask); \\\n"
"    select(ARG1, ARG1, ARG1##__, emask); \\\n"
"  } while (0)\n"
"\n"
"#define MASKED3(OP, ARG0, ARG1, ARG2, ...) \\\n"
"  do { \\\n"
"    typeof(ARG0) ARG0##__; \\\n"
"    typeof(ARG1) ARG1##__; \\\n"
"    typeof(ARG2) ARG2##__; \\\n"
"    OP(ARG0##__, ARG1##__, ARG2##__, __VA_ARGS__); \\\n"
"    select(ARG0, ARG0, ARG0##__, emask); \\\n"
"    select(ARG1, ARG1, ARG1##__, emask); \\\n"
"    select(ARG2, ARG2, ARG2##__, emask); \\\n"
"  } while (0)\n"
"\n"
"#define MASKED4(OP, ARG0, ARG1, ARG2, ARG3, ...) \\\n"
"  do { \\\n"
"    typeof(ARG0) ARG0##__; \\\n"
"    typeof(ARG1) ARG1##__; \\\n"
"    typeof(ARG2) ARG2##__; \\\n"
"    typeof(ARG3) ARG3##__; \\\n"
"    OP(ARG0##__, ARG1##__, ARG2##__, ARG3##__, __VA_ARGS__); \\\n"
"    select(ARG0, ARG0, ARG0##__, emask); \\\n"
"    select(ARG1, ARG1, ARG1##__, emask); \\\n"
"    select(ARG2, ARG2, ARG2##__, emask); \\\n"
"    select(ARG3, ARG3, ARG3##__, emask); \\\n"
"  } while (0)\n"
"\n"
"#undef INLINE\n"
"\n"
"// May be needed for some macro hell\n"
"#define COMMA ,\n"
"#endif /* __GBE_SIM_VECTOR_H__ */\n"
"\n"
;
}

